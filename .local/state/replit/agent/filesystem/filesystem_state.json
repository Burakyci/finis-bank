{"file_contents":{"src/App.css":{"content":"/* Import modern variables */\n@import url('./styles/variables.css');\n\n/* Reset and base styles */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: var(--font-family);\n  font-size: var(--font-size-base);\n  line-height: 1.6;\n  background-color: var(--color-background);\n  color: var(--color-text);\n  transition: all var(--transition-normal);\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\nbody.light {\n  background-color: #ffffff;\n  color: #212529;\n  transition: background-color 0.3s ease, color 0.3s ease;\n}\n\nbody.dark {\n  background-color: #121212;\n  color: #e0e0e0;\n  transition: background-color 0.3s ease, color 0.3s ease;\n}\n\n.input-light {\n  background-color: white;\n  border: 1px solid #ced4da;\n  color: #212529;\n}\n\n.input-dark {\n  background-color: #2d2d2d;\n  border: 1px solid #555;\n  color: #e0e0e0;\n}\n\n.input-disabled-light {\n  background-color: #f8f9fa;\n  border: 1px solid #e9ecef;\n}\n\n.input-disabled-dark {\n  background-color: #1a1a1a;\n  border: 1px solid #333;\n}\n\n.card-light {\n  background-color: white;\n  border: 1px solid #ddd;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.card-dark {\n  background-color: #1e1e1e;\n  border: 1px solid #444;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.3);\n}\n\n.nav-light {\n  background-color: #f8f9fa;\n  border-bottom: 1px solid #dee2e6;\n}\n\n.nav-dark {\n  background-color: #1e1e1e;\n  border-bottom: 1px solid #444;\n}\n\n.btn-primary {\n  background-color: #007bff;\n  color: white;\n  border: none;\n}\n\n.btn-success {\n  background-color: #28a745;\n  color: white;\n  border: none;\n}\n\n.btn-secondary {\n  background-color: #6c757d;\n  color: white;\n  border: none;\n}\n\n.btn-theme-toggle {\n  background-color: transparent;\n  border: 2px solid currentColor;\n  color: inherit;\n  padding: 8px 12px;\n  border-radius: 20px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.btn-theme-toggle:hover {\n  background-color: currentColor;\n  color: var(--hover-text-color);\n}\n\nbody.light .btn-theme-toggle:hover {\n  --hover-text-color: white;\n}\n\nbody.dark .btn-theme-toggle:hover {\n  --hover-text-color: #121212;\n}\n\n* {\n  box-sizing: border-box;\n}\n\nhtml {\n  -webkit-text-size-adjust: 100%;\n  -ms-text-size-adjust: 100%;\n}\n\n.container {\n  width: 100%;\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 15px;\n}\n\n.responsive-grid {\n  display: grid;\n  gap: 20px;\n  grid-template-columns: 1fr;\n}\n\n.mobile-nav-toggle {\n  display: none;\n  flex-direction: column;\n  cursor: pointer;\n  padding: 5px;\n  background: none;\n  border: none;\n}\n\n.mobile-nav-toggle span {\n  width: 25px;\n  height: 3px;\n  background-color: currentColor;\n  margin: 3px 0;\n  transition: 0.3s;\n}\n\n.mobile-menu {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .container {\n    padding: 0 20px;\n  }\n  \n  .responsive-grid {\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: 25px;\n  }\n  \n  .form-grid-2 {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 20px;\n  }\n  \n  .form-grid-3 {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 20px;\n  }\n}\n\n@media (min-width: 1024px) {\n  .container {\n    padding: 0 30px;\n  }\n  \n  .responsive-grid {\n    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n    gap: 30px;\n  }\n}\n\n@media (max-width: 767px) {\n  .mobile-nav-toggle {\n    display: flex;\n  }\n  \n  .desktop-nav {\n    display: none !important;\n  }\n  \n  .mobile-nav {\n    display: flex !important;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n  }\n  \n  .mobile-menu.open {\n    display: flex;\n    position: absolute;\n    top: 100%;\n    left: 0;\n    right: 0;\n    background: inherit;\n    flex-direction: column;\n    padding: 20px;\n    box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n    z-index: 1000;\n    border-top: 1px solid #ddd;\n  }\n  \n  .mobile-menu.open.dark {\n    border-top-color: #444;\n  }\n  \n  h1 { font-size: 1.8rem; }\n  h2 { font-size: 1.5rem; }\n  h3 { font-size: 1.3rem; }\n  \n  .form-grid-2,\n  .form-grid-3 {\n    display: grid;\n    grid-template-columns: 1fr;\n    gap: 15px;\n  }\n  \n  button, .btn {\n    min-height: 44px;\n    padding: 12px 16px;\n    font-size: 16px;\n  }\n  \n  input, textarea, select {\n    min-height: 44px;\n    padding: 12px;\n    font-size: 16px;\n    width: 100%;\n  }\n  \n  .card-light,\n  .card-dark {\n    margin: 10px 0;\n    padding: 15px;\n  }\n  \n  .mobile-spacing {\n    padding: 15px;\n    margin: 10px 0;\n  }\n  \n  .nav-container-mobile {\n    flex-direction: column;\n    align-items: stretch;\n    position: relative;\n  }\n  \n  .nav-header-mobile {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n  }\n}\n\n.text-center { text-align: center; }\n.text-left { text-align: left; }\n.text-right { text-align: right; }\n\n.mb-small { margin-bottom: 10px; }\n.mb-medium { margin-bottom: 20px; }\n.mb-large { margin-bottom: 30px; }\n\n.p-small { padding: 10px; }\n.p-medium { padding: 20px; }\n.p-large { padding: 30px; }\n\nimg {\n  max-width: 100%;\n  height: auto;\n}\n\n.table-responsive {\n  overflow-x: auto;\n  -webkit-overflow-scrolling: touch;\n}\n\n.table-responsive table {\n  min-width: 600px;\n}","size_bytes":5087},"src/App.tsx":{"content":"import React, { Suspense } from 'react'\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom'\nimport './App.css'\nimport './styles/main.css'\nimport { ThemeProvider } from './context/ThemeContext'\nimport { AuthProvider } from './context/AuthContext'\nimport Navigation from './components/Navigation'\nimport { \n  LazyHome,\n  LazyLogin,\n  LazyRegister,\n  LazyAccount,\n  LazyCreditApplication,\n  LoadingSpinner\n} from './components/LazyComponents'\n\nexport default function App() {\n  return (\n    <ThemeProvider>\n      <AuthProvider>\n        <Router>\n          <div className=\"app\">\n            <Navigation />\n            <Suspense fallback={<LoadingSpinner />}>\n              <Routes>\n                <Route path=\"/\" element={<LazyHome />} />\n                <Route path=\"/login\" element={<LazyLogin />} />\n                <Route path=\"/register\" element={<LazyRegister />} />\n                <Route path=\"/account\" element={<LazyAccount />} />\n                <Route path=\"/credit-application\" element={<LazyCreditApplication />} />\n              </Routes>\n            </Suspense>\n          </div>\n        </Router>\n      </AuthProvider>\n    </ThemeProvider>\n  )\n}","size_bytes":1179},"src/index.tsx":{"content":"import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App'\n\nReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n)","size_bytes":223},"replit.md":{"content":"# Overview\n\nThis is **Finiş Bankası**, a comprehensive Turkish banking application built with React TypeScript and Vite. The application features Firebase authentication, dark mode by default, automatic bank account generation, and a complete user management system with Turkish language interface. It provides secure login, detailed registration with financial profiling, account management with bank account details, a banking-themed home page, and an advanced AI-powered credit application system with real-time loan calculations following Turkish banking regulations.\n\nThe application integrates a Python pandas-based AI decision engine for sophisticated credit risk assessment using machine learning algorithms and multi-factor analysis.\n\n## Recent Updates (September 2025)\n- **CSS Modularization**: Split monolithic CSS into 4 focused files (layout.css, forms.css, components.css, pages.css) for better organization and maintainability\n- **Inline Style Elimination**: Removed all inline styles across the codebase, converting them to CSS classes for improved performance and runtime optimization\n- **Mock Data Centralization**: Centralized test data from Login and Register pages into `src/utils/mockData.ts` with TypeScript interfaces and development-only functionality  \n- **Component Extraction**: Extracted DepositCalculator and CreditCalculator from Home.tsx into independent, reusable components (reduced Home.tsx from 442 to 40 lines)\n- **Credit Form Refactoring**: Converted hardcoded CreditApplication data into comprehensive user input form with 23+ fields across 8 logical sections for real user data entry\n- **Import Optimization**: Cleaned unused imports across 12 files, implemented type-only imports, and optimized bundle size with proper import organization\n- **Component Organization**: Consolidated all components into unified `src/components/` and `src/hooks/` folders\n- **Enhanced Styling**: Implemented gray background styling for all input fields and AI decision panels\n- **Documentation**: Added comprehensive Turkish README.md for the project\n- **Deployment Ready**: Configured autoscale deployment settings for production\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and better development experience\n- **Build Tool**: Vite for fast development server and optimized production builds with proxy configuration\n- **Routing**: React Router DOM v7 for client-side navigation with BrowserRouter\n- **Styling**: Modular CSS architecture with 4 specialized files (layout.css, forms.css, components.css, pages.css) for improved organization, maintainability, and performance optimization\n- **Component Structure**: Functional components using React hooks for state management\n\n## Backend Architecture  \n- **Python API**: FastAPI-based decision engine running on port 8000\n- **Data Processing**: Pandas for data analysis and risk scoring algorithms\n- **AI/ML Components**: Multi-factor credit risk assessment with machine learning models\n- **API Integration**: RESTful API with CORS support for cross-origin requests\n\n## Development Setup\n- **TypeScript Configuration**: Strict type checking enabled with ESNext target and React JSX transform\n- **Module System**: ES modules with Node.js module resolution\n- **Development Server**: Configured to run on port 5000 with host binding and proxy to Python API\n- **Proxy Configuration**: Vite proxy setup for seamless frontend-backend communication (/api -> localhost:8000)\n\n## Application Structure\n- **Pages**: Home, Login, Register with detailed banking info, Account management, and Credit Application with AI analysis\n- **Components** (`src/components/`): \n  - Navigation.tsx - Main navigation with theme switching\n  - ErrorBanner.tsx - Error message display component\n  - LoadingSpinner.tsx - Loading animations\n  - NumberInput.tsx - Specialized number input component\n  - LazyComponents.tsx - Lazy-loaded page components\n  - DepositCalculator.tsx - Independent deposit calculation component\n  - CreditCalculator.tsx - Independent credit calculation component\n- **Hooks** (`src/hooks/`):\n  - useAsync.ts - Async operation management\n  - useDebounce.ts - Performance optimization for inputs\n  - useMemoizedCalculation.ts - Credit calculation memoization\n- **Feature Organization**: \n  - Credit system organized under `src/features/credit/` with dedicated components, hooks, and services\n  - Authentication features under `src/features/auth/`\n- **Utilities**: \n  - Account number generator and banking account creation functions\n  - Centralized mock data system in `src/utils/mockData.ts` with TypeScript interfaces and development-only functionality\n- **State Management**: Local component state using React useState hooks with banking account data\n- **Form Handling**: Controlled components with comprehensive banking form validation and real-time calculations\n- **Account System**: Automatic bank account number generation (XXXX-XXXXXX format) with TL currency\n- **Credit System**: Advanced loan calculator with Turkish banking formulas (KKDF + BSMV taxes)\n\n## User Interface Design\n- **Language**: Turkish interface for all user-facing text\n- **Styling Architecture**: Modular CSS organization across 4 specialized files:\n  - `layout.css`: Global styles, CSS variables, grid and flexbox utilities\n  - `forms.css`: Form styling with gray input backgrounds (#808080) and validation feedback\n  - `components.css`: Button components, navigation styling with theme variants, and reusable UI elements\n  - `pages.css`: Page-specific styles for each component and feature\n- **Layout**: Centered content with maximum width constraints for readability\n- **Navigation**: Horizontal navigation bar with active state indication and theme switching\n- **Forms**: Gray-background input fields with proper labeling and validation feedback\n- **AI Decision Panel**: Styled amount display with gray backgrounds for better visibility\n- **Responsive Design**: Grid-based layouts that adapt to different screen sizes\n- **Performance**: Eliminated all inline styles across the entire codebase for faster rendering, reduced runtime calculations, and easier maintenance\n\n# External Dependencies\n\n## Frontend Dependencies\n- **React**: v18.2.0 - Main UI library\n- **React DOM**: v18.2.0 - DOM rendering for React\n- **React Router DOM**: v7.8.2 - Client-side routing solution\n- **Firebase**: Authentication and data storage\n- **TypeScript**: v4.7.4 - Type checking and compilation\n\n## Backend Dependencies (Python)\n- **FastAPI**: Modern, fast web framework for building APIs\n- **Pandas**: Data manipulation and analysis library for risk calculations\n- **NumPy**: Numerical computing library for mathematical operations\n- **Scikit-learn**: Machine learning library for credit risk modeling\n- **Uvicorn**: ASGI server for FastAPI applications\n\n## Development Dependencies\n- **Vite**: v3.0.4 - Build tool and development server with proxy configuration\n- **@vitejs/plugin-react**: v2.0.0 - Vite plugin for React support\n- **@types/react**: v18.0.15 - TypeScript definitions for React\n- **@types/react-dom**: v18.0.6 - TypeScript definitions for React DOM\n- **@types/react-router-dom**: v5.3.3 - TypeScript definitions for React Router\n\n## Runtime Environment\n- **Target Platform**: Modern browsers with ES6+ support\n- **Hosting**: Configured for Replit deployment with appropriate server settings\n- **Multi-service Architecture**: React frontend (port 5000) + Python API (port 8000)\n- **Build Output**: Static files suitable for deployment to any web server\n- **Deployment**: Autoscale deployment configured with `npm run build` and `npm run preview`\n- **Documentation**: Comprehensive Turkish README.md available for project setup and usage\n\n## Code Quality & Architecture\n- **CSS Modularization**: Evolved from monolithic CSS to 4 specialized files (layout.css, forms.css, components.css, pages.css) for improved organization and maintainability\n- **Inline Style Elimination**: Removed all inline styles across the entire codebase, converting to CSS classes for better performance and runtime optimization\n- **Component Structure**: Unified component and hook organization under single directories with extracted reusable calculators\n- **Mock Data Management**: Centralized test data with TypeScript interfaces and development-only functionality \n- **Real User Input Forms**: Converted hardcoded data to comprehensive user input forms with 20+ fields for production-ready credit applications\n- **Import Optimization**: Cleaned unused imports, implemented type-only imports, and optimized bundle size across 12 files\n- **Performance Optimization**: Eliminated runtime style calculations through CSS classes and reduced component complexity\n- **Maintainability**: Clean separation of concerns with feature-based organization and single responsibility principle\n- **Type Safety**: Full TypeScript integration with strict type checking and proper type-only imports","size_bytes":9046},"vite.config.ts":{"content":"import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n    port: 5000,\n    host: '0.0.0.0',\n    strictPort: true,\n    proxy: {\n      '/api': {\n        target: 'http://127.0.0.1:8000',\n        changeOrigin: true,\n        secure: false,\n        rewrite: (path) => path.replace(/^\\/api/, ''),\n        configure: (proxy, options) => {\n          proxy.on('error', (err, req, res) => {\n          });\n          proxy.on('proxyReq', (proxyReq, req, res) => {\n          });\n          proxy.on('proxyRes', (proxyRes, req, res) => {\n          });\n        }\n      }\n    }\n  },\n  build: {\n    // Target modern browsers for smaller bundles\n    target: 'es2020',\n    \n    // Code splitting optimization\n    rollupOptions: {\n      output: {\n        manualChunks: {\n          // Vendor chunk for stable dependencies\n          vendor: ['react', 'react-dom', 'react-router-dom'],\n          \n          // Firebase chunk\n          firebase: ['firebase/app', 'firebase/auth', 'firebase/firestore']\n        },\n        \n        // Optimize chunk names\n        chunkFileNames: 'js/[name]-[hash].js',\n        assetFileNames: (assetInfo) => {\n          const info = assetInfo.name?.split('.') || []\n          const extType = info[info.length - 1]\n          if (/png|jpe?g|svg|gif|tiff|bmp|ico/i.test(extType)) {\n            return 'images/[name]-[hash][extname]'\n          }\n          if (/css/i.test(extType)) {\n            return 'css/[name]-[hash][extname]'\n          }\n          return 'assets/[name]-[hash][extname]'\n        }\n      }\n    },\n    \n    // Enable minification\n    minify: 'terser',\n    terserOptions: {\n      compress: {\n        drop_console: true, // Remove console.log in production\n        drop_debugger: true\n      }\n    },\n    \n    // Source maps for debugging\n    sourcemap: false,\n    \n    // Chunk size warnings\n    chunkSizeWarningLimit: 500,\n    \n    // Enable CSS code splitting\n    cssCodeSplit: true\n  },\n  \n  // Dependency optimization\n  optimizeDeps: {\n    include: [\n      'react',\n      'react-dom',\n      'react-router-dom',\n      'firebase/app',\n      'firebase/auth', \n      'firebase/firestore'\n    ]\n  }\n})","size_bytes":2237},"src/components/Navigation.tsx":{"content":"import React, { useState } from 'react'\nimport { Link, useLocation, useNavigate } from 'react-router-dom'\nimport { useTheme } from '../context/ThemeContext'\nimport { useAuth } from '../context/AuthContext'\n\nexport default function Navigation() {\n  const location = useLocation()\n  const navigate = useNavigate()\n  const { theme, toggleTheme } = useTheme()\n  const { currentUser, logout } = useAuth()\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false)\n\n  const handleLogout = async () => {\n    try {\n      await logout()\n      navigate('/')\n    } catch (error) {\n      console.error('Çıkış hatası:', error)\n    }\n  }\n\n\n  const isActive = (path: string) => location.pathname === path\n\n  return (\n    <nav className={`nav-${theme} navigation`}>\n      <div className=\"navigation-container\">\n        <div className=\"navigation-desktop\">\n          <div className=\"navigation-left\">\n            <h2 className=\"navigation-brand\">🏦 Finiş Bankası</h2>\n            <Link \n              to=\"/\" \n              className={`navigation-link ${isActive('/') ? 'active' : ''}`}\n            >\n              Ana Sayfa\n            </Link>\n          </div>\n          <div className=\"navigation-right\">\n            {currentUser ? (\n              <>\n                <span className=\"navigation-user-welcome\">\n                  Hoşgeldiniz, {currentUser.displayName || currentUser.email}\n                </span>\n                <Link \n                  to=\"/account\" \n                  className={`navigation-link ${isActive('/account') ? 'active' : ''}`}\n                >\n                  Hesabım\n                </Link>\n                <Link \n                  to=\"/credit-application\" \n                  className={`navigation-link ${isActive('/credit-application') ? 'active' : ''}`}\n                >\n                  Kredi Başvurusu\n                </Link>\n                <button \n                  onClick={handleLogout}\n                  className=\"navigation-logout-button\"\n                >\n                  Çıkış Yap\n                </button>\n              </>\n            ) : (\n              <>\n                <Link \n                  to=\"/login\" \n                  className={`navigation-link ${isActive('/login') ? 'active' : ''}`}\n                >\n                  Giriş Yap\n                </Link>\n                <Link \n                  to=\"/register\" \n                  className={`navigation-link ${isActive('/register') ? 'active' : ''}`}\n                >\n                  Kayıt Ol\n                </Link>\n              </>\n            )}\n            <div \n              onClick={toggleTheme}\n              className={`navigation-theme-switch ${theme}`}\n              title={theme === 'light' ? 'Karanlık moda geç' : 'Aydınlık moda geç'}\n            >\n              <span className=\"navigation-theme-icon\">{theme === 'light' ? '☀️' : '🌙'}</span>\n              <div className={`navigation-theme-toggle ${theme}`}>\n                <div className={`navigation-theme-toggle-ball ${theme}`} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"navigation-mobile\">\n          <h2 className=\"navigation-mobile-brand\">🏦 Finiş Bankası</h2>\n          <button \n            className=\"navigation-mobile-toggle\"\n            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n          >\n            <span></span>\n            <span></span>\n            <span></span>\n          </button>\n        </div>\n\n        <div className={`navigation-mobile-menu ${mobileMenuOpen ? 'open' : ''} ${theme}`}>\n          <Link \n            to=\"/\" \n            className=\"navigation-mobile-link\"\n            onClick={() => setMobileMenuOpen(false)}\n          >\n            Ana Sayfa\n          </Link>\n          {currentUser ? (\n            <>\n              <Link \n                to=\"/account\" \n                className=\"navigation-mobile-link\"\n                onClick={() => setMobileMenuOpen(false)}\n              >\n                Hesabım\n              </Link>\n              <Link \n                to=\"/credit-application\" \n                className=\"navigation-mobile-link\"\n                onClick={() => setMobileMenuOpen(false)}\n              >\n                Kredi Başvurusu\n              </Link>\n              <button \n                onClick={() => {\n                  handleLogout()\n                  setMobileMenuOpen(false)\n                }}\n                className=\"navigation-mobile-logout-button\"\n              >\n                Çıkış Yap\n              </button>\n            </>\n          ) : (\n            <>\n              <Link \n                to=\"/login\" \n                className=\"navigation-mobile-link\"\n                onClick={() => setMobileMenuOpen(false)}\n              >\n                Giriş Yap\n              </Link>\n              <Link \n                to=\"/register\" \n                className=\"navigation-mobile-link\"\n                onClick={() => setMobileMenuOpen(false)}\n              >\n                Kayıt Ol\n              </Link>\n            </>\n          )}\n        </div>\n      </div>\n    </nav>\n  )\n}","size_bytes":5124},"src/config/firebase.ts":{"content":"import { initializeApp, getApps } from 'firebase/app'\nimport { getAuth } from 'firebase/auth'\nimport { getFirestore } from 'firebase/firestore'\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBjef8xlGrD7dyHtIJ6aytPztQ3S91pe9o\",\n  authDomain: \"finisbank.firebaseapp.com\",\n  projectId: \"finisbank\", \n  storageBucket: \"finisbank.firebasestorage.app\",\n  messagingSenderId: \"669819713979\",\n  appId: \"1:669819713979:web:019e8f3d22442818e2ec9e\"\n}\n\n// Prevent duplicate app initialization\nconst fireApp = getApps().length === 0 ? initializeApp(firebaseConfig) : getApps()[0]\nexport const auth = getAuth(fireApp)\nexport const db = getFirestore(fireApp)","size_bytes":638},"src/context/AuthContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react'\nimport { \n  User, \n  createUserWithEmailAndPassword, \n  signInWithEmailAndPassword, \n  signOut, \n  onAuthStateChanged,\n  updateProfile \n} from 'firebase/auth'\nimport { doc, setDoc, getDoc, updateDoc, serverTimestamp } from 'firebase/firestore'\nimport { auth, db } from '../config/firebase'\n\ninterface AuthContextType {\n  currentUser: User | null\n  login: (email: string, password: string) => Promise<void>\n  register: (name: string, email: string, password: string, userData?: any) => Promise<void>\n  logout: () => Promise<void>\n  loading: boolean\n  getUserData: () => Promise<any>\n  updateUserBalance: (amount: number) => Promise<void>\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider')\n  }\n  return context\n}\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null)\n  const [loading, setLoading] = useState(true)\n\n  const register = async (name: string, email: string, password: string, userData?: any) => {\n    try {\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password)\n      await updateProfile(userCredential.user, { displayName: name })\n      \n      if (userData) {\n        await setDoc(doc(db, 'users', userCredential.user.uid), {\n          name,\n          email,\n          ...userData,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        })\n      }\n    } catch (error) {\n      throw error\n    }\n  }\n\n  const getUserData = async () => {\n    if (!currentUser) return null\n    \n    try {\n      const docRef = doc(db, 'users', currentUser.uid)\n      const docSnap = await getDoc(docRef)\n      \n      if (docSnap.exists()) {\n        return docSnap.data()\n      } else {\n        return null\n      }\n    } catch (error) {\n      return null\n    }\n  }\n\n  const login = async (email: string, password: string) => {\n    try {\n      await signInWithEmailAndPassword(auth, email, password)\n    } catch (error) {\n      throw error\n    }\n  }\n\n  const updateUserBalance = async (amount: number) => {\n    if (!currentUser) throw new Error('Kullanıcı girişi gerekli')\n    \n    try {\n      const userRef = doc(db, 'users', currentUser.uid)\n      const userDoc = await getDoc(userRef)\n      \n      let currentBalance = 0\n      if (userDoc.exists()) {\n        const userData = userDoc.data()\n        currentBalance = userData.account?.balance || 0\n      }\n      \n      const newBalance = currentBalance + amount\n      \n      await updateDoc(userRef, {\n        'account.balance': newBalance,\n        updatedAt: new Date()\n      })\n    } catch (error) {\n      throw error\n    }\n  }\n\n  const logout = async () => {\n    await signOut(auth)\n  }\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\n      setCurrentUser(user)\n      setLoading(false)\n    })\n\n    return unsubscribe\n  }, [])\n\n  const value = {\n    currentUser,\n    login,\n    register,\n    logout,\n    loading,\n    getUserData,\n    updateUserBalance\n  }\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  )\n}","size_bytes":3368},"src/context/ThemeContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react'\n\ntype Theme = 'light' | 'dark'\n\ninterface ThemeContextType {\n  theme: Theme\n  toggleTheme: () => void\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined)\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext)\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider')\n  }\n  return context\n}\n\nexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [theme, setTheme] = useState<Theme>('dark')\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme') as Theme\n    if (savedTheme) {\n      setTheme(savedTheme)\n    }\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem('theme', theme)\n    document.body.className = theme\n  }, [theme])\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === 'light' ? 'dark' : 'light')\n  }\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  )\n}","size_bytes":1061},"src/pages/Account.tsx":{"content":"import React, { useState, useEffect } from 'react'\nimport { useTheme } from '../context/ThemeContext'\nimport { useAuth } from '../context/AuthContext'\n\nexport default function Account() {\n  const [account, setAccount] = useState({\n    accountNumber: '',\n    currency: 'TL',\n    balance: 0,\n    accountType: '',\n    status: '',\n    openDate: null\n  })\n  const [loading, setLoading] = useState(true)\n  const [userName, setUserName] = useState('')\n  const { theme } = useTheme()\n  const { currentUser, getUserData } = useAuth()\n\n  useEffect(() => {\n    const loadUserData = async () => {\n      if (currentUser) {\n        try {\n          const userData = await getUserData()\n          if (userData && userData.account) {\n            setAccount(userData.account)\n            setUserName(userData.name || currentUser.displayName || '')\n          } else {\n            setUserName(currentUser.displayName || '')\n          }\n        } catch (error) {\n          console.error('Kullanıcı verileri alınırken hata:', error)\n        }\n      }\n      setLoading(false)\n    }\n\n    loadUserData()\n  }, [currentUser, getUserData])\n\n  if (loading) {\n    return (\n      <div className={`app-${theme} account-loading-container`}>\n        <div>Yükleniyor...</div>\n      </div>\n    )\n  }\n\n  if (!currentUser) {\n    return (\n      <div className={`app-${theme} account-loading-container`}>\n        <div>Giriş yapmanız gerekiyor</div>\n      </div>\n    )\n  }\n\n  return (\n    <div className={`app-${theme} account-page-container`}>\n      <div className=\"account-main-wrapper\">\n        \n        <div className=\"account-header\">\n          <h2 className=\"account-welcome-title\">\n            Hoş Geldiniz, {userName}!\n          </h2>\n          <p className=\"account-welcome-subtitle\">\n            Banka hesap bilgilerinizi buradan görüntüleyebilirsiniz.\n          </p>\n        </div>\n\n        <div className={`card-${theme} account-info-card`}>\n          <h3 className=\"account-info-title\">\n            🏦 Banka Hesap Bilgileri\n          </h3>\n          \n          <div className=\"account-details-grid\">\n            <div className=\"account-number-box\">\n              <div className=\"account-field-label\">\n                Hesap Numarası\n              </div>\n              <div className=\"account-number-value\">\n                {account.accountNumber || 'Henüz atanmamış'}\n              </div>\n            </div>\n            <div className=\"account-balance-box\">\n              <div className=\"account-field-label\">\n                Mevcut Bakiye\n              </div>\n              <div className=\"account-balance-value\">\n                {account.balance?.toLocaleString('tr-TR') || '0'} {account.currency || 'TL'}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"account-details-secondary-grid\">\n            <div className=\"account-type-box\">\n              <div className=\"account-field-label-small\">\n                Hesap Türü\n              </div>\n              <div className=\"account-info-value\">\n                {account.accountType || 'Vadesiz Hesap'}\n              </div>\n            </div>\n            <div className=\"account-status-box\">\n              <div className=\"account-field-label-small\">\n                Hesap Durumu\n              </div>\n              <div className=\"account-status-value\">\n                {account.status || 'Aktif'}\n              </div>\n            </div>\n          </div>\n          \n          {account.openDate && (\n            <div className=\"account-date-info\">\n              Hesap Açılış Tarihi: {new Date((account.openDate as any)?.seconds ? (account.openDate as any).seconds * 1000 : account.openDate).toLocaleDateString('tr-TR')}\n            </div>\n          )}\n        </div>\n\n        <div className={`card-${theme} account-services-card`}>\n          <h4 className=\"account-services-title\">\n            Bankacılık İşlemlerii\n          </h4>\n          <p className=\"account-services-description\">\n            Yakında: Para transferi, fatura ödeme ve diğer bankacılık hizmetleri burada olacak.\n          </p>\n          <div className=\"account-development-notice\">\n            🚧 Geliştirme aşamasında...\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":4253},"src/pages/CreditApplication.tsx":{"content":"import React, { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { useTheme } from '../context/ThemeContext'\nimport { useAuth } from '../context/AuthContext'\nimport { collection, addDoc, doc, setDoc } from 'firebase/firestore'\nimport { db } from '../config/firebase'\nimport { CreditService } from '../services/creditService'\nimport { UserService } from '../services/userService'\n\nexport default function CreditApplication() {\n  const [amount, setAmount] = useState('')\n  const [term, setTerm] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState('')\n  const [decisionResult, setDecisionResult] = useState<any>(null)\n  const [isAnalyzing, setIsAnalyzing] = useState(false)\n  const [isWithdrawing, setIsWithdrawing] = useState(false)\n  \n  const { theme } = useTheme()\n  const { currentUser, updateUserBalance } = useAuth()\n  const navigate = useNavigate()\n\n  const { monthlyPayment, totalPayment, totalInterest } = CreditService.calculatePayments(amount, term)\n\n\n  const analyzeWithDecisionEngine = async () => {\n    const validation = CreditService.validateCreditApplication(amount, term)\n    if (!validation.isValid) {\n      setError(validation.error!)\n      return\n    }\n    \n    if (!currentUser) {\n      setError('Kullanıcı girişi gerekli')\n      return\n    }\n\n    setIsAnalyzing(true)\n    try {\n      const loanAmount = parseFloat(amount)\n      const loanTerm = parseInt(term)\n      \n      \n      const applicationData = {\n        loan_amount: parseFloat(amount),\n        loan_term_months: parseInt(term),\n        \n        monthly_income: 22000,\n        additional_income: 3000,\n        expenses: 12000,\n        rent_payment: 2500,\n        age: 34,\n        employment_type: 'Özel Sektör',\n        work_experience: 6,\n        debt_to_income_ratio: 0.20,\n        existing_loans: 25000,\n        credit_card_limit: 30000,\n        credit_card_debt: 4000,\n        bank_balance: 35000,\n        investments: 75000,\n        real_estate_value: 450000,\n        kkb_score: 720,\n        payment_delays: 0,\n        home_ownership: 'owner',\n        residence_duration: 48,\n        customer_segment: 'mass',\n        existing_relationship: 24,\n        total_banking_products: 3,\n        \n        defaulted_loans: false,\n        legal_issues: false,\n        has_insurance: true,\n        job_stability: 'stable'\n      }\n\n      \n      try {\n        const userProfileData = {\n          ...applicationData,\n          userId: currentUser.uid,\n          userEmail: currentUser.email,\n          timestamp: new Date(),\n          evaluation_type: 'user_credit_profile',\n          system_version: 'v2.0_comprehensive_data'\n        }\n        \n        const docRef = await addDoc(collection(db, 'user_profiles'), userProfileData)\n      } catch (firebaseError) {\n        console.warn('Firestore\\'a veri kaydedilirken hata:', firebaseError)\n      }\n      \n\n      const response = await fetch(`https://us-central1-finisbank.cloudfunctions.net/evaluate_credit`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(applicationData)\n      })\n      if (response.ok) {\n        const result = await response.json()\n        \n        const processedResult = {\n          ...result,\n          approved: result.decision === \"ONAYLANDI\"\n        }\n        \n        setDecisionResult(processedResult)\n      } else {\n        try {\n          const errorText = await response.text()\n          console.error('API yanıt hatası:', errorText)\n          setError('Kredi değerlendirme servisi geçici olarak kullanılamıyor.')\n        } catch (textError) {\n          console.error('API hata mesajı okunamadı:', textError)\n          setError('Kredi değerlendirme sırasında beklenmedik hata oluştu.')\n        }\n      }\n    } catch (error) {\n      console.error('Kredi analiz hatası:', error)\n      setError('Kredi analizi sırasında hata oluştu. Lütfen tekrar deneyiniz.')\n    } finally {\n      setIsAnalyzing(false)\n    }\n  }\n\n  const withdrawCreditToAccount = async () => {\n    if (!decisionResult || !decisionResult.approved || !currentUser) return\n    \n    setIsWithdrawing(true)\n    try {\n      const creditAmount = decisionResult.recommended_amount || parseFloat(amount)\n      \n      await updateUserBalance(creditAmount)\n      \n      const creditRecord = {\n        userId: currentUser.uid,\n        userEmail: currentUser.email,\n        amount: creditAmount,\n        term: parseInt(term),\n        monthlyPayment: monthlyPayment,\n        totalPayment: totalPayment,\n        withdrawnAt: new Date(),\n        status: 'Aktif',\n        creditType: 'AI Onaylı Kredi'\n      }\n      \n      await addDoc(collection(db, 'activeCredits'), creditRecord)\n      \n      alert(`Kredi tutarı (${creditAmount.toLocaleString('tr-TR')} TL) hesabınıza başarıyla eklendi!`)\n      navigate('/account')\n      \n    } catch (error: any) {\n      alert('Kredi hesabınıza eklenirken hata oluştu: ' + (error?.message || 'Bilinmeyen hata'))\n    } finally {\n      setIsWithdrawing(false)\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    if (!currentUser) {\n      setError('Kredi başvurusu için giriş yapmalısınız.')\n      return\n    }\n\n    if (!amount || !term) {\n      setError('Lütfen tutar ve vade alanlarını doldurun.')\n      return\n    }\n\n    if (parseFloat(amount) < 1000) {\n      setError('Minimum kredi tutarı 1.000 TL olmalıdır.')\n      return\n    }\n\n    if (parseInt(term) < 3 || parseInt(term) > 240) {\n      setError('Kredi vadesi 3-240 ay arasında olmalıdır.')\n      return\n    }\n\n    try {\n      setError('')\n      setLoading(true)\n\n      const applicationData = {\n        userId: currentUser.uid,\n        userEmail: currentUser.email,\n        amount: parseFloat(amount),\n        term: parseInt(term),\n        monthlyPayment: monthlyPayment,\n        totalPayment: totalPayment,\n        totalInterest: totalInterest,\n        baseInterestRate: 4.09,\n        kkdfRate: 15,\n        bsmvRate: 15,\n        status: 'Değerlendiriliyor',\n        applicationDate: new Date(),\n        createdAt: new Date()\n      }\n\n      await addDoc(collection(db, 'creditApplications'), applicationData)\n      \n      alert('Kredi başvurunuz başarıyla gönderildi! 48 saat içinde size dönüş yapılacaktır.')\n      navigate('/account')\n\n    } catch (error: any) {\n      setError('Başvuru gönderilirken hata oluştu: ' + (error?.message || error?.code || 'Bilinmeyen hata'))\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (!currentUser) {\n    return (\n      <div className={`app-${theme}`} style={{ minHeight: '100vh', padding: '20px' }}>\n        <div style={{ \n          maxWidth: '600px', \n          margin: '0 auto',\n          textAlign: 'center',\n          paddingTop: '100px'\n        }}>\n          <h2 style={{ color: '#dc3545' }}>Giriş Gerekli</h2>\n          <p>Kredi başvurusu yapmak için giriş yapmalısınız.</p>\n          <button \n            onClick={() => navigate('/login')}\n            style={{\n              padding: '10px 20px',\n              backgroundColor: '#007bff',\n              color: 'white',\n              border: 'none',\n              borderRadius: '5px',\n              cursor: 'pointer'\n            }}\n          >\n            Giriş Yap\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className={`app-${theme}`} style={{ minHeight: '100vh', padding: '20px' }}>\n      <div className=\"container\" style={{ maxWidth: '800px', margin: '0 auto' }}>\n        \n        <div style={{ textAlign: 'center', marginBottom: '30px' }}>\n          <h2 style={{ color: '#007bff', marginBottom: '10px' }}>\n            Kredi Hesaplama ve Başvuru\n          </h2>\n          <p style={{ opacity: 0.8, fontSize: '16px' }}>\n            Kredi tutarı ve vadenizi girin, aylık taksitinizi görün ve başvuru yapın.\n          </p>\n        </div>\n\n        <form onSubmit={handleSubmit}>\n          <div className={`card-${theme}`} style={{ padding: '30px', borderRadius: '12px', marginBottom: '20px' }}>\n            \n            {error && (\n              <div style={{ \n                padding: '12px', \n                backgroundColor: '#f8d7da', \n                color: '#721c24',\n                borderRadius: '4px', \n                marginBottom: '20px',\n                border: '1px solid #f5c6cb'\n              }}>\n                {error}\n              </div>\n            )}\n\n            <h4 style={{ marginBottom: '20px', color: '#007bff' }}>🏦 Kredi Bilgileri</h4>\n            \n            <div className=\"form-grid-2\" style={{ marginBottom: '30px' }}>\n              <div>\n                <label style={{ display: 'block', marginBottom: '8px', fontWeight: 'bold', fontSize: '16px' }}>\n                  Kredi Tutarı (TL) *\n                </label>\n                <input\n                  type=\"number\"\n                  value={amount}\n                  onChange={(e) => setAmount(e.target.value)}\n                  min=\"1000\"\n                  max=\"5000000\"\n                  step=\"1000\"\n                  placeholder=\"örnek: 100000\"\n                  style={{\n                    width: '100%',\n                    padding: '15px',\n                    borderRadius: '8px',\n                    border: `2px solid ${theme === 'dark' ? '#666' : '#ddd'}`,\n                    backgroundColor: theme === 'dark' ? '#2d3748' : '#fff',\n                    color: theme === 'dark' ? '#fff' : '#000',\n                    fontSize: '16px'\n                  }}\n                  required\n                />\n              </div>\n\n              <div>\n                <label style={{ display: 'block', marginBottom: '8px', fontWeight: 'bold', fontSize: '16px' }}>\n                  Vade (Ay) *\n                </label>\n                <input\n                  type=\"number\"\n                  value={term}\n                  onChange={(e) => setTerm(e.target.value)}\n                  min=\"3\"\n                  max=\"240\"\n                  placeholder=\"örnek: 36\"\n                  style={{\n                    width: '100%',\n                    padding: '15px',\n                    borderRadius: '8px',\n                    border: `2px solid ${theme === 'dark' ? '#666' : '#ddd'}`,\n                    backgroundColor: theme === 'dark' ? '#2d3748' : '#fff',\n                    color: theme === 'dark' ? '#fff' : '#000',\n                    fontSize: '16px'\n                  }}\n                  required\n                />\n              </div>\n            </div>\n\n            {amount && term && (\n              <div style={{\n                border: '2px solid #28a745',\n                borderRadius: '12px',\n                padding: '25px',\n                marginBottom: '30px',\n                backgroundColor: 'rgba(40, 167, 69, 0.05)'\n              }}>\n                <div style={{ \n                  display: 'flex', \n                  justifyContent: 'space-between', \n                  alignItems: 'center',\n                  marginBottom: '20px'\n                }}>\n                  <h4 style={{ margin: 0, color: '#28a745' }}>\n                    Kredi Hesaplama Sonucu\n                  </h4>\n                  <button\n                    type=\"button\"\n                    onClick={analyzeWithDecisionEngine}\n                    disabled={isAnalyzing}\n                    style={{\n                      padding: '8px 16px',\n                      fontSize: '14px',\n                      backgroundColor: isAnalyzing ? '#6c757d' : '#007bff',\n                      color: 'white',\n                      border: 'none',\n                      borderRadius: '6px',\n                      cursor: isAnalyzing ? 'not-allowed' : 'pointer'\n                    }}\n                  >\n                    {isAnalyzing ? '🔄 Analiz ediliyor...' : '🤖 AI Analiz Et'}\n                  </button>\n                </div>\n                \n                \n                <div style={{ \n                  display: 'grid', \n                  gridTemplateColumns: '1fr 1fr 1fr', \n                  gap: '20px',\n                  textAlign: 'center'\n                }}>\n                  <div style={{ \n                    padding: '20px', \n                    backgroundColor: 'rgba(0, 123, 255, 0.1)', \n                    borderRadius: '8px' \n                  }}>\n                    <div style={{ fontSize: '14px', opacity: 0.8, marginBottom: '8px' }}>\n                      Aylık Taksit\n                    </div>\n                    <div style={{ \n                      fontSize: '24px', \n                      fontWeight: 'bold', \n                      color: '#007bff' \n                    }}>\n                      {monthlyPayment.toLocaleString('tr-TR')} TL\n                    </div>\n                  </div>\n                  \n                  <div style={{ \n                    padding: '20px', \n                    backgroundColor: 'rgba(255, 193, 7, 0.1)', \n                    borderRadius: '8px' \n                  }}>\n                    <div style={{ fontSize: '14px', opacity: 0.8, marginBottom: '8px' }}>\n                      Toplam Geri Ödeme\n                    </div>\n                    <div style={{ \n                      fontSize: '20px', \n                      fontWeight: 'bold', \n                      color: '#ffc107' \n                    }}>\n                      {totalPayment.toLocaleString('tr-TR')} TL\n                    </div>\n                  </div>\n                  \n                  <div style={{ \n                    padding: '20px', \n                    backgroundColor: 'rgba(220, 53, 69, 0.1)', \n                    borderRadius: '8px' \n                  }}>\n                    <div style={{ fontSize: '14px', opacity: 0.8, marginBottom: '8px' }}>\n                      Toplam Faiz\n                    </div>\n                    <div style={{ \n                      fontSize: '20px', \n                      fontWeight: 'bold', \n                      color: '#dc3545' \n                    }}>\n                      {totalInterest.toLocaleString('tr-TR')} TL\n                    </div>\n                  </div>\n                </div>\n\n                <div style={{ \n                  textAlign: 'center', \n                  marginTop: '15px', \n                  fontSize: '14px', \n                  opacity: 0.7 \n                }}>\n                  Temel Faiz: %4.09 | KKDF: %15 | BSMV: %15 | Toplam Vergi Dahil\n                </div>\n              </div>\n            )}\n\n            {decisionResult && (\n              <div style={{\n                border: `2px solid ${decisionResult.approved ? '#28a745' : '#dc3545'}`,\n                borderRadius: '12px',\n                padding: '25px',\n                marginBottom: '30px',\n                backgroundColor: decisionResult.approved ? 'rgba(40, 167, 69, 0.05)' : 'rgba(220, 53, 69, 0.05)'\n              }}>\n                <h4 style={{ \n                  marginTop: 0, \n                  marginBottom: '20px', \n                  color: decisionResult.approved ? '#28a745' : '#dc3545',\n                  textAlign: 'center'\n                }}>\n                  🤖 AI Karar Motoru Analizi\n                </h4>\n                \n                <div style={{ \n                  display: 'grid', \n                  gridTemplateColumns: '1fr 1fr', \n                  gap: '20px',\n                  marginBottom: '20px'\n                }}>\n                  <div style={{ \n                    padding: '15px', \n                    backgroundColor: 'rgba(0, 123, 255, 0.1)', \n                    borderRadius: '8px',\n                    textAlign: 'center'\n                  }}>\n                    <div style={{ fontSize: '14px', opacity: 0.8, marginBottom: '8px' }}>\n                      Karar Durumu\n                    </div>\n                    <div style={{ \n                      fontSize: '20px', \n                      fontWeight: 'bold',\n                      color: decisionResult?.approved ? '#28a745' : '#dc3545'\n                    }}>\n                      {decisionResult?.approved ? 'ONAYLANDI' : 'REDDEDİLDİ'}\n                    </div>\n                  </div>\n                  \n                  <div style={{ \n                    padding: '15px', \n                    backgroundColor: 'rgba(255, 193, 7, 0.1)', \n                    borderRadius: '8px',\n                    textAlign: 'center'\n                  }}>\n                    <div style={{ fontSize: '14px', opacity: 0.8, marginBottom: '8px' }}>\n                      Risk Skoru\n                    </div>\n                    <div style={{ \n                      fontSize: '20px', \n                      fontWeight: 'bold', \n                      color: '#ffc107' \n                    }}>\n                      {decisionResult?.credit_score ? decisionResult.credit_score.toFixed(1) : '0.0'}/100\n                    </div>\n                  </div>\n                </div>\n\n                <div style={{ \n                  padding: '15px', \n                  backgroundColor: 'rgba(108, 117, 125, 0.1)', \n                  borderRadius: '8px',\n                  marginBottom: '15px'\n                }}>\n                  <strong>📝 Karar Gerekçesi:</strong>\n                  <p style={{ margin: '10px 0 0 0' }}>{decisionResult?.decision_reason || 'Değerlendirme yapılıyor...'}</p>\n                </div>\n\n                {(decisionResult?.recommended_amount && decisionResult.recommended_amount !== parseFloat(amount || '0')) && (\n                  <div style={{ \n                    padding: '15px', \n                    backgroundColor: 'rgba(255, 193, 7, 0.1)', \n                    borderRadius: '8px',\n                    marginBottom: '15px'\n                  }}>\n                    <strong>Önerilen Tutar:</strong>\n                    <p style={{ margin: '10px 0 0 0' }}>\n                      {(decisionResult?.recommended_amount || 0).toLocaleString('tr-TR')} TL\n                    </p>\n                  </div>\n                )}\n\n                {decisionResult.conditions && decisionResult.conditions.length > 0 && (\n                  <div style={{ \n                    padding: '15px', \n                    backgroundColor: 'rgba(0, 123, 255, 0.1)', \n                    borderRadius: '8px'\n                  }}>\n                    <strong>Koşullar ve Öneriler:</strong>\n                    <ul style={{ margin: '10px 0 0 0' }}>\n                      {decisionResult.conditions.map((condition: string, index: number) => (\n                        <li key={index}>{condition}</li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n                \n                {decisionResult.approved && (\n                  <div style={{ \n                    textAlign: 'center', \n                    marginTop: '20px',\n                    padding: '20px',\n                    backgroundColor: 'rgba(40, 167, 69, 0.1)',\n                    borderRadius: '8px',\n                    border: '2px solid #28a745'\n                  }}>\n                    <h4 style={{ color: '#28a745', marginBottom: '15px' }}>\n                      Kredi Onaylandı!\n                    </h4>\n                    <p style={{ marginBottom: '20px', fontSize: '14px' }}>\n                      Onaylanan kredi tutarını hesabınıza çekmek için aşağıdaki butona tıklayın.\n                    </p>\n                    <button\n                      onClick={withdrawCreditToAccount}\n                      disabled={isWithdrawing}\n                      style={{\n                        padding: '15px 30px',\n                        fontSize: '16px',\n                        fontWeight: 'bold',\n                        backgroundColor: isWithdrawing ? '#6c757d' : '#28a745',\n                        color: 'white',\n                        border: 'none',\n                        borderRadius: '8px',\n                        cursor: isWithdrawing ? 'not-allowed' : 'pointer',\n                        transition: 'background-color 0.3s'\n                      }}\n                    >\n                      {isWithdrawing ? 'Hesabınıza Ekleniyor...' : `Krediyi Hesabıma Çek (${(decisionResult?.recommended_amount || parseFloat(amount || '0') || 0).toLocaleString('tr-TR')} TL)`}\n                    </button>\n                  </div>\n                )}\n              </div>\n            )}\n\n            <div style={{ textAlign: 'center' }}>\n              <button\n                type=\"submit\"\n                disabled={loading}\n                style={{\n                  padding: '15px 40px',\n                  fontSize: '16px',\n                  fontWeight: 'bold',\n                  backgroundColor: loading ? '#6c757d' : '#28a745',\n                  color: 'white',\n                  border: 'none',\n                  borderRadius: '8px',\n                  cursor: loading ? 'not-allowed' : 'pointer',\n                  transition: 'background-color 0.3s'\n                }}\n              >\n                {loading ? 'Gönderiliyor...' : 'Kredi Başvurusu Gönder'}\n              </button>\n            </div>\n\n            <div style={{\n              marginTop: '20px',\n              padding: '15px',\n              backgroundColor: 'rgba(0, 123, 255, 0.1)',\n              borderRadius: '8px',\n              fontSize: '14px',\n              opacity: 0.8\n            }}>\n              <strong>Başvuru Süreci:</strong>\n              <ul style={{ marginTop: '10px', marginBottom: 0 }}>\n                <li>Başvurunuz 48 saat içinde değerlendirilecektir</li>\n                <li>Onay durumunda size telefon ile ulaşılacaktır</li>\n                <li>Gerekli belgelerinizi hazır tutunuz</li>\n                <li>Kredi faiz oranları güncel piyasa koşullarına göre belirlenecektir</li>\n              </ul>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}","size_bytes":21921},"src/pages/Home.tsx":{"content":"import { useTheme } from '../context/ThemeContext'\nimport CreditCalculator from '../components/CreditCalculator'\nimport DepositCalculator from '../components/DepositCalculator'\n\nexport default function Home() {\n  const { theme } = useTheme()\n  return (\n    <div className={`app-${theme} home-container`}>\n      <div className=\"container home-content\">\n        <div className=\"home-content-wrapper\">\n        <h2>Dijital Bankacılığa Hoşgeldiniz!</h2>\n        <p className=\"welcome-text\">\n          Güvenli ve hızlı bankacılık hizmetlerinden yararlanın. \n          Hesabınızı yönetin, para transferi yapın ve tüm bankacılık işlemlerinizi kolayca gerçekleştirin.\n        </p>\n        \n        <div className=\"responsive-grid service-grid\">\n          <div className={`card-${theme} service-card`}>\n            <h3>Hesap İşlemleri</h3>\n            <p>Bakiye sorgulama, para transferi ve hesap hareketlerinizi görüntüleyin.</p>\n          </div>\n          <div className={`card-${theme} service-card`}>\n            <h3>Mobil Bankacılık</h3>\n            <p>7/24 güvenli bankacılık hizmetlerine erişin.</p>\n          </div>\n          <div className={`card-${theme} service-card`}>\n            <h3>Güvenli Giriş</h3>\n            <p>En son güvenlik teknolojileriyle korumalı giriş sistemi.</p>\n          </div>\n        </div>\n        \n        <DepositCalculator />\n        \n        <CreditCalculator />\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":1472},"src/pages/Login.tsx":{"content":"import React, { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { useTheme } from '../context/ThemeContext'\nimport { useAuth } from '../context/AuthContext'\nimport { FormService } from '../services/formService'\n\nexport default function Login() {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState('')\n  const [loading, setLoading] = useState(false)\n  const { theme } = useTheme()\n  const { login } = useAuth()\n  const navigate = useNavigate()\n  \n  const fillTestData = () => {\n    if (import.meta.env.DEV) {\n      setEmail('ali.yilmaz@gmail.com')\n      setPassword('test123456')\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    try {\n      setError('')\n      setLoading(true)\n      await login(email, password)\n      navigate('/account')\n    } catch (error: any) {\n      setError('Giriş başarısız: ' + (error.message || 'Bilinmeyen hata'))\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className={`app-${theme}`} style={{ minHeight: '100vh', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n      <div className=\"container\" style={{ maxWidth: '400px', padding: '20px' }}>\n      <div style={{ textAlign: 'center', marginBottom: '30px' }}>\n        <h1>🏦 Finiş Bankası</h1>\n        <h2>Güvenli Giriş</h2>\n        {import.meta.env.DEV && (\n          <button \n            type=\"button\"\n            onClick={fillTestData}\n            style={{\n              padding: '6px 12px',\n              backgroundColor: '#28a745',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer',\n              fontSize: '13px',\n              marginBottom: '10px'\n            }}\n          >\n            Test Hesabı\n          </button>\n        )}\n        {error && (\n          <div style={{ \n            color: '#dc3545', \n            backgroundColor: 'rgba(220, 53, 69, 0.1)', \n            padding: '10px', \n            borderRadius: '4px', \n            marginTop: '10px',\n            fontSize: '14px'\n          }}>\n            {error}\n          </div>\n        )}\n      </div>\n      <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', gap: '15px' }}>\n        <div>\n          <label htmlFor=\"email\">E-posta:</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            required\n            className={`input-${theme}`}\n            style={{ width: '100%', padding: '8px', marginTop: '5px' }}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"password\">Şifre:</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            required\n            className={`input-${theme}`}\n            style={{ width: '100%', padding: '8px', marginTop: '5px' }}\n          />\n        </div>\n        <button \n          type=\"submit\"\n          disabled={loading}\n          className=\"btn-primary\"\n          style={{ \n            padding: '10px', \n            borderRadius: '4px', \n            cursor: loading ? 'not-allowed' : 'pointer',\n            opacity: loading ? 0.7 : 1\n          }}\n        >\n          {loading ? 'Giriş yapılıyor...' : 'Giriş Yap'}\n        </button>\n      </form>\n      </div>\n    </div>\n  )\n}","size_bytes":3521},"src/pages/Register.tsx":{"content":"import React, { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { useTheme } from '../context/ThemeContext'\nimport { useAuth } from '../context/AuthContext'\nimport { FormService, PROFESSIONS } from '../services/formService'\nimport { UserService } from '../services/userService'\n\nexport default function Register() {\n  // Basic Info\n  const [name, setName] = useState('')\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [confirmPassword, setConfirmPassword] = useState('')\n  const [age, setAge] = useState('')\n  \n  // Professional Info\n  const [profession, setProfession] = useState('')\n  const [experience, setExperience] = useState('')\n  const [sector, setSector] = useState('')\n  \n  // Financial Info\n  const [salary, setSalary] = useState('')\n  const [additionalIncome, setAdditionalIncome] = useState('')\n  \n  const [error, setError] = useState('')\n  const [loading, setLoading] = useState(false)\n  const { theme } = useTheme()\n  const { register } = useAuth()\n  const navigate = useNavigate()\n\n\n  const fillWithMockData = () => {\n    if (!import.meta.env.DEV) return;\n    \n    const randomUser = FormService.getRandomMockUser()\n    const randomPassword = FormService.getMockPassword()\n    \n    setName(randomUser.name)\n    setEmail(randomUser.email)\n    setAge(randomUser.age)\n    setProfession(randomUser.profession)\n    setExperience(randomUser.experience)\n    setSector(randomUser.sector)\n    setSalary(randomUser.salary)\n    setAdditionalIncome(randomUser.additionalIncome)\n    setPassword(randomPassword)\n    setConfirmPassword(randomPassword)\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    const validation = FormService.validateRegistrationForm({\n      password,\n      confirmPassword,\n      age,\n      profession,\n      sector\n    })\n    \n    if (!validation.isValid) {\n      setError(validation.error!)\n      return\n    }\n    \n    try {\n      setError('')\n      setLoading(true)\n      \n      const userData = UserService.prepareRegistrationData({\n        age,\n        profession,\n        experience,\n        sector,\n        salary,\n        additionalIncome\n      })\n      \n      await register(name, email, password, userData)\n      \n      navigate('/')\n    } catch (error: any) {\n      setError('Kayıt başarısız: ' + (error.message || 'Bilinmeyen hata'))\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className={`app-${theme}`} style={{ minHeight: '100vh', padding: '20px' }}>\n      <div className=\"container\" style={{ maxWidth: '600px', margin: '0 auto' }}>\n      <div style={{ textAlign: 'center', marginBottom: '30px' }}>\n        <h1>🏦 Finiş Bankası</h1>\n        <h2>Yeni Hesap Açın</h2>\n        {import.meta.env.DEV && (\n          <button \n            type=\"button\"\n            onClick={fillWithMockData}\n            style={{\n              padding: '8px 16px',\n              backgroundColor: '#17a2b8',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer',\n              fontSize: '14px',\n              marginBottom: '15px'\n            }}\n          >\n            🎲 Test Verilerini Doldur\n          </button>\n        )}\n        {error && (\n          <div style={{ \n            color: '#dc3545', \n            backgroundColor: 'rgba(220, 53, 69, 0.1)', \n            padding: '10px', \n            borderRadius: '4px', \n            marginTop: '10px',\n            fontSize: '14px'\n          }}>\n            {error}\n          </div>\n        )}\n      </div>\n      <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>\n        \n        <div className={`card-${theme}`} style={{ padding: '20px', borderRadius: '8px' }}>\n          <h3 style={{ marginTop: 0, marginBottom: '15px', color: '#007bff' }}>Kişisel Bilgiler</h3>\n          \n          <div className=\"form-grid-2\">\n            <div>\n              <label htmlFor=\"name\">Ad Soyad: *</label>\n              <input\n                type=\"text\"\n                id=\"name\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                required\n                className={`input-${theme}`}\n                style={{ width: '100%', padding: '8px', marginTop: '5px' }}\n              />\n            </div>\n            <div>\n              <label htmlFor=\"age\">Yaş: *</label>\n              <input\n                type=\"number\"\n                id=\"age\"\n                value={age}\n                onChange={(e) => setAge(e.target.value)}\n                required\n                min=\"18\"\n                max=\"100\"\n                className={`input-${theme}`}\n                style={{ width: '100%', padding: '8px', marginTop: '5px' }}\n              />\n            </div>\n          </div>\n          \n          <div style={{ marginTop: '15px' }}>\n            <label htmlFor=\"email\">E-posta: *</label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n              className={`input-${theme}`}\n              style={{ width: '100%', padding: '8px', marginTop: '5px' }}\n            />\n          </div>\n        </div>\n\n        <div className={`card-${theme}`} style={{ padding: '20px', borderRadius: '8px' }}>\n          <h3 style={{ marginTop: 0, marginBottom: '15px', color: '#007bff' }}>💼 Meslek Bilgileri</h3>\n          \n          <div className=\"form-grid-2\">\n            <div>\n              <label htmlFor=\"profession\">Meslek: *</label>\n              <select\n                id=\"profession\"\n                value={profession}\n                onChange={(e) => setProfession(e.target.value)}\n                required\n                className={`input-${theme}`}\n                style={{ width: '100%', padding: '8px', marginTop: '5px' }}\n              >\n                <option value=\"\">Meslek Seçiniz</option>\n                {PROFESSIONS.map((prof) => (\n                  <option key={prof} value={prof}>{prof}</option>\n                ))}\n              </select>\n            </div>\n            <div>\n              <label htmlFor=\"experience\">Tecrübe (Yıl):</label>\n              <input\n                type=\"number\"\n                id=\"experience\"\n                value={experience}\n                onChange={(e) => setExperience(e.target.value)}\n                min=\"0\"\n                max=\"50\"\n                className={`input-${theme}`}\n                style={{ width: '100%', padding: '8px', marginTop: '5px' }}\n                placeholder=\"0\"\n              />\n            </div>\n          </div>\n          \n          <div style={{ marginTop: '15px' }}>\n            <label htmlFor=\"sector\">Çalıştığınız Sektör: *</label>\n            <select\n              id=\"sector\"\n              value={sector}\n              onChange={(e) => setSector(e.target.value)}\n              required\n              className={`input-${theme}`}\n              style={{ width: '100%', padding: '8px', marginTop: '5px' }}\n            >\n              <option value=\"\">Sektör Seçiniz</option>\n              <option value=\"ozel\">Özel Sektör</option>\n              <option value=\"kamu\">Kamu/Devlet</option>\n              <option value=\"serbest\">Serbest Meslek</option>\n              <option value=\"emekli\">Emekli</option>\n              <option value=\"ogrenci\">Öğrenci</option>\n              <option value=\"calismiyorum\">Çalışmıyorum</option>\n            </select>\n          </div>\n        </div>\n\n        <div className={`card-${theme}`} style={{ padding: '20px', borderRadius: '8px' }}>\n          <h3 style={{ marginTop: 0, marginBottom: '15px', color: '#007bff' }}>Gelir Bilgileri</h3>\n          \n          <div className=\"form-grid-2\">\n            <div>\n              <label htmlFor=\"salary\">Aylık Ortalama Maaş (TL):</label>\n              <input\n                type=\"number\"\n                id=\"salary\"\n                value={salary}\n                onChange={(e) => setSalary(e.target.value)}\n                min=\"0\"\n                className={`input-${theme}`}\n                style={{ width: '100%', padding: '8px', marginTop: '5px' }}\n                placeholder=\"0\"\n              />\n            </div>\n            <div>\n              <label htmlFor=\"additionalIncome\">Ek Gelir (TL):</label>\n              <input\n                type=\"number\"\n                id=\"additionalIncome\"\n                value={additionalIncome}\n                onChange={(e) => setAdditionalIncome(e.target.value)}\n                min=\"0\"\n                className={`input-${theme}`}\n                style={{ width: '100%', padding: '8px', marginTop: '5px' }}\n                placeholder=\"0\"\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className={`card-${theme}`} style={{ padding: '20px', borderRadius: '8px' }}>\n          <h3 style={{ marginTop: 0, marginBottom: '15px', color: '#007bff' }}>Güvenlik Bilgileri</h3>\n          \n          <div className=\"form-grid-2\">\n            <div>\n              <label htmlFor=\"password\">Şifre: *</label>\n              <input\n                type=\"password\"\n                id=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                className={`input-${theme}`}\n                style={{ width: '100%', padding: '8px', marginTop: '5px' }}\n                placeholder=\"En az 6 karakter\"\n              />\n            </div>\n            <div>\n              <label htmlFor=\"confirmPassword\">Şifre Tekrar: *</label>\n              <input\n                type=\"password\"\n                id=\"confirmPassword\"\n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n                required\n                className={`input-${theme}`}\n                style={{ width: '100%', padding: '8px', marginTop: '5px' }}\n                placeholder=\"Şifreyi tekrar girin\"\n              />\n            </div>\n          </div>\n        </div>\n        <button \n          type=\"submit\"\n          disabled={loading}\n          className=\"btn-success\"\n          style={{ \n            padding: '10px', \n            borderRadius: '4px', \n            cursor: loading ? 'not-allowed' : 'pointer',\n            opacity: loading ? 0.7 : 1\n          }}\n        >\n          {loading ? 'Hesap oluşturuluyor...' : 'Kayıt Ol'}\n        </button>\n      </form>\n      </div>\n    </div>\n  )\n}","size_bytes":10561},"src/utils/accountUtils.ts":{"content":"// Hesap numarası oluşturma fonksiyonu\nexport const generateAccountNumber = (): string => {\n  // İlk 4 haneli grup (1000-9999 arası)\n  const firstGroup = Math.floor(Math.random() * 9000) + 1000\n  \n  // İkinci 6 haneli grup (100000-999999 arası)\n  const secondGroup = Math.floor(Math.random() * 900000) + 100000\n  \n  return `${firstGroup}-${secondGroup}`\n}\n\n// Hesap bilgileri oluşturma fonksiyonu\nexport const createAccountInfo = () => {\n  return {\n    accountNumber: generateAccountNumber(),\n    currency: 'TL',\n    balance: 0, // Başlangıç bakiyesi\n    accountType: 'Vadesiz Hesap',\n    status: 'Aktif',\n    openDate: new Date()\n  }\n}","size_bytes":646},"functions/main.py":{"content":"from firebase_functions import https_fn\nfrom firebase_functions.options import set_global_options\nfrom firebase_admin import initialize_app\nimport json\nimport math\nimport datetime\nimport logging\nfrom typing import Dict, List, Tuple, Any\n\n  \nfrom models.advanced_scoring import AdvancedCreditScoringEngine\nfrom utils.security import SecurityValidator, DataEncryption\n\ninitialize_app()\n\nset_global_options(max_instances=10)\n\nclass CreditDecisionEngine:\n    def __init__(self):\n        self.base_rate = 4.09  # Fixed rate as requested\n        self.advanced_scoring = AdvancedCreditScoringEngine()\n        self.security_validator = SecurityValidator()\n    \n    def _initialize_training_data(self) -> List[Dict]:\n        return [\n            {'age': 25, 'monthly_income': 5000, 'employment_years': 2, 'debt_ratio': 0.2, 'kkb_score': 650, 'approved': 0},\n            {'age': 35, 'monthly_income': 12000, 'employment_years': 8, 'debt_ratio': 0.3, 'kkb_score': 750, 'approved': 1},\n            {'age': 45, 'monthly_income': 8000, 'employment_years': 15, 'debt_ratio': 0.15, 'kkb_score': 720, 'approved': 1},\n            {'age': 30, 'monthly_income': 15000, 'employment_years': 5, 'debt_ratio': 0.4, 'kkb_score': 680, 'approved': 1},\n            {'age': 50, 'monthly_income': 20000, 'employment_years': 20, 'debt_ratio': 0.1, 'kkb_score': 800, 'approved': 1},\n            {'age': 28, 'monthly_income': 6000, 'employment_years': 3, 'debt_ratio': 0.35, 'kkb_score': 640, 'approved': 0},\n            {'age': 40, 'monthly_income': 18000, 'employment_years': 12, 'debt_ratio': 0.25, 'kkb_score': 780, 'approved': 1},\n            {'age': 55, 'monthly_income': 25000, 'employment_years': 25, 'debt_ratio': 0.05, 'kkb_score': 820, 'approved': 1},\n            {'age': 32, 'monthly_income': 7000, 'employment_years': 4, 'debt_ratio': 0.45, 'kkb_score': 620, 'approved': 0},\n            {'age': 38, 'monthly_income': 14000, 'employment_years': 10, 'debt_ratio': 0.2, 'kkb_score': 740, 'approved': 1},\n            {'age': 42, 'monthly_income': 22000, 'employment_years': 18, 'debt_ratio': 0.18, 'kkb_score': 785, 'approved': 1},\n            {'age': 29, 'monthly_income': 9000, 'employment_years': 6, 'debt_ratio': 0.32, 'kkb_score': 665, 'approved': 0},\n            {'age': 46, 'monthly_income': 16000, 'employment_years': 14, 'debt_ratio': 0.22, 'kkb_score': 735, 'approved': 1},\n            {'age': 33, 'monthly_income': 11000, 'employment_years': 7, 'debt_ratio': 0.38, 'kkb_score': 695, 'approved': 1},\n            {'age': 52, 'monthly_income': 24000, 'employment_years': 22, 'debt_ratio': 0.12, 'kkb_score': 810, 'approved': 1},\n            {'age': 27, 'monthly_income': 8500, 'employment_years': 5, 'debt_ratio': 0.28, 'kkb_score': 675, 'approved': 0},\n            {'age': 41, 'monthly_income': 19000, 'employment_years': 13, 'debt_ratio': 0.24, 'kkb_score': 755, 'approved': 1},\n            {'age': 56, 'monthly_income': 26000, 'employment_years': 27, 'debt_ratio': 0.08, 'kkb_score': 825, 'approved': 1},\n            {'age': 31, 'monthly_income': 10000, 'employment_years': 8, 'debt_ratio': 0.41, 'kkb_score': 655, 'approved': 0},\n            {'age': 39, 'monthly_income': 17000, 'employment_years': 11, 'debt_ratio': 0.19, 'kkb_score': 745, 'approved': 1}\n        ]\n    \n    def _calculate_similarity_score(self, applicant: Dict, reference: Dict) -> float:\n        age_diff = abs(applicant.get('age', 35) - reference['age']) / 30\n        income_diff = abs(applicant.get('monthly_income', 0) - reference['monthly_income']) / 20000\n        exp_diff = abs(applicant.get('work_experience', 0) - reference['employment_years']) / 15\n        debt_diff = abs(self._calculate_debt_ratio(applicant) - reference['debt_ratio']) / 0.5\n        kkb_diff = abs(applicant.get('kkb_score', 500) - reference['kkb_score']) / 200\n        \n        total_diff = age_diff + income_diff + exp_diff + debt_diff + kkb_diff\n        return max(0, 1 - total_diff / 5)\n    \n    def _calculate_debt_ratio(self, data: Dict) -> float:\n        monthly_income = data.get('monthly_income', 0)\n        additional_income = data.get('additional_income', 0)\n        total_income = monthly_income + additional_income\n        \n        existing_loans = data.get('existing_loans', 0)\n        credit_card_debt = data.get('credit_card_debt', 0)\n        total_debt = existing_loans + credit_card_debt\n        \n        return total_debt / max(total_income, 1)\n    \n\n    def _ml_prediction(self, data: Dict) -> float:\n        \"\"\"Advanced ML prediction using mathematical analysis\"\"\"\n        similarities = []\n        approvals = []\n        \n        # Calculate similarities with all training data points\n        for ref_data in self._initialize_training_data():\n            # Multi-dimensional similarity calculation\n            age_sim = max(0, 1 - abs(data.get('age', 35) - ref_data['age']) / 30)\n            income_sim = max(0, 1 - abs(data.get('monthly_income', 0) - ref_data['monthly_income']) / 20000)\n            exp_sim = max(0, 1 - abs(data.get('work_experience', 0) - ref_data['employment_years']) / 15)\n            debt_sim = max(0, 1 - abs(self._calculate_debt_ratio(data) - ref_data['debt_ratio']) / 0.5)\n            kkb_sim = max(0, 1 - abs(data.get('kkb_score', 500) - ref_data['kkb_score']) / 200)\n            \n            # Combined similarity with weighted factors\n            combined_similarity = (age_sim * 0.15 + income_sim * 0.30 + exp_sim * 0.20 + \n                                 debt_sim * 0.25 + kkb_sim * 0.10)\n            \n            if combined_similarity > 0.1:  # Threshold for relevance\n                similarities.append(combined_similarity)\n                approvals.append(ref_data['approved'])\n        \n        if not similarities:\n            return 0.5  # Neutral if no similar cases\n        \n        # Weighted prediction using similarity scores\n        weighted_sum = sum(sim * app for sim, app in zip(similarities, approvals))\n        total_weight = sum(similarities)\n        \n        # Add confidence boost based on number of similar cases\n        confidence_factor = min(1.0, len(similarities) / 10)\n        base_prediction = weighted_sum / total_weight if total_weight > 0 else 0.5\n        \n        return base_prediction * confidence_factor + 0.5 * (1 - confidence_factor)\n    \n    def calculate_credit_score(self, data: Dict) -> Tuple[float, List[str]]:\n        \"\"\"Calculate comprehensive credit score based on 25+ factors\"\"\"\n        score = 0\n        factors = []\n        \n        # 1. Basic Demographics (5%)\n        age = data.get('age', 35)\n        if 25 <= age <= 65:\n            age_score = min(100, (age - 20) * 2)\n        else:\n            age_score = max(0, 100 - abs(age - 45) * 2)\n        score += age_score * 0.05\n        factors.append(f\"Yaş Skoru: {age_score:.0f}/100\")\n        \n        # 2. Income Analysis (25%)\n        monthly_income = data.get('monthly_income', 0)\n        additional_income = data.get('additional_income', 0)\n        total_income = monthly_income + additional_income\n        \n        if total_income >= 35000:\n            income_score = 100\n        elif total_income >= 20000:\n            income_score = 90\n        elif total_income >= 15000:\n            income_score = 85\n        elif total_income >= 10000:\n            income_score = 75\n        elif total_income >= 7500:\n            income_score = 65\n        elif total_income >= 5000:\n            income_score = 55\n        else:\n            income_score = max(30, total_income / 200)\n        \n        score += income_score * 0.25\n        factors.append(f\"Gelir Skoru: {income_score:.0f}/100 (₺{total_income:,.0f})\")\n        \n        # 3. Employment Stability (15%)\n        employment_years = data.get('work_experience', 0)\n        employment_type = data.get('employment_type', '')\n        \n        employment_score = min(100, employment_years * 12 + 20)\n        \n        # Employment type bonus\n        if 'Doktor' in employment_type or 'Mühendis' in employment_type:\n            employment_score = min(100, employment_score * 1.2)\n        elif 'Özel Sektör' in employment_type:\n            employment_score = min(100, employment_score * 1.1)\n        elif 'Kamu' in employment_type:\n            employment_score = min(100, employment_score * 1.15)\n        \n        score += employment_score * 0.15\n        factors.append(f\"İstikrar Skoru: {employment_score:.0f}/100 ({employment_years} yıl)\")\n        \n        # 4. Debt Analysis (20%)\n        debt_ratio = self._calculate_debt_ratio(data)\n        \n        if debt_ratio <= 0.1:\n            debt_score = 100\n        elif debt_ratio <= 0.2:\n            debt_score = 95\n        elif debt_ratio <= 0.3:\n            debt_score = 85\n        elif debt_ratio <= 0.4:\n            debt_score = 75\n        elif debt_ratio <= 0.5:\n            debt_score = 60\n        else:\n            debt_score = max(0, 20 - (debt_ratio - 0.5) * 40)\n        \n        score += debt_score * 0.20\n        factors.append(f\"Borç Skoru: {debt_score:.0f}/100 (Oran: %{debt_ratio*100:.1f})\")\n        \n        # 5. Assets & Wealth (15%)\n        bank_balance = data.get('bank_balance', 0)\n        investments = data.get('investments', 0)\n        real_estate_value = data.get('real_estate_value', 0)\n        total_assets = bank_balance + investments + real_estate_value\n        \n        if total_assets >= 1000000:\n            asset_score = 100\n        elif total_assets >= 500000:\n            asset_score = 90\n        elif total_assets >= 250000:\n            asset_score = 80\n        elif total_assets >= 100000:\n            asset_score = 70\n        elif total_assets >= 50000:\n            asset_score = 60\n        else:\n            asset_score = max(30, total_assets / 2000)\n        \n        score += asset_score * 0.15\n        factors.append(f\"Varlık Skoru: {asset_score:.0f}/100 (₺{total_assets:,.0f})\")\n        \n        # 6. Credit History (10%)\n        kkb_score = data.get('kkb_score', 500)\n        payment_delays = data.get('payment_delays', 0)\n        \n        if kkb_score >= 800:\n            credit_history_score = 100\n        elif kkb_score >= 700:\n            credit_history_score = 85\n        elif kkb_score >= 600:\n            credit_history_score = 70\n        elif kkb_score >= 500:\n            credit_history_score = 55\n        else:\n            credit_history_score = 30\n        \n        # Payment delays penalty\n        delay_penalty = min(30, payment_delays * 5)\n        credit_history_score = max(0, credit_history_score - delay_penalty)\n        \n        score += credit_history_score * 0.10\n        factors.append(f\"Kredi Geçmişi: {credit_history_score:.0f}/100 (KKB: {kkb_score})\")\n        \n        # 7. Banking Relationship (5%)\n        existing_relationship = data.get('existing_relationship', 0)\n        total_banking_products = data.get('total_banking_products', 0)\n        \n        relationship_score = min(100, existing_relationship * 2)\n        product_bonus = min(20, total_banking_products * 5)\n        relationship_score = min(100, relationship_score + product_bonus)\n        \n        score += relationship_score * 0.05\n        factors.append(f\"Banka İlişkisi: {relationship_score:.0f}/100 ({existing_relationship} ay)\")\n        \n        # 8. Loan Amount Risk (4%)\n        loan_amount = data.get('loan_amount', 0)\n        loan_to_income_ratio = loan_amount / max(total_income * 12, 1)  # Yıllık gelire göre\n        \n        if loan_to_income_ratio <= 2:\n            loan_risk_score = 100\n        elif loan_to_income_ratio <= 3:\n            loan_risk_score = 85\n        elif loan_to_income_ratio <= 4:\n            loan_risk_score = 70\n        elif loan_to_income_ratio <= 5:\n            loan_risk_score = 55\n        elif loan_to_income_ratio <= 6:\n            loan_risk_score = 40\n        else:\n            loan_risk_score = max(20, 100 - (loan_to_income_ratio - 6) * 10)\n        \n        score += loan_risk_score * 0.04\n        factors.append(f\"Kredi/Gelir Riski: {loan_risk_score:.0f}/100 (Oran: {loan_to_income_ratio:.1f})\")\n        \n        # 9. Loan Term Risk (3%)\n        loan_term = data.get('loan_term_months', 12)\n        \n        if loan_term <= 12:\n            term_risk_score = 100\n        elif loan_term <= 24:\n            term_risk_score = 90\n        elif loan_term <= 36:\n            term_risk_score = 80\n        elif loan_term <= 48:\n            term_risk_score = 70\n        elif loan_term <= 60:\n            term_risk_score = 60\n        elif loan_term <= 84:\n            term_risk_score = 50\n        else:\n            term_risk_score = max(30, 100 - (loan_term - 84) * 2)\n        \n        score += term_risk_score * 0.03\n        factors.append(f\"Vade Riski: {term_risk_score:.0f}/100 ({loan_term} ay)\")\n        \n        # 9. AI/ML Component (5%)\n        ml_prediction = self._ml_prediction(data)\n        ml_score = ml_prediction * 100\n        score += ml_score * 0.05\n        factors.append(f\"AI Tahmin: {ml_score:.0f}/100 (Risk: %{(1-ml_prediction)*100:.1f})\")\n        \n        return min(100, max(0, score)), factors\n    \n    def determine_customer_segment(self, data: Dict) -> Tuple[str, str]:\n        \"\"\"Determine customer segment based on comprehensive profile\"\"\"\n        monthly_income = data.get('monthly_income', 0)\n        additional_income = data.get('additional_income', 0)\n        total_income = monthly_income + additional_income\n        assets = data.get('bank_balance', 0) + data.get('investments', 0) + data.get('real_estate_value', 0)\n        employment_type = data.get('employment_type', '')\n        \n        # Corporate segment criteria\n        if (total_income >= 40000 or assets >= 1000000 or \n            'Doktor' in employment_type or 'Mühendis' in employment_type):\n            return \"Corporate\", \"Kurumsal müşteri segmenti - özel koşullar ve hızlı işlem\"\n        \n        # Private Banking segment criteria\n        elif total_income >= 25000 or assets >= 500000:\n            return \"Private Banking\", \"Private Banking segmenti - premium faiz oranları ve özel danışman\"\n        \n        # Mass Market segment\n        else:\n            return \"Mass Market\", \"Bireysel müşteri segmenti - standart koşullar ve süreçler\"\n    \n    def calculate_interest_rate(self, data: Dict, risk_score: float) -> Dict:\n        \"\"\"Calculate interest rate based on Turkish banking standards\"\"\"\n        segment, _ = self.determine_customer_segment(data)\n        \n        # Segment-based rate adjustments\n        if segment == \"Corporate\":\n            segment_multiplier = 0.7  # %30 discount\n        elif segment == \"Private Banking\":\n            segment_multiplier = 0.85  # %15 discount\n        else:\n            segment_multiplier = 1.2  # %20 premium\n        \n        # Risk-based rate adjustments\n        if risk_score >= 85:\n            risk_multiplier = 0.9  # Low risk discount\n        elif risk_score >= 70:\n            risk_multiplier = 1.0  # Standard rate\n        elif risk_score >= 55:\n            risk_multiplier = 1.3  # Higher risk premium\n        else:\n            risk_multiplier = 1.6  # High risk premium\n        \n        # Calculate base monthly rate\n        monthly_rate = self.base_rate * segment_multiplier * risk_multiplier\n        \n        # Add Turkish banking taxes\n        kkdf_tax = monthly_rate * 0.15  # KKDF %15\n        bsmv_tax = monthly_rate * 0.15  # BSMV %15\n        final_rate = monthly_rate + kkdf_tax + bsmv_tax\n        \n        return {\n            'base_rate': self.base_rate,\n            'segment_multiplier': segment_multiplier,\n            'risk_multiplier': risk_multiplier,\n            'monthly_rate_before_tax': monthly_rate,\n            'kkdf_tax': kkdf_tax,\n            'bsmv_tax': bsmv_tax,\n            'final_monthly_rate': final_rate,\n            'annual_rate': final_rate * 12\n        }\n    \n    def make_decision(self, data: Dict) -> Dict:\n        \"\"\"Make comprehensive credit decision using Advanced Scoring Engine (4.09% Fixed)\"\"\"\n        try:\n            # Basic data validation\n            if not data or not isinstance(data, dict):\n                return {\n                    \"decision\": \"ERROR\",\n                    \"error\": \"Geçersiz veri formatı\",\n                    \"timestamp\": datetime.datetime.now().isoformat()\n                }\n            \n            # Use new advanced scoring system with 4.09% fixed rate\n            scoring_result = self.advanced_scoring.score_application(data)\n            \n            # Convert decision format to match frontend expectations\n            decision_mapping = {\n                \"APPROVE\": \"ONAYLANDI\",\n                \"CONDITIONAL\": \"CONDITIONAL\",\n                \"REJECT\": \"REDDEDILDI\"\n            }\n            \n            turkish_decision = decision_mapping.get(scoring_result['decision'], \"CONDITIONAL\")\n            \n            # Generate Turkish decision reason\n            score = scoring_result['score']\n            if turkish_decision == \"ONAYLANDI\":\n                decision_reason = f\"Kredi onaylandı - Risk skoru: {score}/100. Güçlü finansal profil.\"\n            elif turkish_decision == \"CONDITIONAL\":\n                decision_reason = f\"Koşullu onay - Risk skoru: {score}/100. Ek şartlar gerekli.\"\n            else:\n                decision_reason = f\"Kredi reddedildi - Risk skoru: {score}/100. Risk kriterleri karşılanmadı.\"\n            \n            # Create detailed risk factors from advanced scoring\n            risk_factors = []\n            calc = scoring_result.get('calculations', {})\n            expl = scoring_result.get('explainability', {})\n            \n            # Add detailed financial metrics\n            risk_factors.append(f\"Net Gelir: {calc.get('net_income', 0):,.0f} TL\")\n            risk_factors.append(f\"Yeni DTI Oranı: %{calc.get('new_dti', 0)*100:.1f}\")\n            risk_factors.append(f\"Aylık Taksit: {calc.get('new_installment', 0):,.0f} TL\")\n            risk_factors.append(f\"Kredi Kartı Kullanım: %{calc.get('credit_utilization', 0)*100:.1f}\")\n            risk_factors.append(f\"Likidite Oranı: {calc.get('liquidity_ratio', 0):.2f}\")\n            \n            # Add top contributing factors\n            for feature in expl.get('top_five_features', [])[:3]:  # Top 3 only\n                risk_factors.append(f\"{feature['feature']}: {feature['contribution']:.1f} puan\")\n            \n            return {\n                \"decision\": turkish_decision,\n                \"decision_reason\": decision_reason,\n                \"credit_score\": score,\n                \"risk_factors\": risk_factors,\n                \"customer_segment\": self._determine_segment_from_score(score),\n                \"segment_description\": self._get_segment_description(score),\n                \"interest_rates\": self._calculate_simple_rates(scoring_result),\n                \"loan_details\": self._calculate_loan_details(data, scoring_result),\n                \"processing_info\": self._get_processing_info(turkish_decision, score),\n                \"advanced_analysis\": {\n                    \"explainability\": expl,\n                    \"calculations\": calc,\n                    \"assumptions\": scoring_result.get('assumptions', {}),\n                    \"policy_flags\": scoring_result.get('policy_flags', {}),\n                    \"limits\": scoring_result.get('limits', {})\n                },\n                \"timestamp\": scoring_result.get('timestamp'),\n                \"engine_version\": scoring_result.get('engine_version')\n            }\n            \n        except Exception as e:\n            return {\n                \"decision\": \"ERROR\",\n                \"error\": f\"Kredi değerlendirme hatası: {str(e)}\",\n                \"timestamp\": datetime.datetime.now().isoformat()\n            }\n    \n    def _determine_segment_from_score(self, score: float) -> str:\n        \"\"\"Determine customer segment from score\"\"\"\n        if score >= 75:\n            return \"Private Banking\"\n        elif score >= 60:\n            return \"Corporate\"\n        else:\n            return \"Mass Market\"\n    \n    def _get_segment_description(self, score: float) -> str:\n        \"\"\"Get segment description from score\"\"\"\n        segment = self._determine_segment_from_score(score)\n        descriptions = {\n            \"Private Banking\": \"Private Banking segmenti - premium faiz oranları ve özel danışman\",\n            \"Corporate\": \"Kurumsal müşteri segmenti - özel koşullar ve hızlı işlem\",\n            \"Mass Market\": \"Bireysel müşteri segmenti - standart koşullar ve süreçler\"\n        }\n        return descriptions.get(segment, \"Standart müşteri segmenti\")\n    \n    def _calculate_simple_rates(self, scoring_result: Dict) -> Dict:\n        \"\"\"Calculate simplified interest rates for display\"\"\"\n        annual_rate = scoring_result.get('assumptions', {}).get('annual_rate', 4.09)\n        monthly_rate = annual_rate / 12\n        \n        return {\n            'base_rate': annual_rate,\n            'monthly_rate': monthly_rate,\n            'annual_rate': annual_rate,\n            'kkdf_tax': annual_rate * 0.15,\n            'bsmv_tax': annual_rate * 0.15,\n            'final_annual_rate': annual_rate * 1.3  # With taxes\n        }\n    \n    def _calculate_loan_details(self, data: Dict, scoring_result: Dict) -> Dict:\n        \"\"\"Calculate loan details using fixed rate\"\"\"\n        loan_amount = data.get('loan_amount', 0)\n        loan_term = data.get('loan_term_months', 12)\n        monthly_installment = scoring_result.get('calculations', {}).get('new_installment', 0)\n        \n        total_payment = monthly_installment * loan_term\n        total_interest = total_payment - loan_amount\n        \n        return {\n            \"requested_amount\": loan_amount,\n            \"term_months\": loan_term,\n            \"monthly_payment\": round(monthly_installment, 2),\n            \"total_payment\": round(total_payment, 2),\n            \"total_interest\": round(total_interest, 2),\n            \"effective_annual_rate\": 4.09\n        }\n    \n    def _get_processing_info(self, decision: str, score: float) -> Dict:\n        \"\"\"Get processing information\"\"\"\n        segment = self._determine_segment_from_score(score)\n        \n        base_docs = [\"Nüfus cüzdanı\", \"Gelir belgesi\", \"İkametgah belgesi\"]\n        \n        if decision == \"ONAYLANDI\":\n            next_steps = [\"Hızlı onay süreci\", \"Belge kontrolü\", \"Sözleşme hazırlama\"]\n        elif decision == \"CONDITIONAL\":\n            next_steps = [\"Ek belge talep edilecek\", \"Risk analizi\", \"Koşullu değerlendirme\"]\n            base_docs.extend([\"Ek teminat belgesi\", \"Kefil bilgileri\"])\n        else:\n            next_steps = [\"Ret gerekçesi\", \"Alternatif öneriler\", \"Yeniden başvuru koşulları\"]\n        \n        return {\n            \"processing_time\": f\"{segment} müşteriler için özel işlem süresi\",\n            \"required_documents\": base_docs,\n            \"next_steps\": next_steps\n        }\n    \n\n# Initialize the decision engine\ndecision_engine = CreditDecisionEngine()\n\n@https_fn.on_request()\ndef evaluate_credit(req: https_fn.Request) -> https_fn.Response:\n    \"\"\"Firebase Cloud Function for AI credit evaluation\"\"\"\n    \n    # Comprehensive CORS headers\n    headers = {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS, PUT, DELETE',\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With, Accept, Origin',\n        'Access-Control-Max-Age': '86400',\n        'Content-Type': 'application/json; charset=utf-8',\n        'Vary': 'Origin'\n    }\n    \n    # Handle preflight OPTIONS request\n    if req.method == 'OPTIONS':\n        return https_fn.Response('', status=200, headers=headers)\n    \n    try:\n        if req.method != 'POST':\n            return https_fn.Response(\n                json.dumps({\"error\": \"Only POST method allowed\"}, ensure_ascii=False),\n                status=405,\n                headers=headers\n            )\n        \n        # Parse request data with better error handling\n        try:\n            data = req.get_json()\n        except Exception as json_error:\n            return https_fn.Response(\n                json.dumps({\"error\": f\"Invalid JSON: {str(json_error)}\"}, ensure_ascii=False),\n                status=400,\n                headers=headers\n            )\n            \n        if not data:\n            return https_fn.Response(\n                json.dumps({\"error\": \"No data provided\"}, ensure_ascii=False),\n                status=400,\n                headers=headers\n            )\n        \n        # Make credit decision using AI engine  \n        result = decision_engine.make_decision(data)\n        \n        return https_fn.Response(\n            json.dumps(result, ensure_ascii=False),\n            status=200,\n            headers=headers\n        )\n        \n    except Exception as e:\n        error_response = {\n            \"error\": \"Credit evaluation failed\",\n            \"message\": str(e),\n            \"timestamp\": datetime.datetime.now().isoformat()\n        }\n        return https_fn.Response(\n            json.dumps(error_response, ensure_ascii=False),\n            status=500,\n            headers=headers\n        )\n\n@https_fn.on_request()\ndef health_check(req: https_fn.Request) -> https_fn.Response:\n    \"\"\"Health check endpoint for monitoring\"\"\"\n    return https_fn.Response(\n        \"Finiş Bankası AI Credit Engine v2.0 (Pure Python) - Çalışıyor! ✅\", \n        status=200\n    )\n\n@https_fn.on_request()\ndef system_info(req: https_fn.Request) -> https_fn.Response:\n    \"\"\"System information endpoint\"\"\"\n    info = {\n        \"system\": \"Finiş Bankası AI Credit Engine\",\n        \"version\": \"2.0 (Pure Python)\",\n        \"features\": [\n            \"25+ faktörlü kredi skorlaması\",\n            \"3 müşteri segmenti (Mass/Private Banking/Corporate)\", \n            \"Türk bankacılık standartları (KKDF/BSMV)\",\n            \"Pure Python AI algoritmaları\",\n            \"Gerçek zamanlı karar motoru\",\n            \"Benzerlik tabanlı risk değerlendirmesi\"\n        ],\n        \"status\": \"active\",\n        \"timestamp\": datetime.datetime.now().isoformat(),\n        \"runtime\": \"Python 3.13 (Firebase Functions)\"\n    }\n    \n    return https_fn.Response(\n        json.dumps(info, ensure_ascii=False),\n        status=200,\n        headers={'Content-Type': 'application/json; charset=utf-8'}\n    )","size_bytes":26165},"functions/models/credit_scoring.py":{"content":"# Advanced credit scoring model\nfrom datetime import datetime\nfrom typing import Dict, Any, Tuple\n\nclass CreditScoringEngine:\n    \"\"\"Advanced credit scoring engine with Turkish banking standards\"\"\"\n    \n    def __init__(self):\n        self.risk_factors = {\n            'income_stability': 0.25,\n            'debt_to_income': 0.20,\n            'kkb_score': 0.15,\n            'employment_history': 0.12,\n            'banking_relationship': 0.10,\n            'collateral_assets': 0.08,\n            'payment_history': 0.10\n        }\n        \n        self.segment_thresholds = {\n            'mass': {'min_income': 8000, 'max_loan': 300000},\n            'private': {'min_income': 40000, 'max_loan': 1000000},\n            'corporate': {'min_income': 25000, 'max_loan': 750000}\n        }\n\n    def calculate_risk_score(self, application_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Calculate comprehensive risk score\"\"\"\n        \n        try:\n            # Extract key metrics\n            monthly_income = float(application_data.get('monthly_income', 0))\n            debt_to_income = float(application_data.get('debt_to_income_ratio', 0))\n            kkb_score = int(application_data.get('kkb_score', 500))\n            loan_amount = float(application_data.get('loan_amount', 0))\n            employment_years = float(application_data.get('work_experience', 0))\n            \n            # Income stability score (0-100)\n            income_score = min(100, (monthly_income / 10000) * 50 + \n                             (employment_years / 10) * 30 + 20)\n            \n            # Debt ratio score (0-100) - lower debt ratio = higher score\n            debt_score = max(0, 100 - (debt_to_income * 200))\n            \n            # KKB score normalization (300-900 -> 0-100)\n            kkb_normalized = max(0, min(100, ((kkb_score - 300) / 600) * 100))\n            \n            # Employment stability\n            employment_score = min(100, (employment_years / 15) * 100)\n            \n            # Banking relationship score\n            relationship_months = float(application_data.get('existing_relationship', 0))\n            banking_score = min(100, (relationship_months / 60) * 100)\n            \n            # Asset collateral score\n            real_estate = float(application_data.get('real_estate_value', 0))\n            investments = float(application_data.get('investments', 0))\n            total_assets = real_estate + investments\n            asset_score = min(100, (total_assets / 500000) * 100)\n            \n            # Payment history score\n            payment_delays = int(application_data.get('payment_delays', 0))\n            payment_score = max(0, 100 - (payment_delays * 25))\n            \n            # Calculate weighted risk score\n            risk_score = (\n                income_score * self.risk_factors['income_stability'] +\n                debt_score * self.risk_factors['debt_to_income'] +\n                kkb_normalized * self.risk_factors['kkb_score'] +\n                employment_score * self.risk_factors['employment_history'] +\n                banking_score * self.risk_factors['banking_relationship'] +\n                asset_score * self.risk_factors['collateral_assets'] +\n                payment_score * self.risk_factors['payment_history']\n            )\n            \n            # Customer segmentation\n            segment = self._determine_segment(monthly_income, total_assets)\n            \n            # Risk category\n            risk_category = self._categorize_risk(risk_score)\n            \n            # Loan to income ratio check\n            loan_to_income_ratio = loan_amount / (monthly_income * 12) if monthly_income > 0 else float('inf')\n            \n            return {\n                'risk_score': round(risk_score, 2),\n                'risk_category': risk_category,\n                'customer_segment': segment,\n                'loan_to_income_ratio': round(loan_to_income_ratio, 2),\n                'component_scores': {\n                    'income': round(income_score, 1),\n                    'debt': round(debt_score, 1),\n                    'kkb': round(kkb_normalized, 1),\n                    'employment': round(employment_score, 1),\n                    'banking': round(banking_score, 1),\n                    'assets': round(asset_score, 1),\n                    'payment_history': round(payment_score, 1)\n                }\n            }\n            \n        except Exception as e:\n            return {\n                'error': f'Risk calculation failed: {str(e)}',\n                'risk_score': 0,\n                'risk_category': 'HIGH_RISK'\n            }\n\n    def _determine_segment(self, income: float, assets: float) -> str:\n        \"\"\"Determine customer segment based on income and assets\"\"\"\n        if income >= 40000 and assets >= 300000:\n            return 'private'\n        elif income >= 25000 and assets >= 100000:\n            return 'corporate'\n        else:\n            return 'mass'\n\n    def _categorize_risk(self, score: float) -> str:\n        \"\"\"Categorize risk based on score\"\"\"\n        if score >= 80:\n            return 'LOW_RISK'\n        elif score >= 60:\n            return 'MEDIUM_RISK'\n        elif score >= 40:\n            return 'HIGH_RISK'\n        else:\n            return 'VERY_HIGH_RISK'\n\n    def make_decision(self, risk_data: Dict[str, Any], application_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Make final credit decision\"\"\"\n        \n        risk_score = risk_data.get('risk_score', 0)\n        loan_amount = float(application_data.get('loan_amount', 0))\n        segment = risk_data.get('customer_segment', 'mass')\n        \n        # Decision matrix based on risk score and segment\n        if risk_score >= 75:\n            approved = True\n            recommended_amount = loan_amount\n            conditions = ['Standart kredi koşulları geçerlidir']\n        elif risk_score >= 60:\n            approved = True\n            recommended_amount = min(loan_amount, loan_amount * 0.8)\n            conditions = ['Ek teminat gerekebilir', 'Daha yüksek faiz oranı uygulanabilir']\n        elif risk_score >= 45:\n            approved = False\n            recommended_amount = min(loan_amount, loan_amount * 0.5)\n            conditions = ['Ek gelir belgesi gerekli', 'Kefil veya teminat zorunlu']\n        else:\n            approved = False\n            recommended_amount = 0\n            conditions = ['Mevcut şartlarda kredi verilemez', 'Gelir artışı sonrası tekrar değerlendirilebilir']\n        \n        # Risk factors affecting decision\n        factors = []\n        scores = risk_data.get('component_scores', {})\n        \n        if scores.get('income', 0) < 50:\n            factors.append('Düşük gelir seviyesi')\n        if scores.get('debt', 0) < 60:\n            factors.append('Yüksek borç/gelir oranı')\n        if scores.get('kkb', 0) < 50:\n            factors.append('Düşük KKB skoru')\n        if scores.get('employment', 0) < 40:\n            factors.append('Kısa iş deneyimi')\n        \n        decision_reason = self._generate_decision_reason(approved, risk_score, factors)\n        \n        return {\n            'approved': approved,\n            'risk_score': risk_score,\n            'recommended_amount': recommended_amount,\n            'decision_reason': decision_reason,\n            'conditions': conditions,\n            'factors': factors,\n            'segment': segment,\n            'timestamp': datetime.now().isoformat()\n        }\n\n    def _generate_decision_reason(self, approved: bool, score: float, factors: list) -> str:\n        \"\"\"Generate human-readable decision reason\"\"\"\n        if approved:\n            return f\"Kredi başvurunuz onaylanmıştır. Risk skoru: {score}/100. Güçlü finansal profil tespit edilmiştir.\"\n        else:\n            main_issues = ', '.join(factors[:2]) if factors else 'Genel risk değerlendirmesi'\n            return f\"Kredi başvurunuz reddedilmiştir. Risk skoru: {score}/100. Ana sorunlar: {main_issues}.\"","size_bytes":7959},"functions/utils/security.py":{"content":"# Security utilities for AI backend\nimport hashlib\nimport hmac\nimport time\nfrom typing import Dict, Any, Optional\nimport logging\n\nclass SecurityValidator:\n    \"\"\"Security validation for API requests\"\"\"\n    \n    def __init__(self):\n        self.rate_limits = {}\n        self.max_requests_per_minute = 30\n        self.max_requests_per_hour = 200\n        \n    def validate_request_data(self, data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Validate and sanitize incoming request data\"\"\"\n        \n        validation_result = {\n            'valid': True,\n            'errors': [],\n            'sanitized_data': {}\n        }\n        \n        try:\n            # Required fields validation\n            required_fields = [\n                'loan_amount', 'loan_term_months', 'monthly_income',\n                'debt_to_income_ratio', 'kkb_score'\n            ]\n            \n            for field in required_fields:\n                if field not in data:\n                    validation_result['errors'].append(f'Missing required field: {field}')\n                    validation_result['valid'] = False\n            \n            if not validation_result['valid']:\n                return validation_result\n            \n            # Sanitize and validate numerical fields\n            numerical_fields = {\n                'loan_amount': {'min': 1000, 'max': 2000000},\n                'loan_term_months': {'min': 3, 'max': 240},\n                'monthly_income': {'min': 0, 'max': 1000000},\n                'debt_to_income_ratio': {'min': 0, 'max': 5},\n                'kkb_score': {'min': 300, 'max': 900},\n                'age': {'min': 18, 'max': 80},\n                'work_experience': {'min': 0, 'max': 50}\n            }\n            \n            for field, constraints in numerical_fields.items():\n                if field in data:\n                    try:\n                        value = float(data[field])\n                        if value < constraints['min'] or value > constraints['max']:\n                            validation_result['errors'].append(\n                                f'{field} must be between {constraints[\"min\"]} and {constraints[\"max\"]}'\n                            )\n                            validation_result['valid'] = False\n                        else:\n                            validation_result['sanitized_data'][field] = value\n                    except (ValueError, TypeError):\n                        validation_result['errors'].append(f'{field} must be a valid number')\n                        validation_result['valid'] = False\n            \n            # String field validation\n            string_fields = ['employment_type', 'customer_segment', 'home_ownership']\n            for field in string_fields:\n                if field in data:\n                    value = str(data[field]).strip()\n                    if len(value) > 100:  # Prevent overly long strings\n                        value = value[:100]\n                    validation_result['sanitized_data'][field] = value\n            \n            # Boolean field validation\n            boolean_fields = ['defaulted_loans', 'legal_issues', 'has_insurance']\n            for field in boolean_fields:\n                if field in data:\n                    validation_result['sanitized_data'][field] = bool(data[field])\n            \n            return validation_result\n            \n        except Exception as e:\n            validation_result['valid'] = False\n            validation_result['errors'].append(f'Validation error: {str(e)}')\n            return validation_result\n    \n    def check_rate_limit(self, client_ip: str) -> Dict[str, Any]:\n        \"\"\"Check if client has exceeded rate limits\"\"\"\n        \n        current_time = time.time()\n        \n        if client_ip not in self.rate_limits:\n            self.rate_limits[client_ip] = {\n                'requests': [],\n                'blocked_until': 0\n            }\n        \n        client_data = self.rate_limits[client_ip]\n        \n        # Check if client is currently blocked\n        if current_time < client_data['blocked_until']:\n            return {\n                'allowed': False,\n                'reason': 'Rate limit exceeded. Please try again later.',\n                'retry_after': int(client_data['blocked_until'] - current_time)\n            }\n        \n        # Clean old requests (older than 1 hour)\n        client_data['requests'] = [\n            req_time for req_time in client_data['requests']\n            if current_time - req_time < 3600\n        ]\n        \n        # Check hourly limit\n        if len(client_data['requests']) >= self.max_requests_per_hour:\n            client_data['blocked_until'] = current_time + 1800  # Block for 30 minutes\n            return {\n                'allowed': False,\n                'reason': 'Hourly rate limit exceeded',\n                'retry_after': 1800\n            }\n        \n        # Check per-minute limit\n        recent_requests = [\n            req_time for req_time in client_data['requests']\n            if current_time - req_time < 60\n        ]\n        \n        if len(recent_requests) >= self.max_requests_per_minute:\n            return {\n                'allowed': False,\n                'reason': 'Per-minute rate limit exceeded',\n                'retry_after': 60\n            }\n        \n        # Add current request\n        client_data['requests'].append(current_time)\n        \n        return {'allowed': True}\n    \n    def log_security_event(self, event_type: str, details: Dict[str, Any]):\n        \"\"\"Log security-related events\"\"\"\n        \n        logging.warning(f\"Security Event: {event_type} - {details}\")\n\nclass DataEncryption:\n    \"\"\"Data encryption utilities\"\"\"\n    \n    @staticmethod\n    def hash_sensitive_data(data: str) -> str:\n        \"\"\"Hash sensitive data using SHA-256\"\"\"\n        return hashlib.sha256(data.encode()).hexdigest()\n    \n    @staticmethod\n    def generate_request_signature(data: Dict[str, Any], secret_key: str) -> str:\n        \"\"\"Generate HMAC signature for request validation\"\"\"\n        data_string = str(sorted(data.items()))\n        return hmac.new(\n            secret_key.encode(),\n            data_string.encode(),\n            hashlib.sha256\n        ).hexdigest()","size_bytes":6215},"src/components/LazyComponents.tsx":{"content":"// Lazy loading components for better performance\nimport { lazy } from 'react'\n\n// Lazy load pages for code splitting\nexport const LazyHome = lazy(() => import('../pages/Home'))\nexport const LazyLogin = lazy(() => import('../pages/Login'))\nexport const LazyRegister = lazy(() => import('../pages/Register'))\nexport const LazyAccount = lazy(() => import('../pages/Account'))\nexport const LazyCreditApplication = lazy(() => import('../pages/CreditApplication'))\n\n// Loading fallback component\nexport const LoadingSpinner = () => (\n  <div className=\"lazy-loading-container\">\n    <div className=\"lazy-loading-spinner\">\n    </div>\n  </div>\n)","size_bytes":636},"src/hooks/useDebounce.ts":{"content":"// Debounce hook for performance optimization\nimport { useState, useEffect } from 'react'\n\nexport function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n\n    return () => {\n      clearTimeout(handler)\n    }\n  }, [value, delay])\n\n  return debouncedValue\n}","size_bytes":423},"src/hooks/useMemoizedCalculation.ts":{"content":"// Memoized calculation hook for credit calculations\nimport { useMemo } from 'react'\nimport { CONSTANTS } from '../utils/constants'\n\ninterface CreditCalculationResult {\n  monthlyPayment: number\n  totalPayment: number\n  totalInterest: number\n  isValid: boolean\n}\n\nexport function useMemoizedCalculation(\n  amount: string, \n  term: string\n): CreditCalculationResult {\n  return useMemo(() => {\n    const loanAmount = parseFloat(amount)\n    const loanTerm = parseInt(term)\n    \n    // Validation\n    if (isNaN(loanAmount) || isNaN(loanTerm) || loanAmount <= 0 || loanTerm <= 0) {\n      return {\n        monthlyPayment: 0,\n        totalPayment: 0,\n        totalInterest: 0,\n        isValid: false\n      }\n    }\n\n    // Credit calculation with Turkish banking formulas\n    const { BASE_RATE, KKDF_RATE, BSMV_RATE } = CONSTANTS.INTEREST\n    \n    const totalRate = Number(\n      (((BASE_RATE * (1 + KKDF_RATE + BSMV_RATE)) / 100) + 1).toFixed(11)\n    )\n    \n    const monthlyPayment = Number(((\n      Math.pow(totalRate, loanTerm) * \n      (totalRate - 1) / \n      (Math.pow(totalRate, loanTerm) - 1)\n    ) * loanAmount).toFixed(2))\n    \n    const totalPayment = monthlyPayment * loanTerm\n    const totalInterest = totalPayment - loanAmount\n\n    return {\n      monthlyPayment,\n      totalPayment,\n      totalInterest,\n      isValid: true\n    }\n  }, [amount, term])\n}","size_bytes":1358},"src/styles/variables.css":{"content":"/* CSS Custom Properties (Variables) */\n:root {\n  /* Colors - Light Theme */\n  --color-primary: #d4a574;\n  --color-primary-dark: #b8935e;\n  --color-primary-light: #e8c89a;\n  \n  --color-secondary: #6c757d;\n  --color-success: #28a745;\n  --color-danger: #dc3545;\n  --color-warning: #ffc107;\n  --color-info: #17a2b8;\n  \n  --color-text: #333333;\n  --color-text-muted: #6c757d;\n  --color-background: #ffffff;\n  --color-surface: #f8f9fa;\n  --color-border: #e5e7eb;\n  \n  /* Typography */\n  --font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  --font-size-base: 16px;\n  --font-size-sm: 14px;\n  --font-size-lg: 18px;\n  --font-size-xl: 20px;\n  --font-size-2xl: 24px;\n  \n  --font-weight-normal: 400;\n  --font-weight-medium: 500;\n  --font-weight-semibold: 600;\n  --font-weight-bold: 700;\n  \n  /* Spacing */\n  --spacing-xs: 4px;\n  --spacing-sm: 8px;\n  --spacing-md: 16px;\n  --spacing-lg: 24px;\n  --spacing-xl: 32px;\n  --spacing-2xl: 48px;\n  \n  /* Border Radius */\n  --radius-sm: 8px;\n  --radius-md: 12px;\n  --radius-lg: 16px;\n  --radius-xl: 20px;\n  \n  /* Shadows */\n  --shadow-sm: 0 2px 4px rgba(0, 0, 0, 0.04);\n  --shadow-md: 0 4px 20px rgba(0, 0, 0, 0.08);\n  --shadow-lg: 0 8px 40px rgba(0, 0, 0, 0.12);\n  \n  /* Transitions */\n  --transition-fast: 0.15s ease;\n  --transition-normal: 0.3s ease;\n  --transition-slow: 0.5s ease;\n  \n  /* Z-index */\n  --z-dropdown: 1000;\n  --z-modal: 1050;\n  --z-tooltip: 1070;\n}\n\n/* Dark Theme Variables */\n[data-theme=\"dark\"] {\n  --color-text: #ffffff;\n  --color-text-muted: #a0a0a0;\n  --color-background: #1a1a1a;\n  --color-surface: #2a2a2a;\n  --color-border: #404040;\n}","size_bytes":1630},"src/types/index.ts":{"content":"// Global type definitions for Finiş Bankası\nexport interface User {\n  uid: string\n  email: string\n  displayName?: string\n  phoneNumber?: string\n  photoURL?: string\n}\n\nexport interface UserData {\n  name: string\n  email: string\n  phoneNumber?: string\n  address?: string\n  bankAccountNumber?: string\n  balance?: number\n  creditScore?: number\n  createdAt: Date\n  updatedAt: Date\n}\n\nexport interface CreditApplication {\n  id?: string\n  userId: string\n  amount: number\n  term: number\n  monthlyPayment: number\n  totalPayment: number\n  totalInterest: number\n  status: 'pending' | 'approved' | 'rejected' | 'processing'\n  applicationDate: Date\n  decision?: CreditDecision\n}\n\nexport interface CreditDecision {\n  approved: boolean\n  riskScore: number\n  decisionReason: string\n  recommendedAmount: number\n  conditions: string[]\n  factors: string[]\n  timestamp: string\n}\n\nexport interface ActiveCredit {\n  id?: string\n  userId: string\n  amount: number\n  term: number\n  monthlyPayment: number\n  remainingAmount: number\n  remainingMonths: number\n  startDate: Date\n  endDate: Date\n  status: 'active' | 'completed' | 'defaulted'\n}\n\nexport interface APIResponse<T> {\n  success: boolean\n  data?: T\n  error?: string\n  message?: string\n}\n\nexport interface Theme {\n  name: 'light' | 'dark'\n  colors: {\n    primary: string\n    secondary: string\n    background: string\n    surface: string\n    text: string\n    border: string\n  }\n}","size_bytes":1409},"src/utils/constants.ts":{"content":"// Application constants\nexport const CONSTANTS = {\n  // Interest rates\n  INTEREST: {\n    BASE_RATE: 4.09, // %4.09 base monthly rate\n    KKDF_RATE: 0.15, // %15 Resource Utilization Support Fund\n    BSMV_RATE: 0.15, // %15 Banking and Insurance Transactions Tax\n  },\n\n  // Credit limits\n  CREDIT: {\n    MIN_AMOUNT: 1000,\n    MAX_AMOUNT: 1000000,\n    MIN_TERM: 3,\n    MAX_TERM: 240,\n  },\n\n  // UI Constants\n  UI: {\n    ANIMATION_DURATION: 300,\n    DEBOUNCE_DELAY: 500,\n    MAX_RETRIES: 3,\n  },\n\n  // API URLs\n  API: {\n    BASE_URL: 'https://us-central1-finisbank.cloudfunctions.net',\n    ENDPOINTS: {\n      EVALUATE_CREDIT: '/evaluate_credit',\n      HEALTH_CHECK: '/health_check',\n      SYSTEM_INFO: '/system_info',\n    }\n  },\n\n  // Firebase Collections\n  COLLECTIONS: {\n    USERS: 'users',\n    CREDIT_APPLICATIONS: 'creditApplications',\n    ACTIVE_CREDITS: 'activeCredits',\n    USER_PROFILES: 'userProfiles',\n  },\n\n  // Messages\n  MESSAGES: {\n    SUCCESS: {\n      REGISTRATION: 'Hesabınız başarıyla oluşturuldu!',\n      LOGIN: 'Giriş başarılı!',\n      CREDIT_APPROVED: 'Krediniz onaylandı!',\n      BALANCE_UPDATED: 'Hesap bakiyeniz güncellendi!',\n    },\n    ERROR: {\n      NETWORK: 'Bağlantı hatası. Lütfen tekrar deneyiniz.',\n      AUTH_FAILED: 'Giriş bilgileri hatalı.',\n      INSUFFICIENT_DATA: 'Eksik bilgi. Lütfen tüm alanları doldurunuz.',\n      CREDIT_REJECTED: 'Kredi başvurunuz reddedildi.',\n      UNKNOWN: 'Beklenmeyen bir hata oluştu.',\n    }\n  }\n}","size_bytes":1482},"src/utils/dataValidation.ts":{"content":"// Frontend data validation utilities\nimport { CONSTANTS } from './constants'\n\nexport interface ValidationResult {\n  isValid: boolean\n  errors: string[]\n  sanitizedData?: any\n}\n\nexport class DataValidator {\n  \n  static validateCreditApplication(data: any): ValidationResult {\n    const errors: string[] = []\n    const sanitizedData: any = {}\n    \n    // Amount validation\n    const amount = parseFloat(data.amount)\n    if (isNaN(amount)) {\n      errors.push('Kredi tutarı geçerli bir sayı olmalıdır')\n    } else if (amount < CONSTANTS.CREDIT.MIN_AMOUNT) {\n      errors.push(`Minimum kredi tutarı ${CONSTANTS.CREDIT.MIN_AMOUNT.toLocaleString('tr-TR')} TL olmalıdır`)\n    } else if (amount > CONSTANTS.CREDIT.MAX_AMOUNT) {\n      errors.push(`Maksimum kredi tutarı ${CONSTANTS.CREDIT.MAX_AMOUNT.toLocaleString('tr-TR')} TL olmalıdır`)\n    } else {\n      sanitizedData.amount = amount\n    }\n    \n    // Term validation\n    const term = parseInt(data.term)\n    if (isNaN(term)) {\n      errors.push('Vade geçerli bir sayı olmalıdır')\n    } else if (term < CONSTANTS.CREDIT.MIN_TERM) {\n      errors.push(`Minimum vade ${CONSTANTS.CREDIT.MIN_TERM} ay olmalıdır`)\n    } else if (term > CONSTANTS.CREDIT.MAX_TERM) {\n      errors.push(`Maksimum vade ${CONSTANTS.CREDIT.MAX_TERM} ay olmalıdır`)\n    } else {\n      sanitizedData.term = term\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors,\n      sanitizedData: errors.length === 0 ? sanitizedData : undefined\n    }\n  }\n  \n  static validateUserRegistration(data: any): ValidationResult {\n    const errors: string[] = []\n    const sanitizedData: any = {}\n    \n    // Name validation\n    const name = data.name?.trim()\n    if (!name || name.length < 2) {\n      errors.push('Ad en az 2 karakter olmalıdır')\n    } else if (name.length > 50) {\n      errors.push('Ad en fazla 50 karakter olmalıdır')\n    } else if (!/^[a-zA-ZğüşöçıĞÜŞÖÇİ\\s]+$/.test(name)) {\n      errors.push('Ad sadece harf ve boşluk içerebilir')\n    } else {\n      sanitizedData.name = name\n    }\n    \n    // Email validation\n    const email = data.email?.toLowerCase().trim()\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n    if (!email) {\n      errors.push('E-posta adresi gereklidir')\n    } else if (!emailRegex.test(email)) {\n      errors.push('Geçerli bir e-posta adresi giriniz')\n    } else {\n      sanitizedData.email = email\n    }\n    \n    // Password validation\n    if (data.password) {\n      const passwordValidation = this.validatePassword(data.password)\n      if (!passwordValidation.isValid) {\n        errors.push(...passwordValidation.errors)\n      }\n    }\n    \n    // Phone number validation (optional)\n    if (data.phoneNumber) {\n      const phone = data.phoneNumber.replace(/\\s+/g, '')\n      const phoneRegex = /^(\\+90|0)?[5][0-9]{9}$/\n      if (!phoneRegex.test(phone)) {\n        errors.push('Geçerli bir telefon numarası giriniz (05XX XXX XX XX)')\n      } else {\n        sanitizedData.phoneNumber = phone\n      }\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors,\n      sanitizedData: errors.length === 0 ? sanitizedData : undefined\n    }\n  }\n  \n  static validatePassword(password: string): ValidationResult {\n    const errors: string[] = []\n    \n    if (!password) {\n      errors.push('Şifre gereklidir')\n      return { isValid: false, errors }\n    }\n    \n    if (password.length < 8) {\n      errors.push('Şifre en az 8 karakter olmalıdır')\n    }\n    \n    if (!/(?=.*[a-z])/.test(password)) {\n      errors.push('Şifre en az bir küçük harf içermelidir')\n    }\n    \n    if (!/(?=.*[A-Z])/.test(password)) {\n      errors.push('Şifre en az bir büyük harf içermelidir')\n    }\n    \n    if (!/(?=.*\\d)/.test(password)) {\n      errors.push('Şifre en az bir rakam içermelidir')\n    }\n    \n    if (!/(?=.*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?])/.test(password)) {\n      errors.push('Şifre en az bir özel karakter içermelidir')\n    }\n    \n    // Common passwords check\n    const commonPasswords = [\n      '12345678', 'password', 'qwerty123', 'admin123', \n      'password123', '123456789', 'welcome123'\n    ]\n    \n    if (commonPasswords.includes(password.toLowerCase())) {\n      errors.push('Bu şifre çok yaygın kullanılmaktadır, daha güvenli bir şifre seçiniz')\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    }\n  }\n  \n  static sanitizeHtml(input: string): string {\n    // Basic HTML sanitization\n    return input\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&#x27;')\n      .replace(/\\//g, '&#x2F;')\n  }\n  \n  static validateBankingData(data: any): ValidationResult {\n    const errors: string[] = []\n    const sanitizedData: any = {}\n    \n    // Account number validation (Turkish IBAN or account number format)\n    if (data.accountNumber) {\n      const accountNumber = data.accountNumber.replace(/\\s+/g, '')\n      if (!/^(TR\\d{24}|\\d{4}-\\d{6})$/.test(accountNumber)) {\n        errors.push('Geçerli bir hesap numarası giriniz (IBAN veya XXXX-XXXXXX formatında)')\n      } else {\n        sanitizedData.accountNumber = accountNumber\n      }\n    }\n    \n    // Balance validation\n    if (data.balance !== undefined) {\n      const balance = parseFloat(data.balance)\n      if (isNaN(balance) || balance < 0) {\n        errors.push('Bakiye sıfır veya pozitif bir değer olmalıdır')\n      } else {\n        sanitizedData.balance = balance\n      }\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors,\n      sanitizedData: errors.length === 0 ? sanitizedData : undefined\n    }\n  }\n}","size_bytes":5649},"src/utils/errorHandler.ts":{"content":"// Centralized error handling\nimport { CONSTANTS } from './constants'\n\nexport interface AppError {\n  code: string\n  message: string\n  details?: any\n  timestamp: Date\n}\n\nexport class ErrorHandler {\n  static createError(code: string, message: string, details?: any): AppError {\n    return {\n      code,\n      message,\n      details,\n      timestamp: new Date()\n    }\n  }\n\n  static handleFirebaseError(error: any): AppError {\n    const { code, message } = error\n\n    switch (code) {\n      case 'auth/user-not-found':\n        return this.createError('USER_NOT_FOUND', 'Kullanıcı bulunamadı')\n      case 'auth/wrong-password':\n        return this.createError('WRONG_PASSWORD', 'Şifre hatalı')\n      case 'auth/email-already-in-use':\n        return this.createError('EMAIL_IN_USE', 'Bu e-posta adresi zaten kullanımda')\n      case 'auth/weak-password':\n        return this.createError('WEAK_PASSWORD', 'Şifre çok zayıf')\n      case 'auth/invalid-email':\n        return this.createError('INVALID_EMAIL', 'Geçersiz e-posta adresi')\n      case 'permission-denied':\n        return this.createError('PERMISSION_DENIED', 'Bu işlem için yetkiniz yok')\n      case 'unavailable':\n        return this.createError('SERVICE_UNAVAILABLE', 'Servis şu anda kullanılamıyor')\n      default:\n        return this.createError('UNKNOWN_ERROR', message || CONSTANTS.MESSAGES.ERROR.UNKNOWN)\n    }\n  }\n\n  static handleNetworkError(error: any): AppError {\n    if (!navigator.onLine) {\n      return this.createError('OFFLINE', 'İnternet bağlantınızı kontrol ediniz')\n    }\n    \n    if (error.name === 'AbortError') {\n      return this.createError('REQUEST_TIMEOUT', 'İstek zaman aşımına uğradı')\n    }\n\n    return this.createError('NETWORK_ERROR', CONSTANTS.MESSAGES.ERROR.NETWORK)\n  }\n\n  static logError(error: AppError, context?: string): void {\n    console.error(`[${error.timestamp.toISOString()}] ${context || 'APP_ERROR'}:`, {\n      code: error.code,\n      message: error.message,\n      details: error.details\n    })\n  }\n}","size_bytes":2022},"src/utils/lazyLoading.ts":{"content":"// Advanced lazy loading utilities\nimport { lazy, LazyExoticComponent, ComponentType } from 'react'\n\n/**\n * Enhanced lazy loading with retry mechanism\n */\nexport function lazyWithRetry<T extends ComponentType<any>>(\n  componentImport: () => Promise<{ default: T }>,\n  componentName: string = 'Component'\n): LazyExoticComponent<T> {\n  return lazy(async () => {\n    let retryCount = 0\n    const maxRetries = 3\n    \n    while (retryCount < maxRetries) {\n      try {\n        return await componentImport()\n      } catch (error) {\n        retryCount++\n        console.warn(`Failed to load ${componentName}, attempt ${retryCount}/${maxRetries}`)\n        \n        if (retryCount >= maxRetries) {\n          console.error(`Failed to load ${componentName} after ${maxRetries} attempts`)\n          throw error\n        }\n        \n        // Wait before retry (exponential backoff)\n        await new Promise(resolve => \n          setTimeout(resolve, Math.pow(2, retryCount) * 1000)\n        )\n      }\n    }\n    \n    throw new Error(`Failed to load ${componentName}`)\n  })\n}\n\n/**\n * Preload components for better UX\n */\nexport function preloadComponent(componentImport: () => Promise<any>): void {\n  if (typeof window !== 'undefined') {\n    // Only preload in browser environment\n    requestIdleCallback(() => {\n      componentImport().catch(() => {\n        // Silently handle preload failures\n      })\n    })\n  }\n}\n\n/**\n * Enhanced lazy loading for routes with preloading\n */\nexport function createLazyRoute<T extends ComponentType<any>>(\n  componentImport: () => Promise<{ default: T }>,\n  routeName: string\n) {\n  // Preload on mouse hover (for navigation links)\n  const preload = () => preloadComponent(componentImport)\n  \n  // Create lazy component with retry\n  const LazyComponent = lazyWithRetry(componentImport, routeName)\n  \n  return {\n    Component: LazyComponent,\n    preload\n  }\n}\n\n// Route definitions with lazy loading\nexport const LazyRoutes = {\n  Home: createLazyRoute(() => import('../pages/Home'), 'Home'),\n  Login: createLazyRoute(() => import('../pages/Login'), 'Login'),\n  Register: createLazyRoute(() => import('../pages/Register'), 'Register'),\n  Account: createLazyRoute(() => import('../pages/Account'), 'Account'),\n  CreditApplication: createLazyRoute(() => import('../pages/CreditApplication'), 'CreditApplication')\n}","size_bytes":2328},"src/utils/performanceMonitor.ts":{"content":"// Performance monitoring utilities\nexport class PerformanceMonitor {\n  private static measurements: Map<string, number> = new Map()\n  \n  /**\n   * Start measuring performance for a specific operation\n   */\n  static startMeasurement(name: string): void {\n    if (typeof window !== 'undefined' && window.performance) {\n      this.measurements.set(name, window.performance.now())\n    }\n  }\n  \n  /**\n   * End measurement and log results\n   */\n  static endMeasurement(name: string): number {\n    if (typeof window !== 'undefined' && window.performance) {\n      const startTime = this.measurements.get(name)\n      if (startTime) {\n        const duration = window.performance.now() - startTime\n        this.measurements.delete(name)\n        \n        // Log to console in development\n        if (import.meta.env.DEV) {\n          console.log(`⏱️ ${name}: ${duration.toFixed(2)}ms`)\n        }\n        \n        // Send to analytics in production\n        this.reportToAnalytics(name, duration)\n        \n        return duration\n      }\n    }\n    return 0\n  }\n  \n  /**\n   * Monitor React component render time\n   */\n  static measureComponent(componentName: string) {\n    return {\n      onRenderStart: () => this.startMeasurement(`render-${componentName}`),\n      onRenderEnd: () => this.endMeasurement(`render-${componentName}`)\n    }\n  }\n  \n  /**\n   * Monitor API call performance\n   */\n  static measureApiCall(endpoint: string) {\n    return {\n      onRequestStart: () => this.startMeasurement(`api-${endpoint}`),\n      onRequestEnd: () => this.endMeasurement(`api-${endpoint}`)\n    }\n  }\n  \n  /**\n   * Get Core Web Vitals\n   */\n  static getCoreWebVitals(): Promise<any> {\n    return new Promise((resolve) => {\n      if (typeof window === 'undefined') {\n        resolve({})\n        return\n      }\n      \n      const vitals: any = {}\n      \n      // Largest Contentful Paint\n      new PerformanceObserver((list) => {\n        const entries = list.getEntries()\n        const lastEntry = entries[entries.length - 1]\n        vitals.lcp = lastEntry.startTime\n      }).observe({ entryTypes: ['largest-contentful-paint'] })\n      \n      // First Input Delay\n      new PerformanceObserver((list) => {\n        const entries = list.getEntries()\n        entries.forEach((entry) => {\n          vitals.fid = (entry as any).processingStart - entry.startTime\n        })\n      }).observe({ entryTypes: ['first-input'] })\n      \n      // Cumulative Layout Shift\n      let clsValue = 0\n      new PerformanceObserver((list) => {\n        const entries = list.getEntries()\n        entries.forEach((entry) => {\n          if (!(entry as any).hadRecentInput) {\n            clsValue += (entry as any).value\n          }\n        })\n        vitals.cls = clsValue\n      }).observe({ entryTypes: ['layout-shift'] })\n      \n      // Return vitals after a delay to collect data\n      setTimeout(() => resolve(vitals), 3000)\n    })\n  }\n  \n  /**\n   * Monitor bundle loading performance\n   */\n  static monitorBundleLoading(): void {\n    if (typeof window === 'undefined') return\n    \n    window.addEventListener('load', () => {\n      const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming\n      \n      const metrics = {\n        ttfb: navigation.responseStart - navigation.requestStart,\n        domLoad: navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart,\n        windowLoad: navigation.loadEventEnd - navigation.loadEventStart,\n        totalLoad: navigation.loadEventEnd - navigation.fetchStart\n      }\n      \n      if (import.meta.env.DEV) {\n        console.table(metrics)\n      }\n      \n      this.reportToAnalytics('page-load', metrics)\n    })\n  }\n  \n  /**\n   * Report metrics to analytics (placeholder)\n   */\n  private static reportToAnalytics(event: string, data: any): void {\n    // In production, send to your analytics service\n    if (import.meta.env.PROD) {\n      // Example: analytics.track(event, data)\n      console.log('Analytics:', event, data)\n    }\n  }\n}","size_bytes":3991},"src/utils/securityHeaders.ts":{"content":"// Security headers and CSP configuration\nexport const SECURITY_HEADERS = {\n  // Content Security Policy\n  CSP: {\n    directives: [\n      \"default-src 'self'\",\n      \"script-src 'self' 'unsafe-inline' https://www.gstatic.com https://www.googleapis.com\",\n      \"style-src 'self' 'unsafe-inline' https://fonts.googleapis.com\",\n      \"font-src 'self' https://fonts.gstatic.com\",\n      \"img-src 'self' data: https:\",\n      \"connect-src 'self' https://finisbank.firebaseapp.com https://firestore.googleapis.com https://us-central1-finisbank.cloudfunctions.net\",\n      \"frame-ancestors 'none'\",\n      \"base-uri 'self'\",\n      \"form-action 'self'\"\n    ].join('; ')\n  },\n  \n  // Additional security headers\n  ADDITIONAL_HEADERS: {\n    'X-Content-Type-Options': 'nosniff',\n    'X-Frame-Options': 'DENY',\n    'X-XSS-Protection': '1; mode=block',\n    'Strict-Transport-Security': 'max-age=31536000; includeSubDomains; preload',\n    'Referrer-Policy': 'strict-origin-when-cross-origin',\n    'Permissions-Policy': [\n      'camera=()',\n      'microphone=()',\n      'geolocation=()',\n      'payment=(self)'\n    ].join(', ')\n  }\n}\n\n// Apply security headers to requests\nexport function applySecurityHeaders(headers: any = {}): any {\n  return {\n    ...headers,\n    'Content-Security-Policy': SECURITY_HEADERS.CSP.directives,\n    ...SECURITY_HEADERS.ADDITIONAL_HEADERS\n  }\n}\n\n// Validate origin for CORS\nexport function validateOrigin(origin: string): boolean {\n  const allowedOrigins = [\n    'https://finisbank.web.app',\n    'https://finisbank.firebaseapp.com',\n    'http://localhost:5000', // Development only\n    'https://localhost:5000'\n  ]\n  \n  return allowedOrigins.includes(origin)\n}","size_bytes":1672},"src/utils/validators.ts":{"content":"// Input validation utilities\nexport const validators = {\n  email: (email: string): boolean => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n    return emailRegex.test(email)\n  },\n\n  password: (password: string): { isValid: boolean; message?: string } => {\n    if (password.length < 6) {\n      return { isValid: false, message: 'Şifre en az 6 karakter olmalıdır' }\n    }\n    if (!/(?=.*[a-z])(?=.*[A-Z])/.test(password)) {\n      return { isValid: false, message: 'Şifre büyük ve küçük harf içermelidir' }\n    }\n    if (!/(?=.*\\d)/.test(password)) {\n      return { isValid: false, message: 'Şifre en az bir rakam içermelidir' }\n    }\n    return { isValid: true }\n  },\n\n  phoneNumber: (phone: string): boolean => {\n    const phoneRegex = /^(\\+90|0)?[5][0-9]{9}$/\n    return phoneRegex.test(phone.replace(/\\s+/g, ''))\n  },\n\n  creditAmount: (amount: string): { isValid: boolean; message?: string } => {\n    const numAmount = parseFloat(amount)\n    if (isNaN(numAmount)) {\n      return { isValid: false, message: 'Geçerli bir tutar giriniz' }\n    }\n    if (numAmount < 1000) {\n      return { isValid: false, message: 'Minimum kredi tutarı 1.000 TL olmalıdır' }\n    }\n    if (numAmount > 1000000) {\n      return { isValid: false, message: 'Maksimum kredi tutarı 1.000.000 TL olmalıdır' }\n    }\n    return { isValid: true }\n  },\n\n  creditTerm: (term: string): { isValid: boolean; message?: string } => {\n    const numTerm = parseInt(term)\n    if (isNaN(numTerm)) {\n      return { isValid: false, message: 'Geçerli bir vade giriniz' }\n    }\n    if (numTerm < 3) {\n      return { isValid: false, message: 'Minimum vade 3 ay olmalıdır' }\n    }\n    if (numTerm > 240) {\n      return { isValid: false, message: 'Maksimum vade 240 ay olmalıdır' }\n    }\n    return { isValid: true }\n  }\n}","size_bytes":1806},"functions/models/advanced_scoring.py":{"content":"from typing import Dict, Any, List, Literal\nimport datetime\n\nDecision = Literal[\"APPROVE\", \"CONDITIONAL\", \"REJECT\"]\n\ndef clamp(x: float, lo: float, hi: float) -> float:\n    return max(lo, min(hi, x))\n\ndef annuity_payment(P: float, r: float, n: int) -> float:\n    if r <= 0 or n <= 0:\n        return P / max(n, 1)\n    a = (r * (1 + r) ** n) / ((1 + r) ** n - 1)\n    return P * a\n\nclass AdvancedCreditScoringEngine:\n    \n    def __init__(self):\n        self.annual_rate = 4.09\n        self.monthly_rate = 4.09 / 100 / 12  # 0.003408\n        \n        self.weights = {\n            'kkb_credit_history': 25,\n            'dti_ratio': 20,\n            'income_adequacy': 15,\n            'credit_utilization': 8,\n            'liquidity': 10,\n            'collateral_assets': 8,\n            'stability': 7,\n            'banking_relationship': 5,\n            'max_penalty': 20\n        }\n        \n        self.approve_threshold = 75\n        self.conditional_threshold = 60\n    \n    def score_application(self, data: Dict[str, Any]) -> Dict[str, Any]:\n        \n        # Extract and organize input data\n        loan_amount = float(data.get('loan_amount', 0))\n        loan_term_months = int(data.get('loan_term_months', 12))\n        \n        # Financial data\n        monthly_income = float(data.get('monthly_income', 0))\n        additional_income = float(data.get('additional_income', 0))\n        expenses = float(data.get('expenses', 0))\n        rent_payment = float(data.get('rent_payment', 0))\n        existing_loans = float(data.get('existing_loans', 0))\n        credit_card_debt = float(data.get('credit_card_debt', 0))\n        credit_card_limit = float(data.get('credit_card_limit', 0))\n        bank_balance = float(data.get('bank_balance', 0))\n        investments = float(data.get('investments', 0))\n        real_estate_value = float(data.get('real_estate_value', 0))\n        \n        # Personal data\n        age = int(data.get('age', 30))\n        employment_type = str(data.get('employment_type', '')).lower()\n        work_experience = float(data.get('work_experience', 0))\n        kkb_score = float(data.get('kkb_score', 500))\n        payment_delays = int(data.get('payment_delays', 0))\n        home_ownership = str(data.get('home_ownership', '')).lower()\n        residence_duration = float(data.get('residence_duration', 0))\n        \n        # Banking relationship\n        existing_relationship = float(data.get('existing_relationship', 0))\n        total_products = int(data.get('total_banking_products', 0))\n        customer_segment = str(data.get('customer_segment', 'mass')).lower()\n        \n        # Risk factors\n        defaulted_loans = bool(data.get('defaulted_loans', False))\n        legal_issues = bool(data.get('legal_issues', False))\n        has_insurance = bool(data.get('has_insurance', False))\n        job_stability = str(data.get('job_stability', 'stable')).lower()\n        \n        # Calculate derived variables\n        net_income = max(0, monthly_income + additional_income - expenses - rent_payment)\n        \n        # Calculate current debt payments\n        dti = data.get('debt_to_income_ratio')\n        if dti is not None:\n            current_monthly_debt = float(dti) * net_income if net_income > 0 else 0.0\n            dti_note = \"DTI girdiden alındı\"\n        else:\n            # Heuristic calculation\n            cc_min = 0.04 * credit_card_debt  # 4% minimum payment\n            loan_payment = annuity_payment(existing_loans, self.monthly_rate, 24) if existing_loans > 0 else 0.0\n            current_monthly_debt = cc_min + loan_payment\n            dti_note = \"DTI hesaplandı (CC=%4, krediler=24ay)\"\n        \n        # New loan installment\n        new_installment = annuity_payment(loan_amount, self.monthly_rate, loan_term_months)\n        \n        # New DTI ratio\n        new_dti = (current_monthly_debt + new_installment) / net_income if net_income > 0 else 1.0\n        \n        # Other ratios\n        credit_util = credit_card_debt / credit_card_limit if credit_card_limit > 0 else 0.0\n        liquidity_ratio = (bank_balance + 0.8 * investments) / loan_amount if loan_amount > 0 else 0.0\n        collateral_factor = (real_estate_value / loan_amount) if (loan_amount > 0 and home_ownership == \"owner\") else 0.0\n        \n        # Calculate individual scores (0-1 scale)\n        scores = self._calculate_component_scores(\n            kkb_score, new_dti, new_installment, net_income, credit_util,\n            liquidity_ratio, collateral_factor, work_experience, residence_duration,\n            employment_type, job_stability, existing_relationship, total_products,\n            customer_segment, payment_delays, defaulted_loans, legal_issues\n        )\n        \n        # Apply weights and calculate total score\n        total_score = 0.0\n        contributions = {}\n        \n        for component, weight in self.weights.items():\n            if component == 'max_penalty':\n                continue\n            component_score = scores.get(component, 0.0)\n            contribution = clamp(component_score, 0.0, 1.0) * weight\n            total_score += contribution\n            contributions[component] = contribution\n        \n        # Apply penalties\n        penalty_score = self._calculate_penalties(payment_delays, defaulted_loans, legal_issues)\n        penalty_points = penalty_score * self.weights['max_penalty']\n        total_score = clamp(total_score - penalty_points, 0.0, 100.0)\n        \n        # Policy caps for high-risk cases\n        hard_block = False\n        policy_reasons = []\n        if defaulted_loans or legal_issues:\n            total_score = min(total_score, 60.0)\n            hard_block = True\n            if defaulted_loans:\n                policy_reasons.append(\"Geçmiş temerrüt\")\n            if legal_issues:\n                policy_reasons.append(\"Hukuki ihtilaf\")\n        \n        # Make decision\n        if total_score >= self.approve_threshold:\n            decision: Decision = \"APPROVE\"\n        elif total_score >= self.conditional_threshold:\n            decision = \"CONDITIONAL\" \n        else:\n            decision = \"REJECT\"\n        \n        # Calculate limits and recommendations\n        limits = self._calculate_limits(net_income, loan_amount, loan_term_months, new_dti, decision)\n        \n        # Generate explanations\n        explanations = self._generate_explanations(scores, contributions, penalty_points)\n        \n        return {\n            \"score\": round(total_score, 2),\n            \"decision\": decision,\n            \"limits\": limits,\n            \"assumptions\": {\n                \"monthly_interest_rate_used\": self.monthly_rate,\n                \"annual_rate\": self.annual_rate,\n                \"notes\": [\n                    dti_note,\n                    \"Annüite formülü kullanıldı\",\n                    f\"Sabit faiz oranı: %{self.annual_rate}\",\n                    \"Yatırımlar %80 ağırlıkla likidite hesabında\"\n                ]\n            },\n            \"explainability\": explanations,\n            \"calculations\": {\n                \"net_income\": round(net_income, 2),\n                \"current_monthly_debt_payment\": round(current_monthly_debt, 2),\n                \"new_installment\": round(new_installment, 2),\n                \"new_dti\": round(new_dti, 4),\n                \"credit_utilization\": round(credit_util, 4),\n                \"liquidity_ratio\": round(liquidity_ratio, 4),\n                \"collateral_factor\": round(collateral_factor, 4)\n            },\n            \"policy_flags\": {\n                \"hard_block\": hard_block,\n                \"reasons\": policy_reasons\n            },\n            \"timestamp\": datetime.datetime.now().isoformat(),\n            \"engine_version\": \"Finiş Bankası Advanced Scoring v3.0 (Fixed 4.09%)\"\n        }\n    \n    def _calculate_component_scores(self, kkb_score: float, new_dti: float, new_installment: float,\n                                  net_income: float, credit_util: float, liquidity_ratio: float,\n                                  collateral_factor: float, work_experience: float, residence_duration: float,\n                                  employment_type: str, job_stability: str, existing_relationship: float,\n                                  total_products: int, customer_segment: str, payment_delays: int,\n                                  defaulted_loans: bool, legal_issues: bool) -> Dict[str, float]:\n        \"\"\"Calculate individual component scores\"\"\"\n        \n        # KKB Score (300-900 -> 0-1)\n        kkb_norm = clamp((kkb_score - 300.0) / 600.0, 0.0, 1.0)\n        \n        # DTI Score (0.2 excellent, 0.6 poor)\n        if new_dti <= 0.2:\n            dti_score = 1.0\n        elif new_dti >= 0.6:\n            dti_score = 0.0\n        else:\n            dti_score = 1.0 - (new_dti - 0.2) / (0.6 - 0.2)\n        \n        # Income adequacy (installment/income ratio)\n        payment_ratio = new_installment / net_income if net_income > 0 else 1.0\n        if payment_ratio <= 0.3:\n            income_score = 1.0\n        elif payment_ratio >= 0.7:\n            income_score = 0.0\n        else:\n            income_score = 1.0 - (payment_ratio - 0.3) / (0.7 - 0.3)\n        \n        # Credit utilization (0 excellent, 1 poor)\n        credit_util_score = 1.0 - clamp(credit_util, 0.0, 1.0)\n        \n        # Liquidity score (0-2.0 range, saturated)\n        liquidity_score = clamp(liquidity_ratio / 2.0, 0.0, 1.0)\n        \n        # Collateral score (0-3.0 range, saturated)\n        collateral_score = clamp(collateral_factor / 3.0, 0.0, 1.0)\n        \n        # Stability score\n        stability_base = 0.0\n        if job_stability == \"stable\":\n            stability_base += 0.6\n        stability_base += clamp(work_experience / 10.0, 0.0, 0.3)\n        stability_base += clamp(residence_duration / 120.0, 0.0, 0.1)\n        if employment_type in (\"kamu\", \"public\"):\n            stability_base += 0.2\n        stability_score = clamp(stability_base, 0.0, 1.0)\n        \n        # Banking relationship score\n        rel_score = clamp(existing_relationship / 60.0, 0.0, 0.6)\n        rel_score += clamp(total_products / 6.0, 0.0, 0.3)\n        if customer_segment == \"private\":\n            rel_score += 0.1\n        relationship_score = clamp(rel_score, 0.0, 1.0)\n        \n        return {\n            'kkb_credit_history': kkb_norm,\n            'dti_ratio': dti_score,\n            'income_adequacy': income_score,\n            'credit_utilization': credit_util_score,\n            'liquidity': liquidity_score,\n            'collateral_assets': collateral_score,\n            'stability': stability_score,\n            'banking_relationship': relationship_score\n        }\n    \n    def _calculate_penalties(self, payment_delays: int, defaulted_loans: bool, legal_issues: bool) -> float:\n        \"\"\"Calculate penalty score (0-1 scale)\"\"\"\n        penalty = 0.0\n        if defaulted_loans:\n            penalty += 0.35\n        if legal_issues:\n            penalty += 0.35\n        penalty += clamp(payment_delays / 6.0, 0.0, 0.2)  # Max 6 delays = 0.2 penalty\n        \n        return clamp(penalty, 0.0, 1.0)\n    \n    def _calculate_limits(self, net_income: float, loan_amount: float, loan_term_months: int,\n                         new_dti: float, decision: Decision) -> Dict[str, Any]:\n        \"\"\"Calculate recommended limits and terms\"\"\"\n        \n        # Target 35% payment ratio for safe lending\n        target_payment_ratio = 0.35\n        \n        if net_income > 0 and self.monthly_rate > 0:\n            target_installment = net_income * target_payment_ratio\n            \n            # Find maximum amount for target installment\n            max_amount = 0.0\n            step = max(loan_amount / 50.0, 1000.0)\n            test_amount = step\n            \n            while test_amount <= loan_amount * 1.5:\n                payment = annuity_payment(test_amount, self.monthly_rate, loan_term_months)\n                if payment <= target_installment:\n                    max_amount = test_amount\n                    test_amount += step\n                else:\n                    break\n            \n            max_approved_amount = round(max_amount, -3)  # Round to nearest 1000\n        else:\n            max_approved_amount = 0.0\n        \n        # Recommend term adjustment for conditional approvals\n        recommended_term = loan_term_months\n        if decision == \"CONDITIONAL\" and new_dti > 0.45:\n            # Extend term to reduce DTI\n            recommended_term = min(loan_term_months + 12, 84)\n        \n        return {\n            \"max_approved_amount\": max_approved_amount,\n            \"recommended_term_months\": recommended_term\n        }\n    \n    def _generate_explanations(self, scores: Dict[str, float], contributions: Dict[str, float],\n                              penalty_points: float) -> Dict[str, Any]:\n        \"\"\"Generate human-readable explanations\"\"\"\n        \n        positives = []\n        negatives = []\n        \n        # Positive factors\n        if scores.get('kkb_credit_history', 0) >= 0.7:\n            positives.append(\"Yüksek KKB skoru - güvenilir kredi geçmişi\")\n        if scores.get('dti_ratio', 0) >= 0.7:\n            positives.append(\"Sürdürülebilir borç/gelir oranı\")\n        if scores.get('credit_utilization', 0) >= 0.7:\n            positives.append(\"Düşük kredi kartı kullanım oranı - disiplinli harcama\")\n        if scores.get('liquidity', 0) >= 0.6:\n            positives.append(\"Güçlü nakit rezervi ve yatırım portföyü\")\n        if scores.get('collateral_assets', 0) >= 0.4:\n            positives.append(\"Değerli varlık ve teminat desteği\")\n        if scores.get('stability', 0) >= 0.6:\n            positives.append(\"İstikrarlı iş ve ikamet durumu\")\n        if scores.get('banking_relationship', 0) >= 0.5:\n            positives.append(\"Uzun vadeli banka müşteri ilişkisi\")\n        \n        # Negative factors\n        if scores.get('kkb_credit_history', 0) < 0.4:\n            negatives.append(\"Düşük KKB skoru - kredi geçmişi risk taşıyor\")\n        if scores.get('dti_ratio', 0) < 0.4:\n            negatives.append(\"Yüksek toplam borç yükü - sürdürülebilirlik riski\")\n        if scores.get('credit_utilization', 0) < 0.4:\n            negatives.append(\"Yüksek kredi kartı kullanım oranı\")\n        if scores.get('liquidity', 0) < 0.4:\n            negatives.append(\"Yetersiz nakit rezervi\")\n        if scores.get('stability', 0) < 0.4:\n            negatives.append(\"İş veya ikamet istikrarsızlığı\")\n        \n        if penalty_points > 0:\n            negatives.append(f\"Risk cezası: {penalty_points:.1f} puan\")\n        \n        # Top 5 features by contribution\n        top_features = sorted(contributions.items(), key=lambda x: x[1], reverse=True)[:5]\n        \n        feature_names = {\n            'kkb_credit_history': 'KKB Kredi Geçmişi',\n            'dti_ratio': 'Borç/Gelir Oranı',\n            'income_adequacy': 'Gelir Yeterliliği',\n            'credit_utilization': 'Kredi Kartı Kullanımı',\n            'liquidity': 'Likidite Durumu',\n            'collateral_assets': 'Teminat Varlıkları',\n            'stability': 'İstikrar Faktörü',\n            'banking_relationship': 'Banka İlişkisi'\n        }\n        \n        top_five = []\n        for feature, contribution in top_features:\n            impact = \"HIGH\" if contribution >= 12 else \"MEDIUM\" if contribution >= 6 else \"LOW\"\n            direction = \"+\" if contribution > 0 else \"-\"\n            \n            top_five.append({\n                \"feature\": feature_names.get(feature, feature),\n                \"impact\": impact,\n                \"direction\": direction,\n                \"contribution\": round(contribution, 1),\n                \"reason\": f\"{contribution:.1f} puan katkı\"\n            })\n        \n        return {\n            \"positives\": positives,\n            \"negatives\": negatives,\n            \"top_five_features\": top_five\n        }","size_bytes":15837},"README.md":{"content":"# 🏦 Finiş Bankası\n\nModern ve güvenli Türkçe bankacılık uygulaması. React TypeScript, Firebase ve yapay zeka destekli kredi değerlendirme sistemi ile geliştirilmiştir.\n\n## 📋 İçindekiler\n\n- [Özellikler](#-özellikler)\n- [Teknolojiler](#-teknolojiler)\n- [Kurulum](#-kurulum)\n- [Kullanım](#-kullanım)\n- [Proje Yapısı](#-proje-yapısı)\n- [Kredi Sistemi](#-kredi-sistemi)\n- [Güvenlik](#-güvenlik)\n- [Katkıda Bulunma](#-katkıda-bulunma)\n\n## ✨ Özellikler\n\n### 🔐 Kullanıcı Yönetimi\n- **Güvenli Kayıt Sistemi**: Firebase Authentication ile e-posta doğrulama\n- **Giriş/Çıkış**: Otomatik oturum yönetimi ve güvenli çıkış\n- **Profil Yönetimi**: Kullanıcı bilgileri ve hesap ayarları\n\n### 🏧 Bankacılık İşlemleri\n- **Otomatik Hesap Oluşturma**: XXXX-XXXXXX formatında benzersiz hesap numarası\n- **Hesap Yönetimi**: Bakiye görüntüleme ve işlem geçmişi\n- **Türk Lirası Desteği**: Yerel para birimi ile işlemler\n\n### 🤖 AI Destekli Kredi Sistemi\n- **Yapay Zeka Karar Motoru**: Çok faktörlü risk değerlendirmesi\n- **Gerçek Zamanlı Hesaplama**: Anlık kredi limit belirleme\n- **Türk Bankacılık Standartları**: KKDF + BSMV vergi hesaplamaları\n- **%4.09 Sabit Faiz Oranı**: Şeffaf fiyatlandırma\n- **8 Kategori Değerlendirme**: Kapsamlı kredi analizi\n\n### 🎨 Kullanıcı Deneyimi\n- **Karanlık/Aydınlık Tema**: Otomatik tema değişimi\n- **Mobil Uyumlu**: Responsive tasarım\n- **Türkçe Arayüz**: Yerelleştirilmiş kullanıcı deneyimi\n- **Hızlı Yükleme**: Optimized performance ve lazy loading\n\n## 🛠 Teknolojiler\n\n### Frontend\n- **React 18** - Modern UI kütüphanesi\n- **TypeScript** - Tip güvenliği ve geliştirici deneyimi\n- **Vite** - Hızlı build tool ve dev server\n- **React Router DOM v7** - Client-side routing\n- **CSS Modules** - Merkezi stil yönetimi\n\n### Backend & Veritabanı\n- **Firebase Authentication** - Kullanıcı doğrulama\n- **Cloud Firestore** - NoSQL veritabanı\n- **FastAPI** - Python API servisi (AI karar motoru)\n- **Pandas** - Veri analizi ve risk hesaplamaları\n\n### Geliştirme Araçları\n- **ESLint** - Kod kalitesi\n- **TypeScript** - Statik tip kontrolü\n- **Git** - Versiyon kontrolü\n- **Replit** - Cloud development ortamı\n\n## 🚀 Kurulum\n\n### Ön Gereksinimler\n- Node.js 18+ \n- npm veya yarn\n- Firebase projesi\n\n### 1. Projeyi Klonlayın\n```bash\ngit clone <repo-url>\ncd finish-bankasi\n```\n\n### 2. Bağımlılıkları Yükleyin\n```bash\nnpm install\n```\n\n### 3. Firebase Yapılandırması\nFirebase Console'dan yeni proje oluşturun ve `src/config/firebase.ts` dosyasını güncelleyin:\n\n```typescript\nconst firebaseConfig = {\n  apiKey: \"your-api-key\",\n  authDomain: \"your-project.firebaseapp.com\",\n  projectId: \"your-project-id\",\n  // diğer config değerleri...\n};\n```\n\n### 4. Geliştirme Sunucusunu Başlatın\n```bash\nnpm run dev\n```\n\nUygulama http://localhost:5000 adresinde çalışacaktır.\n\n## 📱 Kullanım\n\n### 1. Hesap Oluşturma\n- Ana sayfadan \"Kayıt Ol\" seçeneğini tıklayın\n- Kişisel bilgilerinizi doldurun\n- E-posta doğrulaması yapın\n- Otomatik olarak banka hesabınız oluşturulur\n\n### 2. Giriş Yapma\n- \"Giriş Yap\" butonunu kullanın\n- E-posta ve şifrenizi girin\n- Ana dashboard'a yönlendirilirsiniz\n\n### 3. Kredi Başvurusu\n- \"Kredi Başvurusu\" sayfasına gidin\n- Gelir, gider ve kişisel bilgilerinizi doldurun\n- AI sistemi gerçek zamanlı olarak kredinizi değerlendirir\n- Kredi limitinizi ve koşullarınızı görüntüleyin\n\n## 📁 Proje Yapısı\n\n```\nsrc/\n├── components/          # Ortak UI bileşenleri\n│   ├── LazyComponents.tsx\n│   └── Navigation.tsx\n├── config/             # Yapılandırma dosyaları\n│   └── firebase.ts\n├── context/            # React Context'ler\n│   ├── AuthContext.tsx\n│   └── ThemeContext.tsx\n├── features/           # Feature-based organizasyon\n│   ├── auth/          # Kimlik doğrulama\n│   └── credit/        # Kredi sistemi\n├── hooks/             # Custom React hooks\n├── pages/             # Sayfa bileşenleri\n│   ├── Home.tsx\n│   ├── Login.tsx\n│   ├── Register.tsx\n│   ├── Account.tsx\n│   └── CreditApplication.tsx\n├── shared/            # Paylaşılan utilities\n│   ├── components/\n│   ├── hooks/\n│   ├── services/\n│   └── types/\n├── styles/            # CSS dosyaları\n│   ├── main.css      # Ana stil dosyası\n│   └── variables.css # CSS değişkenleri\n└── utils/             # Yardımcı fonksiyonlar\n```\n\n## 🎯 Kredi Sistemi\n\n### AI Karar Motoru\nKredi başvuruları 8 farklı kategoride değerlendirilir:\n\n1. **Gelir Durumu** (25%) - Aylık gelir analizi\n2. **Mevcut Borçlar** (20%) - DTI (Debt-to-Income) oranı\n3. **İstihdam Durumu** (15%) - İş güvencesi değerlendirmesi\n4. **Kredi Geçmişi** (15%) - Geçmiş ödeme performansı\n5. **Yaş Faktörü** (10%) - Yaş gruplarına göre risk\n6. **Konut Durumu** (8%) - Mülkiyet durumu\n7. **Eğitim Seviyesi** (5%) - Eğitim düzeyi\n8. **İkamet Süresi** (2%) - Adres istikrarı\n\n### Hesaplama Formülleri\n- **Temel Faiz**: %4.09 (sabit)\n- **KKDF**: %0.15 (Kaynak Kullanımını Destekleme Fonu)\n- **BSMV**: %0.10 (Banka ve Sigorta Muameleleri Vergisi)\n- **Toplam Maliyet**: Tüm vergiler dahil\n\n## 🔒 Güvenlik\n\n### Veri Koruma\n- Firebase Security Rules ile veri erişim kontrolü\n- Client-side validasyon ve sanitization\n- Güvenli form handling\n- XSS ve injection saldırılarına karşı korunma\n\n### Kimlik Doğrulama\n- Firebase Authentication ile güvenli giriş\n- E-posta doğrulama zorunluluğu\n- Şifre güçlülük kontrolleri\n- Oturum yönetimi ve güvenli çıkış\n\n## 🏗 Geliştirme\n\n### Build ve Deploy\n```bash\n# Production build\nnpm run build\n\n# Type checking\nnpm run type-check\n\n# Preview build\nnpm run preview\n```\n\n### Code Quality\n- TypeScript strict mode aktif\n- ESLint kuralları\n- Organized imports\n- Component composition patterns\n\n## 🤝 Katkıda Bulunma\n\n1. Fork yapın\n2. Feature branch oluşturun (`git checkout -b feature/yeni-ozellik`)\n3. Değişikliklerinizi commit edin (`git commit -am 'Yeni özellik: XYZ'`)\n4. Branch'inizi push edin (`git push origin feature/yeni-ozellik`)\n5. Pull Request oluşturun\n\n## 📄 Lisans\n\nBu proje ISC lisansı altında lisanslanmıştır.\n\n## 📞 İletişim\n\nSorularınız için GitHub Issues kullanabilirsiniz.\n\n---\n\n**Finiş Bankası** - Modern Türk Bankacılığının Geleceği 🚀","size_bytes":6513},"src/features/credit/components/CreditForm.tsx":{"content":"import { NumberInput } from '../../../components/NumberInput'\nimport { CREDIT_CONSTANTS } from '../constants'\n\ninterface CreditFormProps {\n  amount: string\n  term: string\n  onAmountChange: (value: string) => void\n  onTermChange: (value: string) => void\n  disabled?: boolean\n}\n\nexport function CreditForm({\n  amount,\n  term,\n  onAmountChange,\n  onTermChange,\n  disabled = false\n}: CreditFormProps) {\n  return (\n    <div style={{\n      display: 'grid',\n      gap: '20px',\n      marginBottom: '24px'\n    }}>\n      <NumberInput\n        label=\"Kredi Tutarı (TL)\"\n        value={amount}\n        onChange={onAmountChange}\n        placeholder=\"Kredi tutarını giriniz\"\n        min={CREDIT_CONSTANTS.MIN_LOAN_AMOUNT}\n        max={CREDIT_CONSTANTS.MAX_LOAN_AMOUNT}\n        disabled={disabled}\n      />\n      \n      <div>\n        <label style={{\n          display: 'block',\n          marginBottom: '8px',\n          fontWeight: '500',\n          color: '#333'\n        }}>\n          Vade (Ay)\n        </label>\n        <select\n          value={term}\n          onChange={(e) => onTermChange(e.target.value)}\n          disabled={disabled}\n          style={{\n            width: '100%',\n            padding: '12px',\n            fontSize: '16px',\n            border: '1px solid #ddd',\n            borderRadius: '6px',\n            backgroundColor: disabled ? '#f8f9fa' : 'white',\n            color: disabled ? '#6c757d' : '#333'\n          }}\n        >\n          <option value=\"\">Vade seçiniz</option>\n          <option value=\"6\">6 ay</option>\n          <option value=\"12\">12 ay</option>\n          <option value=\"18\">18 ay</option>\n          <option value=\"24\">24 ay</option>\n          <option value=\"36\">36 ay</option>\n          <option value=\"48\">48 ay</option>\n          <option value=\"60\">60 ay</option>\n        </select>\n      </div>\n    </div>\n  )\n}","size_bytes":1836},"src/features/credit/components/DecisionPanel.tsx":{"content":"import type { DecisionResult } from '../types/credit'\nimport { LoadingSpinner } from '../../../components/LoadingSpinner'\n\ninterface DecisionPanelProps {\n  decisionResult: DecisionResult | null\n  isAnalyzing: boolean\n  onWithdraw?: () => void\n  isWithdrawing?: boolean\n}\n\nexport function DecisionPanel({ \n  decisionResult, \n  isAnalyzing, \n  onWithdraw, \n  isWithdrawing = false \n}: DecisionPanelProps) {\n  \n  if (isAnalyzing) {\n    return (\n      <div className=\"decision-panel-loading\">\n        <LoadingSpinner text=\"AI kredi analizi yapılıyor...\" />\n      </div>\n    )\n  }\n\n  if (!decisionResult) {\n    return null\n  }\n\n  const isApproved = decisionResult.approved\n  \n  return (\n    <div className={`decision-panel-container ${\n      isApproved ? 'decision-panel-approved' : 'decision-panel-rejected'\n    }`}>\n      <div className=\"decision-panel-header\">\n        <div className={`decision-panel-icon ${\n          isApproved ? 'decision-panel-icon-approved' : 'decision-panel-icon-rejected'\n        }`}>\n          {isApproved ? '✓' : '✗'}\n        </div>\n        <h3 className={`decision-panel-title ${\n          isApproved ? 'decision-panel-title-approved' : 'decision-panel-title-rejected'\n        }`}>\n          {decisionResult.decision}\n        </h3>\n      </div>\n\n      <div className={`decision-panel-details ${\n        isApproved ? 'decision-panel-details-approved' : 'decision-panel-details-rejected'\n      }`}>\n        <p>\n          <strong>Açıklama:</strong> {decisionResult.decision_reason}\n        </p>\n        <p>\n          <strong>Kredi Skoru:</strong> {decisionResult.credit_score}/100\n        </p>\n      </div>\n\n      {decisionResult.risk_factors && decisionResult.risk_factors.length > 0 && (\n        <div className={`decision-panel-risk-factors ${\n          isApproved ? 'decision-panel-risk-factors-approved' : 'decision-panel-risk-factors-rejected'\n        }`}>\n          <strong>Risk Faktörleri:</strong>\n          <ul className=\"decision-panel-risk-list\">\n            {decisionResult.risk_factors.map((factor, index) => (\n              <li key={index} className=\"decision-panel-risk-item\">\n                {factor}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {isApproved && decisionResult.approval_details && (\n        <div className=\"decision-approval-details\">\n          <strong>Onay Detayları:</strong>\n          <div className=\"decision-amounts-container\">\n            <div className=\"decision-amount-item\">\n              <span>Onaylanan Tutar:</span>\n              <span className=\"decision-amount-value\">{decisionResult.approval_details.approved_amount?.toLocaleString('tr-TR')} TL</span>\n            </div>\n            <div className=\"decision-amount-item\">\n              <span>Aylık Ödeme:</span>\n              <span className=\"decision-amount-value\">{decisionResult.approval_details.monthly_payment?.toLocaleString('tr-TR')} TL</span>\n            </div>\n            <div className=\"decision-amount-item\">\n              <span>Toplam Geri Ödeme:</span>\n              <span className=\"decision-amount-value\">{decisionResult.approval_details.total_repayment?.toLocaleString('tr-TR')} TL</span>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {isApproved && onWithdraw && (\n        <button\n          onClick={onWithdraw}\n          disabled={isWithdrawing}\n          className={`decision-panel-withdraw-button ${\n            isWithdrawing ? 'decision-panel-withdraw-button-disabled' : 'decision-panel-withdraw-button-active'\n          }`}\n        >\n          {isWithdrawing ? 'Çekiliyor...' : 'Krediyi Çek'}\n        </button>\n      )}\n    </div>\n  )\n}","size_bytes":3651},"src/features/credit/components/PaymentBreakdown.tsx":{"content":"import type { CreditCalculation } from '../types/credit'\nimport { CREDIT_CONSTANTS } from '../constants'\n\ninterface PaymentBreakdownProps {\n  calculation: CreditCalculation\n  showDetails?: boolean\n}\n\nexport function PaymentBreakdown({ calculation, showDetails = true }: PaymentBreakdownProps) {\n  const { monthlyPayment, totalPayment, totalInterest } = calculation\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('tr-TR', {\n      style: 'currency',\n      currency: 'TRY',\n      minimumFractionDigits: 2\n    }).format(amount)\n  }\n\n  if (monthlyPayment === 0) {\n    return (\n      <div className=\"payment-breakdown-empty\">\n        Hesaplama için kredi tutarı ve vade giriniz\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"payment-breakdown-container\">\n      <h3 className=\"payment-breakdown-title\">\n        Ödeme Detayları\n      </h3>\n      \n      <div className=\"payment-breakdown-grid\">\n        <div className=\"payment-item\">\n          <span className=\"payment-item-label\">Aylık Ödeme:</span>\n          <span className=\"payment-amount-primary\">\n            {formatCurrency(monthlyPayment)}\n          </span>\n        </div>\n        \n        {showDetails && (\n          <>\n            <div className=\"payment-item\">\n              <span>Toplam Geri Ödeme:</span>\n              <span className=\"payment-amount-secondary\">\n                {formatCurrency(totalPayment)}\n              </span>\n            </div>\n            \n            <div className=\"payment-item\">\n              <span>Toplam Faiz:</span>\n              <span className=\"payment-amount-danger\">\n                {formatCurrency(totalInterest)}\n              </span>\n            </div>\n            \n            <div className=\"payment-details-info\">\n              <strong>Faiz Detayları:</strong> Temel Faiz: %{CREDIT_CONSTANTS.FIXED_INTEREST_RATE} | \n              KKDF: %{(CREDIT_CONSTANTS.KKDF_RATE * 100).toFixed(0)} | \n              BSMV: %{(CREDIT_CONSTANTS.BSMV_RATE * 100).toFixed(0)}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  )\n}","size_bytes":2075},"src/features/credit/constants.ts":{"content":"export const CREDIT_CONSTANTS = {\n  FIXED_INTEREST_RATE: 4.09,\n  KKDF_RATE: 0.15,\n  BSMV_RATE: 0.15,\n  MAX_DTI_RATIO: 50.0,\n  MIN_LOAN_AMOUNT: 1000,\n  MAX_LOAN_AMOUNT: 500000,\n  MIN_LOAN_TERM: 6,\n  MAX_LOAN_TERM: 60\n} as const\n\nexport const API_ENDPOINTS = {\n  EVALUATE_CREDIT: 'https://us-central1-finisbank.cloudfunctions.net/evaluate_credit'\n} as const\n\nexport const FIRESTORE_COLLECTIONS = {\n  USER_PROFILES: 'user_profiles',\n  CREDIT_APPLICATIONS: 'creditApplications', \n  ACTIVE_CREDITS: 'activeCredits'\n} as const","size_bytes":520},"src/features/credit/hooks/useCreditCalculator.ts":{"content":"import { useMemo } from 'react'\nimport { CREDIT_CONSTANTS } from '../constants'\nimport { CreditCalculation } from '../types/credit'\n\nexport function useCreditCalculator(amount: string, term: string): CreditCalculation {\n  return useMemo(() => {\n    try {\n      if (!amount || !term) {\n        return { monthlyPayment: 0, totalPayment: 0, totalInterest: 0 }\n      }\n      \n      const loanAmount = parseFloat(amount)\n      const loanTerm = parseInt(term)\n      \n      if (isNaN(loanAmount) || isNaN(loanTerm) || loanAmount <= 0 || loanTerm <= 0) {\n        return { monthlyPayment: 0, totalPayment: 0, totalInterest: 0 }\n      }\n      \n      const { FIXED_INTEREST_RATE, KKDF_RATE, BSMV_RATE } = CREDIT_CONSTANTS\n      \n      // Frontend calculation logic\n      const rateCalculation = ((FIXED_INTEREST_RATE * (1 + KKDF_RATE + BSMV_RATE)) / 100) + 1\n      const totalRate = Number((rateCalculation || 0).toFixed(11))\n      \n      if (!totalRate || totalRate <= 1) {\n        return { monthlyPayment: 0, totalPayment: 0, totalInterest: 0 }\n      }\n      \n      const numerator = Math.pow(totalRate, loanTerm) * (totalRate - 1)\n      const denominator = Math.pow(totalRate, loanTerm) - 1\n      \n      if (denominator === 0) {\n        return { monthlyPayment: 0, totalPayment: 0, totalInterest: 0 }\n      }\n      \n      const rawPayment = (numerator / denominator) * loanAmount\n      \n      if (!rawPayment || isNaN(rawPayment) || !isFinite(rawPayment)) {\n        return { monthlyPayment: 0, totalPayment: 0, totalInterest: 0 }\n      }\n      \n      const monthlyPayment = Number((rawPayment || 0).toFixed(2))\n      const totalPayment = monthlyPayment * loanTerm\n      const totalInterest = totalPayment - loanAmount\n      \n      return { \n        monthlyPayment: monthlyPayment || 0, \n        totalPayment: totalPayment || 0, \n        totalInterest: totalInterest || 0 \n      }\n    } catch (error) {\n      console.error('Credit calculation error:', error)\n      return { monthlyPayment: 0, totalPayment: 0, totalInterest: 0 }\n    }\n  }, [amount, term])\n}","size_bytes":2048},"src/features/credit/hooks/useDecisionEngine.ts":{"content":"import { useCallback } from 'react'\nimport { useAsync } from '../../../hooks/useAsync'\nimport { creditService } from '../services/creditService'\nimport { creditRepository } from '../services/creditRepository'\nimport { CreditApplication, DecisionResult, UserProfile } from '../types/credit'\n\nexport function useDecisionEngine() {\n  const { execute, isLoading, error, data } = useAsync<DecisionResult>()\n\n  const analyzeCredit = useCallback(\n    async (applicationData: CreditApplication, userContext: { uid: string; email: string }) => {\n      const analysisFunction = async () => {\n        // Save user profile data\n        try {\n          const userProfileData: UserProfile = {\n            ...applicationData,\n            userId: userContext.uid,\n            userEmail: userContext.email,\n            timestamp: new Date(),\n            evaluation_type: 'user_credit_profile',\n            system_version: 'v2.0_comprehensive_data'\n          }\n          \n          await creditRepository.saveCreditApplication(userProfileData)\n        } catch (firebaseError) {\n          console.warn('Firestore\\'a veri kaydedilirken hata:', firebaseError)\n        }\n\n        // Evaluate credit through AI service\n        const result = await creditService.evaluateCredit(applicationData)\n        return result\n      }\n\n      return execute(analysisFunction)\n    },\n    [execute]\n  )\n\n  return {\n    analyzeCredit,\n    isAnalyzing: isLoading,\n    error,\n    decisionResult: data,\n  }\n}","size_bytes":1467},"src/features/credit/hooks/useWithdrawCredit.ts":{"content":"import { useCallback } from 'react'\nimport { useAsync } from '../../../hooks/useAsync'\nimport { creditRepository } from '../services/creditRepository'\nimport { CreditRecord, DecisionResult } from '../types/credit'\n\ninterface WithdrawCreditParams {\n  amount: number\n  term: number\n  decisionResult: DecisionResult\n  userId: string\n  updateUserBalance: (newBalance: number) => Promise<void>\n}\n\nexport function useWithdrawCredit() {\n  const { execute, isLoading, error } = useAsync<void>()\n\n  const withdrawCredit = useCallback(\n    async ({ amount, term, decisionResult, userId, updateUserBalance }: WithdrawCreditParams) => {\n      const withdrawFunction = async () => {\n        if (!decisionResult.approved) {\n          throw new Error('Onaylanmamış kredi çekilemez')\n        }\n\n        const creditRecord: CreditRecord = {\n          userId,\n          amount,\n          term,\n          monthlyPayment: decisionResult.approval_details?.monthly_payment || 0,\n          status: 'active',\n          startDate: new Date(),\n          nextPaymentDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days later\n          remainingBalance: amount,\n          decisionResult,\n        }\n\n        // Save credit record\n        await creditRepository.saveActiveCredit(creditRecord)\n        \n        // Update user balance\n        await updateUserBalance(amount)\n      }\n\n      return execute(withdrawFunction)\n    },\n    [execute]\n  )\n\n  return {\n    withdrawCredit,\n    isWithdrawing: isLoading,\n    error,\n  }\n}","size_bytes":1510},"src/features/credit/services/creditRepository.ts":{"content":"import { firestoreClient } from '../../../shared/services/firestoreClient'\nimport { FIRESTORE_COLLECTIONS } from '../constants'\nimport { CreditRecord, UserProfile } from '../types/credit'\n\nexport class CreditRepository {\n  async saveCreditApplication(applicationData: UserProfile): Promise<string> {\n    try {\n      return await firestoreClient.add(FIRESTORE_COLLECTIONS.USER_PROFILES, applicationData)\n    } catch (error) {\n      console.warn('Firestore\\'a veri kaydedilirken hata:', error)\n      throw error\n    }\n  }\n\n  async saveActiveCredit(creditRecord: CreditRecord): Promise<string> {\n    try {\n      return await firestoreClient.add(FIRESTORE_COLLECTIONS.ACTIVE_CREDITS, creditRecord)\n    } catch (error) {\n      console.error('Active credit save failed:', error)\n      throw error\n    }\n  }\n\n  async getUserCredits(userId: string): Promise<CreditRecord[]> {\n    try {\n      return await firestoreClient.getWhere<CreditRecord>(\n        FIRESTORE_COLLECTIONS.ACTIVE_CREDITS,\n        'userId',\n        '==',\n        userId\n      )\n    } catch (error) {\n      console.error('Get user credits failed:', error)\n      throw error\n    }\n  }\n\n  async updateCreditStatus(creditId: string, status: CreditRecord['status']): Promise<void> {\n    try {\n      await firestoreClient.update(FIRESTORE_COLLECTIONS.ACTIVE_CREDITS, creditId, { status })\n    } catch (error) {\n      console.error('Update credit status failed:', error)\n      throw error\n    }\n  }\n}\n\nexport const creditRepository = new CreditRepository()","size_bytes":1509},"src/features/credit/services/creditService.ts":{"content":"import { httpClient } from '../../../shared/services/httpClient'\nimport { API_ENDPOINTS } from '../constants'\nimport { CreditApplication, DecisionResult } from '../types/credit'\n\nexport class CreditService {\n  async evaluateCredit(applicationData: CreditApplication): Promise<DecisionResult> {\n    try {\n      const result = await httpClient.post<DecisionResult>(\n        API_ENDPOINTS.EVALUATE_CREDIT,\n        applicationData\n      )\n      \n      return {\n        ...result,\n        approved: result.decision === \"ONAYLANDI\"\n      }\n    } catch (error) {\n      console.error('Credit evaluation failed:', error)\n      throw new Error('Kredi değerlendirme servisi geçici olarak kullanılamıyor.')\n    }\n  }\n}\n\nexport const creditService = new CreditService()","size_bytes":760},"src/features/credit/types/credit.ts":{"content":"export interface CreditApplication {\n  loan_amount: number\n  loan_term_months: number\n  monthly_income: number\n  additional_income: number\n  expenses: number\n  rent_payment: number\n  age: number\n  employment_type: string\n  work_experience: number\n  debt_to_income_ratio: number\n  existing_loans: number\n  credit_card_limit: number\n  credit_card_debt: number\n  bank_balance: number\n  investments: number\n  real_estate_value: number\n  kkb_score: number\n  payment_delays: number\n  home_ownership: string\n  residence_duration: number\n  customer_segment: string\n  existing_relationship: number\n  total_banking_products: number\n  defaulted_loans: boolean\n  legal_issues: boolean\n  has_insurance: boolean\n  job_stability: string\n}\n\nexport interface DecisionResult {\n  decision: 'ONAYLANDI' | 'REDDEDILDI'\n  decision_reason: string\n  credit_score: number\n  risk_factors: string[]\n  approved: boolean\n  monthly_payment?: number\n  total_amount?: number\n  approval_details?: {\n    approved_amount: number\n    monthly_payment: number\n    total_repayment: number\n    effective_rate: number\n  }\n}\n\nexport interface CreditCalculation {\n  monthlyPayment: number\n  totalPayment: number\n  totalInterest: number\n}\n\nexport interface CreditRecord {\n  userId: string\n  amount: number\n  term: number\n  monthlyPayment: number\n  status: 'active' | 'completed' | 'defaulted'\n  startDate: Date\n  nextPaymentDate: Date\n  remainingBalance: number\n  decisionResult: DecisionResult\n}\n\nexport interface UserProfile extends CreditApplication {\n  userId: string\n  userEmail: string\n  timestamp: Date\n  evaluation_type: string\n  system_version: string\n}","size_bytes":1618},"src/shared/services/firestoreClient.ts":{"content":"import { collection, addDoc, doc, setDoc, getDoc, getDocs, query, where, updateDoc, deleteDoc } from 'firebase/firestore'\nimport { db } from '../../config/firebase'\n\nexport class FirestoreClient {\n  async add<T>(collectionName: string, data: T): Promise<string> {\n    try {\n      const docRef = await addDoc(collection(db, collectionName), data)\n      return docRef.id\n    } catch (error) {\n      console.error(`Error adding document to ${collectionName}:`, error)\n      throw error\n    }\n  }\n\n  async set<T>(collectionName: string, documentId: string, data: T): Promise<void> {\n    try {\n      await setDoc(doc(db, collectionName, documentId), data)\n    } catch (error) {\n      console.error(`Error setting document in ${collectionName}:`, error)\n      throw error\n    }\n  }\n\n  async get<T>(collectionName: string, documentId: string): Promise<T | null> {\n    try {\n      const docRef = doc(db, collectionName, documentId)\n      const docSnap = await getDoc(docRef)\n      \n      if (docSnap.exists()) {\n        return { id: docSnap.id, ...docSnap.data() } as unknown as T\n      } else {\n        return null\n      }\n    } catch (error) {\n      console.error(`Error getting document from ${collectionName}:`, error)\n      throw error\n    }\n  }\n\n  async getAll<T>(collectionName: string): Promise<T[]> {\n    try {\n      const querySnapshot = await getDocs(collection(db, collectionName))\n      return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }) as unknown as T)\n    } catch (error) {\n      console.error(`Error getting documents from ${collectionName}:`, error)\n      throw error\n    }\n  }\n\n  async getWhere<T>(collectionName: string, field: string, operator: any, value: any): Promise<T[]> {\n    try {\n      const q = query(collection(db, collectionName), where(field, operator, value))\n      const querySnapshot = await getDocs(q)\n      return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }) as unknown as T)\n    } catch (error) {\n      console.error(`Error querying documents from ${collectionName}:`, error)\n      throw error\n    }\n  }\n\n  async update(collectionName: string, documentId: string, data: Partial<any>): Promise<void> {\n    try {\n      const docRef = doc(db, collectionName, documentId)\n      await updateDoc(docRef, data)\n    } catch (error) {\n      console.error(`Error updating document in ${collectionName}:`, error)\n      throw error\n    }\n  }\n\n  async delete(collectionName: string, documentId: string): Promise<void> {\n    try {\n      await deleteDoc(doc(db, collectionName, documentId))\n    } catch (error) {\n      console.error(`Error deleting document from ${collectionName}:`, error)\n      throw error\n    }\n  }\n}\n\nexport const firestoreClient = new FirestoreClient()","size_bytes":2725},"src/shared/services/httpClient.ts":{"content":"class HttpClient {\n  private baseURL: string\n\n  constructor(baseURL: string = '') {\n    this.baseURL = baseURL\n  }\n\n  async request<T>(url: string, options: RequestInit = {}): Promise<T> {\n    const fullUrl = this.baseURL ? `${this.baseURL}${url}` : url\n    \n    const defaultHeaders = {\n      'Content-Type': 'application/json',\n    }\n\n    const config = {\n      ...options,\n      headers: {\n        ...defaultHeaders,\n        ...options.headers,\n      },\n    }\n\n    try {\n      const response = await fetch(fullUrl, config)\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`)\n      }\n      \n      return await response.json()\n    } catch (error) {\n      console.error('HTTP request failed:', error)\n      throw error\n    }\n  }\n\n  async get<T>(url: string, options?: RequestInit): Promise<T> {\n    return this.request<T>(url, { ...options, method: 'GET' })\n  }\n\n  async post<T>(url: string, data?: any, options?: RequestInit): Promise<T> {\n    return this.request<T>(url, {\n      ...options,\n      method: 'POST',\n      body: data ? JSON.stringify(data) : undefined,\n    })\n  }\n\n  async put<T>(url: string, data?: any, options?: RequestInit): Promise<T> {\n    return this.request<T>(url, {\n      ...options,\n      method: 'PUT',\n      body: data ? JSON.stringify(data) : undefined,\n    })\n  }\n\n  async delete<T>(url: string, options?: RequestInit): Promise<T> {\n    return this.request<T>(url, { ...options, method: 'DELETE' })\n  }\n}\n\nexport const httpClient = new HttpClient()\nexport default HttpClient","size_bytes":1551},"src/shared/types/common.ts":{"content":"export interface LoadingState {\n  isLoading: boolean\n  error: string | null\n}\n\nexport interface AsyncState<T> extends LoadingState {\n  data: T | null\n}\n\nexport interface FormField {\n  value: string\n  error: string\n  isValid: boolean\n}\n\nexport interface ValidationResult {\n  isValid: boolean\n  errors: Record<string, string>\n}\n\nexport interface User {\n  uid: string\n  email: string\n  displayName?: string\n  account?: {\n    accountNumber: string\n    balance: number\n    iban: string\n  }\n}","size_bytes":486},"src/styles/main.css":{"content":"/* ========================================\n   FİNİŞ BANKASI - MAIN STYLESHEET\n   Modular CSS Organization\n   ======================================== */\n\n/* Import modular CSS files */\n@import './layout.css';\n@import './forms.css';\n@import './components.css';\n@import './pages.css';\n\n/* ========================================\n   GLOBAL VARIABLES & RESET\n   ======================================== */\n\n/* Root Variables */\n:root {\n  --primary-color: #2c3e50;\n  --secondary-color: #3498db;\n  --accent-color: #e74c3c;\n  --text-light: #ffffff;\n  --text-dark: #2c3e50;\n  --background-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  --border-radius: 8px;\n  --border-radius-lg: 16px;\n  --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  --shadow-lg: 0 10px 25px rgba(0, 0, 0, 0.2);\n  --transition: all 0.3s ease;\n}\n\n/* Reset and Base Styles */\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n  background: var(--background-gradient);\n  min-height: 100vh;\n  color: var(--text-light);\n}\n\n/* ========================================\n   CSS ORGANIZATION STRUCTURE\n   ======================================== */\n\n/*\n  This main.css file now serves as:\n  1. Global variable definitions\n  2. Basic reset and body styles\n  3. Import controller for modular CSS files\n  \n  Modular files organization:\n  - layout.css: Grid systems, containers, page layout\n  - forms.css: Form inputs, labels, validation styles \n  - components.css: Navigation, buttons, cards, shared components\n  - pages.css: Page-specific styles (home, login, register, etc.)\n*/","size_bytes":1666},"src/components/ErrorBanner.tsx":{"content":"import React from 'react'\n\ninterface ErrorBannerProps {\n  error: string | null\n  onDismiss?: () => void\n}\n\nexport function ErrorBanner({ error, onDismiss }: ErrorBannerProps) {\n  if (!error) return null\n\n  return (\n    <div className=\"error-banner\">\n      <span className=\"error-banner-text\">{error}</span>\n      {onDismiss && (\n        <button\n          onClick={onDismiss}\n          className=\"error-banner-dismiss\"\n        >\n          ×\n        </button>\n      )}\n    </div>\n  )\n}","size_bytes":484},"src/components/LoadingSpinner.tsx":{"content":"\ninterface LoadingSpinnerProps {\n  size?: 'small' | 'medium' | 'large'\n  text?: string\n}\n\nexport function LoadingSpinner({ size = 'medium', text }: LoadingSpinnerProps) {\n  return (\n    <div className=\"loading-spinner-container\">\n      <div className={`loading-spinner ${size}`} />\n      {text && (\n        <span className=\"loading-spinner-text\">\n          {text}\n        </span>\n      )}\n    </div>\n  )\n}","size_bytes":405},"src/components/NumberInput.tsx":{"content":"\ninterface NumberInputProps {\n  value: string\n  onChange: (value: string) => void\n  placeholder?: string\n  min?: number\n  max?: number\n  step?: number\n  label?: string\n  error?: string\n  disabled?: boolean\n}\n\nexport function NumberInput({\n  value,\n  onChange,\n  placeholder,\n  min,\n  max,\n  step,\n  label,\n  error,\n  disabled = false\n}: NumberInputProps) {\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value\n    \n    // Allow empty value for clearing\n    if (newValue === '') {\n      onChange('')\n      return\n    }\n    \n    // Only allow numbers and decimal point\n    if (!/^\\d*\\.?\\d*$/.test(newValue)) {\n      return\n    }\n    \n    onChange(newValue)\n  }\n\n  return (\n    <div className=\"number-input-container\">\n      {label && (\n        <label className=\"number-input-label\">\n          {label}\n        </label>\n      )}\n      <input\n        type=\"text\"\n        value={value}\n        onChange={handleChange}\n        placeholder={placeholder}\n        disabled={disabled}\n        min={min}\n        max={max}\n        step={step}\n        className={`number-input ${error ? 'error' : ''}`}\n      />\n      {error && (\n        <div className=\"number-input-error\">\n          {error}\n        </div>\n      )}\n    </div>\n  )\n}","size_bytes":1271},"src/hooks/useAsync.ts":{"content":"import { useState, useCallback } from 'react'\nimport type { AsyncState } from '../shared/types/common'\n\nexport function useAsync<T>() {\n  const [state, setState] = useState<AsyncState<T>>({\n    data: null,\n    isLoading: false,\n    error: null,\n  })\n\n  const execute = useCallback(\n    async (asyncFunction: () => Promise<T>) => {\n      setState(prev => ({ ...prev, isLoading: true, error: null }))\n      \n      try {\n        const data = await asyncFunction()\n        setState({ data, isLoading: false, error: null })\n        return data\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Bir hata oluştu'\n        setState({ data: null, isLoading: false, error: errorMessage })\n        throw error\n      }\n    },\n    []\n  )\n\n  const reset = useCallback(() => {\n    setState({ data: null, isLoading: false, error: null })\n  }, [])\n\n  return {\n    ...state,\n    execute,\n    reset\n  }\n}","size_bytes":930},"src/styles/components.css":{"content":"/* ========================================\n   COMPONENT STYLES\n   Navigation, buttons, cards, shared components\n   ======================================== */\n\n/* ========================================\n   BUTTONS\n   ======================================== */\n\n.btn {\n  padding: 16px 24px;\n  border: none;\n  border-radius: var(--border-radius);\n  font-size: 16px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: var(--transition);\n  text-decoration: none;\n  display: inline-block;\n  text-align: center;\n}\n\n.btn-primary {\n  background: rgba(255, 255, 255, 0.2);\n  color: var(--text-light);\n  backdrop-filter: blur(10px);\n}\n\n.btn-primary:hover {\n  background: rgba(255, 255, 255, 0.3);\n  transform: translateY(-2px);\n  box-shadow: var(--shadow);\n}\n\n.btn-secondary {\n  background: rgba(52, 152, 219, 0.8);\n  color: var(--text-light);\n}\n\n.btn-secondary:hover {\n  background: rgba(52, 152, 219, 1);\n}\n\n.btn-full {\n  width: 100%;\n}\n\n.btn-large {\n  padding: 20px 32px;\n  font-size: 18px;\n}\n\n.calculator-button {\n  width: 100%;\n  padding: 16px;\n  border-radius: 10px;\n  border: none;\n  font-size: 16px;\n  font-weight: 600;\n  background: rgba(255, 255, 255, 0.2);\n  color: #ffffff;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  backdrop-filter: blur(10px);\n}\n\n.calculator-button:hover {\n  background: rgba(255, 255, 255, 0.3);\n}\n\n/* ========================================\n   NAVIGATION\n   ======================================== */\n\n.nav-container {\n  background: #808080;\n  backdrop-filter: blur(10px);\n  border-radius: var(--border-radius-lg);\n  padding: 20px;\n  margin-bottom: 30px;\n}\n\n.nav-list {\n  display: flex;\n  justify-content: center;\n  gap: 30px;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n.nav-link {\n  color: var(--text-light);\n  text-decoration: none;\n  font-weight: 600;\n  padding: 12px 20px;\n  border-radius: var(--border-radius);\n  transition: var(--transition);\n  border: 2px solid transparent;\n}\n\n.nav-link:hover {\n  background: #808080;\n}\n\n.nav-link.active {\n  background: rgba(255, 255, 255, 0.2);\n  border-color: rgba(255, 255, 255, 0.3);\n}\n\n/* Navigation Component */\n.navigation {\n  padding: 15px 0;\n}\n\n.navigation-container {\n  max-width: 1200px;\n  margin: 0 auto;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0 20px;\n  position: relative;\n}\n\n.navigation-desktop {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n}\n\n.navigation-left {\n  display: flex;\n  align-items: center;\n  gap: 20px;\n}\n\n.navigation-brand {\n  margin: 0;\n  color: #007bff;\n  font-weight: bold;\n}\n\n.navigation-right {\n  display: flex;\n  gap: 10px;\n  align-items: center;\n}\n\n.navigation-link {\n  text-decoration: none;\n  color: inherit;\n  padding: 10px 15px;\n  border-radius: 4px;\n  transition: background-color 0.2s;\n  opacity: 0.8;\n}\n\n.navigation-link.active {\n  background-color: #007bff;\n  color: white;\n  opacity: 1;\n}\n\n.navigation-logout-button {\n  text-decoration: none;\n  color: inherit;\n  padding: 10px 15px;\n  border-radius: 4px;\n  transition: background-color 0.2s;\n  opacity: 0.8;\n  background-color: transparent;\n  border: 1px solid currentColor;\n  cursor: pointer;\n}\n\n.navigation-user-welcome {\n  color: inherit;\n  opacity: 0.8;\n  display: none;\n}\n\n.navigation-theme-switch {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  cursor: pointer;\n  padding: 8px 12px;\n  border-radius: 4px;\n  transition: background-color 0.2s;\n}\n\n/* Navigation Theme Variants */\n.nav-light {\n  background: #808080;\n  backdrop-filter: blur(10px);\n}\n\n.nav-dark {\n  background: rgba(0, 0, 0, 0.2);\n  backdrop-filter: blur(10px);\n}\n\n/* ========================================\n   LOADING SPINNER\n   ======================================== */\n\n.loading-spinner {\n  display: inline-block;\n  width: 20px;\n  height: 20px;\n  border: 3px solid rgba(255, 255, 255, 0.3);\n  border-radius: 50%;\n  border-top-color: #fff;\n  animation: spin 1s ease-in-out infinite;\n}\n\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n/* ========================================\n   ERROR BANNER\n   ======================================== */\n\n.error-banner {\n  background-color: rgba(220, 53, 69, 0.9);\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.error-banner-close {\n  background: none;\n  border: none;\n  color: white;\n  font-size: 18px;\n  cursor: pointer;\n  padding: 0;\n  margin-left: 10px;\n}\n\n/* ========================================\n   SERVICE CARDS\n   ======================================== */\n\n.service-grid {\n  margin-top: 40px;\n}\n\n.service-card {\n  padding: 20px;\n  border-radius: 8px;\n}\n\n/* ========================================\n   PAYMENT BREAKDOWN COMPONENT\n   ======================================== */\n\n.payment-breakdown-empty {\n  padding: 20px;\n  background-color: #f8f9fa;\n  border-radius: 8px;\n  text-align: center;\n  color: #6c757d;\n}\n\n.payment-breakdown-container {\n  padding: 20px;\n  background-color: #f8f9fa;\n  border-radius: 8px;\n  margin-bottom: 20px;\n}\n\n.payment-breakdown-title {\n  margin-bottom: 16px;\n  color: #333;\n  border-bottom: 2px solid #007bff;\n  padding-bottom: 8px;\n}\n\n.payment-breakdown-grid {\n  display: grid;\n  gap: 12px;\n}\n\n.payment-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 8px 0;\n  border-bottom: 1px solid #e9ecef;\n}\n\n.payment-item-label {\n  font-weight: 500;\n}\n\n.payment-amount-primary {\n  font-size: 18px;\n  font-weight: bold;\n  color: #007bff;\n}\n\n.payment-amount-secondary {\n  font-weight: 500;\n}\n\n.payment-amount-danger {\n  font-weight: 500;\n  color: #dc3545;\n}\n\n.payment-details-info {\n  margin-top: 16px;\n  padding: 12px;\n  background-color: #e3f2fd;\n  border-radius: 4px;\n  font-size: 12px;\n  color: #1976d2;\n}\n\n/* ========================================\n   DECISION PANEL COMPONENT\n   ======================================== */\n\n.decision-panel-loading {\n  padding: 30px;\n  background-color: #f8f9fa;\n  border-radius: 8px;\n  text-align: center;\n}\n\n.decision-panel-container {\n  padding: 24px;\n  border-radius: 8px;\n  margin-top: 20px;\n}\n\n.decision-panel-approved {\n  background-color: #d4edda;\n  border: 2px solid #28a745;\n}\n\n.decision-panel-rejected {\n  background-color: #f8d7da;\n  border: 2px solid #dc3545;\n}\n\n.decision-panel-header {\n  display: flex;\n  align-items: center;\n  margin-bottom: 16px;\n}\n\n.decision-panel-icon {\n  width: 24px;\n  height: 24px;\n  border-radius: 50%;\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 12px;\n  font-size: 16px;\n  font-weight: bold;\n}\n\n.decision-panel-icon-approved {\n  background-color: #28a745;\n}\n\n.decision-panel-icon-rejected {\n  background-color: #dc3545;\n}\n\n.decision-panel-title {\n  margin: 0;\n  font-size: 20px;\n}\n\n.decision-panel-title-approved {\n  color: #155724;\n}\n\n.decision-panel-title-rejected {\n  color: #721c24;\n}\n\n.decision-panel-details {\n  margin-bottom: 16px;\n}\n\n.decision-panel-details-approved {\n  color: #155724;\n}\n\n.decision-panel-details-rejected {\n  color: #721c24;\n}\n\n.decision-panel-details p {\n  margin: 0 0 8px 0;\n}\n\n.decision-panel-risk-factors {\n  margin-bottom: 16px;\n}\n\n.decision-panel-risk-factors-approved {\n  color: #155724;\n}\n\n.decision-panel-risk-factors-rejected {\n  color: #721c24;\n}\n\n.decision-panel-risk-list {\n  margin: 8px 0 0 0;\n  padding-left: 20px;\n}\n\n.decision-panel-risk-item {\n  margin-bottom: 4px;\n}\n\n.decision-panel-withdraw-button {\n  width: 100%;\n  padding: 12px;\n  color: white;\n  border: none;\n  border-radius: 6px;\n  font-size: 16px;\n  font-weight: bold;\n}\n\n.decision-panel-withdraw-button-active {\n  background-color: #28a745;\n  cursor: pointer;\n  opacity: 1;\n}\n\n.decision-panel-withdraw-button-disabled {\n  background-color: #6c757d;\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n/* Legacy Decision Panel Classes (keeping for compatibility) */\n.decision-approval-details {\n  margin-bottom: 16px;\n  color: #155724;\n}\n\n.decision-amounts-container {\n  margin-top: 8px;\n}\n\n.decision-amount-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 4px 0;\n  padding: 8px 12px;\n  background-color: #808080;\n  border-radius: 6px;\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.decision-amount-value {\n  font-weight: bold;\n  color: #333;\n}\n\n/* ========================================\n   ANIMATIONS\n   ======================================== */\n\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(20px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n.fade-in {\n  animation: fadeIn 0.6s ease-out;\n}\n\n.hover-lift:hover {\n  transform: translateY(-2px);\n  box-shadow: var(--shadow-lg);\n}\n\n/* ========================================\n   RESPONSIVE NAVIGATION\n   ======================================== */\n\n@media (max-width: 768px) {\n  .nav-list {\n    flex-direction: column;\n    gap: 10px;\n  }\n}","size_bytes":8878},"src/styles/forms.css":{"content":"/* ========================================\n   FORM STYLES\n   Form inputs, labels, validation styles\n   ======================================== */\n\n/* ========================================\n   GENERAL FORM STYLES\n   ======================================== */\n\n.form-group {\n  margin-bottom: 20px;\n}\n\n.form-label {\n  display: block;\n  margin-bottom: 8px;\n  font-weight: 600;\n  color: var(--text-light);\n}\n\n.form-input,\n.form-select {\n  width: 100%;\n  padding: 12px 16px;\n  border: 2px solid rgba(255, 255, 255, 0.3);\n  border-radius: var(--border-radius);\n  background: #808080;\n  color: var(--text-light);\n  font-size: 16px;\n  transition: var(--transition);\n  backdrop-filter: blur(10px);\n}\n\n.form-input::placeholder {\n  color: rgba(255, 255, 255, 0.6);\n}\n\n.form-input:focus,\n.form-select:focus {\n  outline: none;\n  border-color: rgba(255, 255, 255, 0.6);\n  background: rgba(255, 255, 255, 0.2);\n}\n\n.form-textarea {\n  width: 100%;\n  padding: 12px 16px;\n  border: 2px solid rgba(255, 255, 255, 0.3);\n  border-radius: var(--border-radius);\n  background: #808080;\n  color: var(--text-light);\n  font-size: 16px;\n  resize: vertical;\n  min-height: 100px;\n  transition: var(--transition);\n  backdrop-filter: blur(10px);\n}\n\n/* ========================================\n   CALCULATOR FORM STYLES\n   ======================================== */\n\n.calculator-form {\n  display: grid;\n  gap: 20px;\n  margin-bottom: 30px;\n}\n\n.calculator-form-grid {\n  display: grid;\n  gap: 20px;\n}\n\n.calculator-input {\n  width: 100%;\n  padding: 12px 16px;\n  border-radius: 8px;\n  border: none;\n  font-size: 16px;\n  background: #808080;\n  color: #333;\n}\n\n/* ========================================\n   REGISTER FORM STYLES\n   ======================================== */\n\n.register-form {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.register-section {\n  background: #808080;\n  padding: 20px;\n  border-radius: 8px;\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.register-section-title {\n  margin-top: 0;\n  margin-bottom: 15px;\n  color: #007bff;\n  font-size: 18px;\n  font-weight: 600;\n}\n\n.form-grid-2 {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 15px;\n}\n\n.form-field {\n  margin-bottom: 15px;\n}\n\n.form-field label {\n  display: block;\n  margin-bottom: 5px;\n  font-weight: 600;\n  color: var(--text-light);\n  font-size: 14px;\n}\n\n.form-field input,\n.form-field select {\n  width: 100%;\n  padding: 8px;\n  border: 2px solid rgba(255, 255, 255, 0.3);\n  border-radius: var(--border-radius);\n  background: #808080;\n  color: var(--text-light);\n  font-size: 16px;\n  transition: var(--transition);\n  backdrop-filter: blur(10px);\n}\n\n.form-field input::placeholder {\n  color: rgba(255, 255, 255, 0.6);\n}\n\n.form-field input:focus,\n.form-field select:focus {\n  outline: none;\n  border-color: rgba(255, 255, 255, 0.6);\n  background: rgba(255, 255, 255, 0.2);\n}\n\n.register-submit-btn {\n  padding: 12px 20px;\n  border-radius: 4px;\n  cursor: pointer;\n  border: none;\n  font-size: 16px;\n  font-weight: 600;\n  transition: var(--transition);\n  width: 100%;\n  background: linear-gradient(135deg, #28a745, #20c997);\n  color: white;\n}\n\n.register-submit-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #218838, #1fa085);\n  transform: translateY(-2px);\n  box-shadow: var(--shadow);\n}\n\n.register-submit-btn:disabled {\n  cursor: not-allowed;\n  opacity: 0.7;\n  background: #6c757d;\n}\n\n/* ========================================\n   LOGIN FORM STYLES\n   ======================================== */\n\n.login-form {\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n}\n\n.login-form-group {\n  display: flex;\n  flex-direction: column;\n}\n\n.login-form-label {\n  margin-bottom: 5px;\n  font-weight: 600;\n  color: var(--text-light);\n}\n\n.login-form-input {\n  width: 100%;\n  padding: 8px;\n  border: 2px solid rgba(255, 255, 255, 0.3);\n  border-radius: 4px;\n  background: #808080;\n  color: var(--text-light);\n  font-size: 16px;\n  transition: var(--transition);\n  backdrop-filter: blur(10px);\n}\n\n.login-form-input::placeholder {\n  color: rgba(255, 255, 255, 0.6);\n}\n\n.login-form-input:focus {\n  outline: none;\n  border-color: rgba(255, 255, 255, 0.6);\n  background: rgba(255, 255, 255, 0.2);\n}\n\n.login-submit-button {\n  padding: 10px;\n  border-radius: 4px;\n  cursor: pointer;\n  background: rgba(255, 255, 255, 0.2);\n  color: var(--text-light);\n  border: none;\n  font-size: 16px;\n  font-weight: 600;\n  transition: var(--transition);\n  backdrop-filter: blur(10px);\n}\n\n.login-submit-button:hover:not(:disabled) {\n  background: rgba(255, 255, 255, 0.3);\n  transform: translateY(-2px);\n  box-shadow: var(--shadow);\n}\n\n.login-submit-button:disabled {\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n/* ========================================\n   FORM VALIDATION & ERROR STATES\n   ======================================== */\n\n.register-error {\n  color: #dc3545;\n  background-color: rgba(220, 53, 69, 0.1);\n  padding: 10px;\n  border-radius: 4px;\n  margin-top: 10px;\n  font-size: 14px;\n  border: 1px solid rgba(220, 53, 69, 0.2);\n}\n\n.login-error {\n  color: #dc3545;\n  background-color: rgba(220, 53, 69, 0.1);\n  padding: 10px;\n  border-radius: 4px;\n  margin-top: 10px;\n  font-size: 14px;\n  border: 1px solid rgba(220, 53, 69, 0.3);\n}\n\n/* ========================================\n   RATE INFO FORMS\n   ======================================== */\n\n.rate-info {\n  padding: 15px;\n  background: #808080;\n  border-radius: var(--border-radius);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.rate-title {\n  font-size: 14px;\n  font-weight: 600;\n  color: var(--text-light);\n  margin-bottom: 8px;\n}\n\n.rate-details {\n  font-size: 12px;\n  opacity: 0.9;\n  line-height: 1.4;\n}\n\n/* ========================================\n   RESPONSIVE FORM DESIGN\n   ======================================== */\n\n@media (max-width: 768px) {\n  .form-grid-2 {\n    grid-template-columns: 1fr;\n  }\n}\n\n/* ========================================\n   TEST DATA BUTTONS\n   ======================================== */\n\n.test-data-btn {\n  padding: 8px 16px;\n  background-color: #17a2b8;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 14px;\n  margin-bottom: 15px;\n  transition: var(--transition);\n}\n\n.test-data-btn:hover {\n  background-color: #138496;\n  transform: translateY(-1px);\n}\n\n.login-test-button {\n  padding: 6px 12px;\n  background-color: #28a745;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 13px;\n  margin-bottom: 10px;\n  transition: var(--transition);\n}\n\n.login-test-button:hover {\n  background-color: #218838;\n}","size_bytes":6556},"src/styles/layout.css":{"content":"/* ========================================\n   LAYOUT STYLES\n   Grid systems, containers, page layout\n   ======================================== */\n\n/* ========================================\n   LAYOUT COMPONENTS\n   ======================================== */\n\n.page-container {\n  min-height: 100vh;\n  background: var(--background-gradient);\n  padding: 20px;\n}\n\n.content-wrapper {\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n.card {\n  background: #808080;\n  border-radius: var(--border-radius-lg);\n  padding: 30px;\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  box-shadow: var(--shadow-lg);\n}\n\n.card-header {\n  text-align: center;\n  margin-bottom: 30px;\n}\n\n.card-title {\n  font-size: 28px;\n  font-weight: 700;\n  margin-bottom: 8px;\n  color: var(--text-light);\n}\n\n.card-subtitle {\n  font-size: 16px;\n  opacity: 0.8;\n  color: var(--text-light);\n}\n\n/* ========================================\n   GRID LAYOUTS\n   ======================================== */\n\n.grid-2 {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 30px;\n}\n\n.grid-3 {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 20px;\n}\n\n.grid-responsive {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 20px;\n}\n\n/* ========================================\n   SPECIFIC LAYOUT SECTIONS\n   ======================================== */\n\n/* Hero Section */\n.hero-section {\n  text-align: center;\n  margin-bottom: 40px;\n}\n\n.hero-title {\n  font-size: 48px;\n  font-weight: 800;\n  margin-bottom: 16px;\n  background: linear-gradient(45deg, #FFD700, #FFA500);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n.hero-subtitle {\n  font-size: 20px;\n  opacity: 0.9;\n  margin-bottom: 32px;\n}\n\n.hero-stats {\n  display: flex;\n  justify-content: center;\n  gap: 40px;\n  margin-bottom: 40px;\n}\n\n.stat-item {\n  text-align: center;\n}\n\n.stat-number {\n  font-size: 32px;\n  font-weight: 700;\n  color: #FFD700;\n  display: block;\n}\n\n.stat-label {\n  font-size: 14px;\n  opacity: 0.8;\n  margin-top: 4px;\n}\n\n/* Calculator Sections */\n.calculator-section {\n  background: #808080;\n  border-radius: var(--border-radius-lg);\n  padding: 30px;\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.calculator-header {\n  font-size: 24px;\n  font-weight: 700;\n  text-align: center;\n  margin-bottom: 30px;\n  color: var(--text-light);\n}\n\n/* Results Display */\n.results-container {\n  background: #808080;\n  border-radius: var(--border-radius-lg);\n  padding: 30px;\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.results-header {\n  font-size: 24px;\n  font-weight: 700;\n  text-align: center;\n  margin-bottom: 30px;\n  color: var(--text-light);\n}\n\n.results-grid {\n  display: grid;\n  gap: 15px;\n}\n\n.result-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 15px;\n  background: #808080;\n  border-radius: var(--border-radius);\n}\n\n.result-label {\n  font-size: 14px;\n  opacity: 0.8;\n}\n\n.result-value {\n  font-weight: 600;\n}\n\n.result-primary {\n  background: rgba(255, 255, 255, 0.15);\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  padding: 20px;\n}\n\n.result-primary .result-label {\n  font-size: 16px;\n  font-weight: 600;\n}\n\n.result-primary .result-value {\n  font-size: 18px;\n  font-weight: 700;\n  color: #FFD700;\n}\n\n.result-highlight {\n  color: #98FB98;\n}\n\n.result-accent {\n  color: #FFB6C1;\n}\n\n/* ========================================\n   EMPTY STATES\n   ======================================== */\n\n.empty-state {\n  text-align: center;\n  opacity: 0.7;\n  font-size: 14px;\n  margin-top: 60px;\n}\n\n.empty-icon {\n  font-size: 48px;\n  margin-bottom: 16px;\n}\n\n.empty-title {\n  font-size: 18px;\n  font-weight: 600;\n  margin-bottom: 8px;\n}\n\n.empty-description {\n  line-height: 1.5;\n}\n\n.empty-meta {\n  margin-top: 20px;\n  font-size: 12px;\n  line-height: 1.5;\n}\n\n.empty-meta strong {\n  color: #FFD700;\n}\n\n/* ========================================\n   RESPONSIVE DESIGN\n   ======================================== */\n\n@media (max-width: 768px) {\n  .grid-2 {\n    grid-template-columns: 1fr;\n  }\n  \n  .grid-3 {\n    grid-template-columns: 1fr;\n  }\n  \n  .hero-title {\n    font-size: 32px;\n  }\n  \n  .hero-stats {\n    flex-direction: column;\n    gap: 20px;\n  }\n  \n  .page-container {\n    padding: 10px;\n  }\n  \n  .card {\n    padding: 20px;\n  }\n}\n\n@media (max-width: 480px) {\n  .hero-title {\n    font-size: 24px;\n  }\n  \n  .card-title {\n    font-size: 24px;\n  }\n  \n  .calculator-header,\n  .results-header {\n    font-size: 20px;\n  }\n}\n\n/* ========================================\n   UTILITIES\n   ======================================== */\n\n.text-center { text-align: center; }\n.text-left { text-align: left; }\n.text-right { text-align: right; }\n\n.mb-10 { margin-bottom: 10px; }\n.mb-20 { margin-bottom: 20px; }\n.mb-30 { margin-bottom: 30px; }\n\n.mt-10 { margin-top: 10px; }\n.mt-20 { margin-top: 20px; }\n.mt-30 { margin-top: 30px; }\n\n.opacity-50 { opacity: 0.5; }\n.opacity-70 { opacity: 0.7; }\n.opacity-80 { opacity: 0.8; }\n.opacity-90 { opacity: 0.9; }\n\n.font-bold { font-weight: 700; }\n.font-semibold { font-weight: 600; }\n\n.color-gold { color: #FFD700; }\n.color-green { color: #98FB98; }\n.color-pink { color: #FFB6C1; }","size_bytes":5251},"src/styles/pages.css":{"content":"/* ========================================\n   PAGE-SPECIFIC STYLES\n   Home, login, register, account, credit application pages\n   ======================================== */\n\n/* ========================================\n   HOME PAGE SPECIFIC\n   ======================================== */\n\n.home-container {\n  min-height: 100vh;\n}\n\n.home-content {\n  padding: 20px;\n  text-align: center;\n}\n\n.home-content-wrapper {\n  max-width: 800px;\n  margin: 0 auto;\n}\n\n.welcome-text {\n  font-size: 18px;\n  line-height: 1.6;\n  margin-bottom: 30px;\n}\n\n/* ========================================\n   DEPOSIT CALCULATOR\n   ======================================== */\n\n.deposit-calculator {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  border-radius: 20px;\n  padding: 40px;\n  color: #ffffff;\n  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\n  margin-bottom: 40px;\n}\n\n.deposit-calculator-grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 40px;\n  align-items: start;\n}\n\n.deposit-calculator-title {\n  font-size: 28px;\n  font-weight: 700;\n  margin-bottom: 8px;\n  color: #ffffff;\n}\n\n.deposit-calculator-subtitle {\n  font-size: 16px;\n  opacity: 0.9;\n  margin-bottom: 30px;\n  line-height: 1.6;\n}\n\n.calculator-results {\n  background: #808080;\n  border-radius: 16px;\n  padding: 30px;\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.calculator-results-title {\n  font-size: 20px;\n  font-weight: 600;\n  margin-bottom: 20px;\n  color: #ffffff;\n  text-align: center;\n}\n\n.deposit-results-grid {\n  display: grid;\n  gap: 15px;\n}\n\n.deposit-result-item {\n  display: flex;\n  justify-content: space-between;\n  padding: 12px;\n  background: #808080;\n  border-radius: 8px;\n}\n\n.deposit-result-item-enhanced {\n  display: flex;\n  justify-content: space-between;\n  padding: 12px;\n  background: rgba(255, 255, 255, 0.15);\n  border-radius: 8px;\n}\n\n.deposit-result-item-total {\n  display: flex;\n  justify-content: space-between;\n  padding: 15px;\n  background: rgba(255, 255, 255, 0.2);\n  border-radius: 10px;\n  border: 2px solid rgba(255, 255, 255, 0.3);\n}\n\n.deposit-result-label {\n  font-size: 14px;\n  opacity: 0.8;\n}\n\n.deposit-result-value {\n  font-weight: 600;\n}\n\n.deposit-result-value-green {\n  font-weight: 600;\n  color: #90EE90;\n}\n\n.deposit-result-value-pink {\n  font-weight: 600;\n  color: #FFB6C1;\n}\n\n.deposit-result-value-light-green {\n  font-weight: 600;\n  color: #98FB98;\n}\n\n.deposit-result-value-total {\n  font-size: 18px;\n  font-weight: 700;\n  color: #FFD700;\n}\n\n.deposit-divider {\n  border: none;\n  border-top: 1px solid rgba(255, 255, 255, 0.2);\n  margin: 15px 0;\n}\n\n.deposit-divider-thick {\n  border: none;\n  border-top: 1px solid rgba(255, 255, 255, 0.3);\n  margin: 15px 0;\n}\n\n.deposit-footer-info {\n  text-align: center;\n  margin-top: 15px;\n  padding: 12px;\n  font-size: 12px;\n  opacity: 0.8;\n  background: #808080;\n  border-radius: 8px;\n}\n\n.deposit-disclaimer {\n  margin-top: 5px;\n  font-size: 11px;\n}\n\n.deposit-empty-state {\n  text-align: center;\n  opacity: 0.7;\n  font-size: 14px;\n  margin-top: 60px;\n}\n\n.deposit-empty-icon {\n  font-size: 48px;\n  margin-bottom: 16px;\n}\n\n.deposit-empty-info {\n  margin-top: 20px;\n  font-size: 12px;\n  line-height: 1.5;\n}\n\n/* ========================================\n   LOAN CALCULATOR\n   ======================================== */\n\n.loan-calculator {\n  background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);\n  border-radius: 20px;\n  padding: 40px;\n  color: #ffffff;\n  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\n  margin-bottom: 40px;\n}\n\n.loan-calculator-grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 40px;\n  align-items: start;\n}\n\n.loan-calculator-title {\n  font-size: 28px;\n  font-weight: 700;\n  margin-bottom: 8px;\n  color: #ffffff;\n}\n\n.loan-calculator-subtitle {\n  font-size: 16px;\n  opacity: 0.9;\n  margin-bottom: 30px;\n  line-height: 1.6;\n}\n\n.loan-rate-info {\n  padding: 15px;\n  background: #808080;\n  border-radius: 8px;\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.loan-rate-title {\n  font-size: 14px;\n  font-weight: 600;\n  color: #ffffff;\n  margin-bottom: 8px;\n}\n\n.loan-rate-details {\n  font-size: 12px;\n  opacity: 0.9;\n  line-height: 1.4;\n}\n\n.loan-results-grid {\n  display: grid;\n  gap: 15px;\n}\n\n.loan-result-item {\n  display: flex;\n  justify-content: space-between;\n  padding: 12px;\n  background: #808080;\n  border-radius: 8px;\n}\n\n.loan-result-item-enhanced {\n  display: flex;\n  justify-content: space-between;\n  padding: 12px;\n  background: rgba(255, 255, 255, 0.15);\n  border-radius: 8px;\n}\n\n.loan-result-item-total {\n  display: flex;\n  justify-content: space-between;\n  padding: 15px;\n  background: rgba(255, 255, 255, 0.2);\n  border-radius: 10px;\n  border: 2px solid rgba(255, 255, 255, 0.3);\n}\n\n.loan-result-label {\n  font-size: 14px;\n  opacity: 0.8;\n}\n\n.loan-result-value {\n  font-weight: 600;\n}\n\n.loan-result-value-total {\n  font-size: 18px;\n  font-weight: 700;\n  color: #FFD700;\n}\n\n.loan-result-total-label {\n  font-size: 16px;\n  font-weight: 600;\n}\n\n.loan-divider {\n  border: none;\n  border-top: 1px solid rgba(255, 255, 255, 0.2);\n  margin: 15px 0;\n}\n\n.loan-divider-thick {\n  border: none;\n  border-top: 1px solid rgba(255, 255, 255, 0.3);\n  margin: 15px 0;\n}\n\n.loan-footer-info {\n  text-align: center;\n  margin-top: 15px;\n  padding: 12px;\n  font-size: 12px;\n  opacity: 0.8;\n  background: #808080;\n  border-radius: 8px;\n}\n\n.loan-empty-state {\n  text-align: center;\n  opacity: 0.7;\n  font-size: 14px;\n  margin-top: 60px;\n}\n\n.loan-empty-icon {\n  font-size: 48px;\n  margin-bottom: 16px;\n}\n\n.loan-empty-info {\n  margin-top: 20px;\n  font-size: 12px;\n  line-height: 1.5;\n}\n\n.strong-text {\n  font-weight: 600;\n}\n\n/* ========================================\n   ACCOUNT PAGE SPECIFIC\n   ======================================== */\n\n.account-page-container {\n  min-height: 100vh;\n  padding: 20px;\n}\n\n.account-loading-container {\n  min-height: 100vh;\n  padding: 20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.account-main-wrapper {\n  max-width: 800px;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.account-header {\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n.account-welcome-title {\n  color: #007bff;\n  margin-bottom: 10px;\n}\n\n.account-welcome-subtitle {\n  opacity: 0.8;\n}\n\n.account-info-card {\n  padding: 30px;\n  border-radius: 12px;\n  border: 2px solid #007bff;\n  box-shadow: 0 4px 12px rgba(0, 123, 255, 0.15);\n}\n\n.account-info-title {\n  margin-top: 0;\n  margin-bottom: 25px;\n  color: #007bff;\n  text-align: center;\n  font-size: 24px;\n}\n\n.account-details-grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 20px;\n  margin-bottom: 25px;\n}\n\n.account-details-secondary-grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 20px;\n  margin-bottom: 20px;\n}\n\n.account-number-box {\n  padding: 20px;\n  background-color: rgba(0, 123, 255, 0.1);\n  border-radius: 8px;\n  text-align: center;\n}\n\n.account-balance-box {\n  padding: 20px;\n  background-color: rgba(40, 167, 69, 0.1);\n  border-radius: 8px;\n  text-align: center;\n}\n\n.account-type-box {\n  padding: 15px;\n  background-color: rgba(108, 117, 125, 0.1);\n  border-radius: 8px;\n  text-align: center;\n}\n\n.account-status-box {\n  padding: 15px;\n  background-color: rgba(23, 162, 184, 0.1);\n  border-radius: 8px;\n  text-align: center;\n}\n\n.account-field-label {\n  font-size: 14px;\n  opacity: 0.8;\n  margin-bottom: 8px;\n}\n\n.account-field-label-small {\n  font-size: 14px;\n  opacity: 0.8;\n  margin-bottom: 5px;\n}\n\n.account-number-value {\n  font-size: 20px;\n  font-weight: bold;\n  color: #007bff;\n  letter-spacing: 1px;\n}\n\n.account-balance-value {\n  font-size: 24px;\n  font-weight: bold;\n  color: #28a745;\n}\n\n.account-info-value {\n  font-size: 16px;\n  font-weight: bold;\n}\n\n.account-status-value {\n  font-size: 16px;\n  font-weight: bold;\n  color: #28a745;\n}\n\n.account-date-info {\n  text-align: center;\n  font-size: 14px;\n  opacity: 0.7;\n  padding: 10px;\n}\n\n.account-services-card {\n  padding: 20px;\n  border-radius: 8px;\n  text-align: center;\n}\n\n.account-services-title {\n  margin-top: 0;\n  margin-bottom: 15px;\n  color: #007bff;\n}\n\n.account-services-description {\n  opacity: 0.8;\n  margin-bottom: 15px;\n}\n\n.account-development-notice {\n  padding: 15px;\n  background-color: rgba(255, 193, 7, 0.1);\n  border-radius: 8px;\n  font-style: italic;\n}\n\n.account-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 20px;\n  margin-bottom: 30px;\n}\n\n.account-card {\n  background: #808080;\n  border-radius: var(--border-radius);\n  padding: 20px;\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.account-label {\n  font-size: 14px;\n  opacity: 0.8;\n  margin-bottom: 8px;\n}\n\n.account-value {\n  font-size: 18px;\n  font-weight: 600;\n  color: var(--text-light);\n}\n\n.account-highlight {\n  color: #FFD700;\n  font-size: 24px;\n  font-weight: 700;\n}\n\n/* ========================================\n   REGISTER PAGE SPECIFIC\n   ======================================== */\n\n.register-container {\n  min-height: 100vh;\n  padding: 20px;\n}\n\n.register-content {\n  max-width: 600px;\n  margin: 0 auto;\n}\n\n.register-header {\n  text-align: center;\n  margin-bottom: 30px;\n}\n\n.register-title {\n  font-size: 28px;\n  font-weight: 700;\n  margin-bottom: 8px;\n  color: var(--text-light);\n}\n\n.register-subtitle {\n  font-size: 20px;\n  font-weight: 600;\n  margin-bottom: 20px;\n  color: var(--text-light);\n}\n\n/* ========================================\n   LOGIN PAGE\n   ======================================== */\n\n.login-page {\n  min-height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.login-container {\n  max-width: 400px;\n  padding: 20px;\n}\n\n.login-header {\n  text-align: center;\n  margin-bottom: 30px;\n}\n\n.login-title {\n  font-size: 32px;\n  font-weight: 700;\n  margin-bottom: 8px;\n  color: var(--text-light);\n}\n\n.login-subtitle {\n  font-size: 20px;\n  font-weight: 600;\n  margin-bottom: 16px;\n  color: var(--text-light);\n}\n\n/* ========================================\n   CREDIT APPLICATION PAGE SPECIFIC\n   ======================================== */\n\n.credit-application-page {\n  min-height: 100vh;\n  padding: 20px;\n}\n\n.credit-application-page.theme-light {\n  background-color: #f8f9fa;\n}\n\n.credit-application-page.theme-dark {\n  background-color: #1a1a1a;\n}\n\n.credit-application-container {\n  max-width: 800px;\n  margin: 0 auto;\n  border-radius: 12px;\n  padding: 32px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.credit-application-container.theme-light {\n  background-color: white;\n}\n\n.credit-application-container.theme-dark {\n  background-color: #2d2d2d;\n}\n\n.credit-application-title {\n  text-align: center;\n  margin-bottom: 32px;\n  font-size: 28px;\n  font-weight: bold;\n}\n\n.credit-application-title.theme-light {\n  color: #333;\n}\n\n.credit-application-title.theme-dark {\n  color: white;\n}\n\n.credit-application-button-container {\n  display: flex;\n  gap: 16px;\n  margin-bottom: 24px;\n}\n\n.credit-application-analyze-button {\n  flex: 1;\n  padding: 14px 24px;\n  font-size: 16px;\n  font-weight: bold;\n  border: none;\n  border-radius: 8px;\n  color: white;\n  transition: var(--transition);\n}\n\n.credit-application-analyze-button.enabled {\n  background-color: #007bff;\n  cursor: pointer;\n  opacity: 1;\n}\n\n.credit-application-analyze-button.enabled:hover {\n  background-color: #0056b3;\n  transform: translateY(-1px);\n}\n\n.credit-application-analyze-button.disabled {\n  background-color: #6c757d;\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n/* ========================================\n   RESPONSIVE DESIGN FOR PAGES\n   ======================================== */\n\n@media (max-width: 768px) {\n  .register-content {\n    max-width: 100%;\n    padding: 0 10px;\n  }\n  \n  .deposit-calculator-grid,\n  .loan-calculator-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .account-details-grid,\n  .account-details-secondary-grid {\n    grid-template-columns: 1fr;\n  }\n}","size_bytes":11846},"src/components/CreditCalculator.tsx":{"content":"import { useState } from 'react'\nimport { useTheme } from '../context/ThemeContext'\nimport { useCreditCalculator } from '../features/credit/hooks/useCreditCalculator'\nimport { CREDIT_CONSTANTS } from '../features/credit/constants'\n\ninterface CreditCalculatorProps {\n  className?: string\n}\n\nexport default function CreditCalculator({ className = '' }: CreditCalculatorProps) {\n  const { theme } = useTheme()\n  \n  // Kredi hesaplama state'leri\n  const [loanAmount, setLoanAmount] = useState('')\n  const [loanTerm, setLoanTerm] = useState('36')\n  \n  // Shared credit calculator hook\n  const loanCalculation = useCreditCalculator(loanAmount, loanTerm)\n  \n  // Simple validation function for loan inputs\n  const validateLoanInputs = () => {\n    const principal = parseFloat(loanAmount)\n    const months = parseInt(loanTerm)\n    \n    if (!principal || !months || principal <= 0 || months <= 0) {\n      alert('Lütfen geçerli değerler girin.')\n      return false\n    }\n    return true\n  }\n\n  return (\n    <div className={`loan-calculator ${className}`}>\n      <div className=\"loan-calculator-grid\">\n        <div>\n          <h2 className=\"loan-calculator-title\">\n            Kredi Hesaplama\n          </h2>\n          <p className=\"loan-calculator-subtitle\">\n            KKDF (%15) ve BSMV (%15) vergileri dahil kredi taksitinizi hesaplayın. \n            Kredi başvuru sayfasıyla aynı hesaplama algoritması.\n          </p>\n          \n          <div className=\"calculator-form-grid\">\n            <div>\n              <label className=\"form-label\">\n                Kredi Tutarı (TL)\n              </label>\n              <input\n                type=\"number\"\n                value={loanAmount}\n                onChange={(e) => setLoanAmount(e.target.value)}\n                placeholder=\"örnek: 200000\"\n                min=\"1000\"\n                step=\"1000\"\n                className=\"calculator-input\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"form-label\">\n                Vade (Ay)\n              </label>\n              <select\n                value={loanTerm}\n                onChange={(e) => setLoanTerm(e.target.value)}\n                className=\"calculator-input\"\n              >\n                <option value=\"12\">12 Ay (1 Yıl)</option>\n                <option value=\"24\">24 Ay (2 Yıl)</option>\n                <option value=\"36\">36 Ay (3 Yıl)</option>\n                <option value=\"48\">48 Ay (4 Yıl)</option>\n                <option value=\"60\">60 Ay (5 Yıl)</option>\n                <option value=\"72\">72 Ay (6 Yıl)</option>\n                <option value=\"84\">84 Ay (7 Yıl)</option>\n                <option value=\"96\">96 Ay (8 Yıl)</option>\n                <option value=\"120\">120 Ay (10 Yıl)</option>\n                <option value=\"180\">180 Ay (15 Yıl)</option>\n                <option value=\"240\">240 Ay (20 Yıl)</option>\n              </select>\n            </div>\n            \n            <div className=\"loan-rate-info\">\n              <div className=\"loan-rate-title\">\n                Sabit Faiz Oranları (Kredi Başvuru Sayfasıyla Aynı)\n              </div>\n              <div className=\"loan-rate-details\">\n                • Aylık Faiz Oranı: %4.09<br/>\n                • KKDF: %15<br/>\n                • BSMV: %15<br/>\n                • Efektif Oran: %5.28\n              </div>\n            </div>\n            \n            <button\n              onClick={() => validateLoanInputs()}\n              className=\"calculator-button\"\n            >\n              Kredi Hesapla\n            </button>\n          </div>\n        </div>\n        \n        <div className=\"calculator-results\">\n          <h3 className=\"calculator-results-title\">\n            Kredi Hesaplama Sonuçları\n          </h3>\n          \n          {Number(loanAmount) > 0 && Number(loanTerm) > 0 && loanCalculation ? (\n            <div className=\"loan-results-grid\">\n              <div className=\"deposit-result-item\">\n                <span className=\"deposit-result-label\">Kredi Tutarı:</span>\n                <span className=\"deposit-result-value\">\n                  {Number(loanAmount || 0).toLocaleString('tr-TR')} TL\n                </span>\n              </div>\n              \n              <div className=\"deposit-result-item\">\n                <span className=\"deposit-result-label\">Vade:</span>\n                <span className=\"deposit-result-value\">\n                  {Number(loanTerm || 0)} ay\n                </span>\n              </div>\n              \n              <div className=\"deposit-result-item\">\n                <span className=\"deposit-result-label\">Aylık Faiz Oranı:</span>\n                <span className=\"deposit-result-value\">%{CREDIT_CONSTANTS.FIXED_INTEREST_RATE}</span>\n              </div>\n              \n              <div className=\"deposit-result-item-enhanced\">\n                <span className=\"deposit-result-label\">Efektif Faiz (KKDF+BSMV):</span>\n                <span className=\"deposit-result-value-pink\">\n                  %{(CREDIT_CONSTANTS.FIXED_INTEREST_RATE * (1 + CREDIT_CONSTANTS.KKDF_RATE + CREDIT_CONSTANTS.BSMV_RATE)).toFixed(2)}\n                </span>\n              </div>\n              \n              <hr className=\"deposit-divider\" />\n              \n              <div className=\"deposit-result-item-total\">\n                <span className=\"loan-result-total-label\">Aylık Taksit:</span>\n                <span className=\"deposit-result-value-total\">\n                  {Number(loanCalculation?.monthlyPayment ?? 0).toLocaleString('tr-TR', {\n                    minimumFractionDigits: 2,\n                    maximumFractionDigits: 2\n                  })} TL\n                </span>\n              </div>\n              \n              <div className=\"deposit-result-item\">\n                <span className=\"deposit-result-label\">Toplam Geri Ödeme:</span>\n                <span className=\"deposit-result-value-light-green\">\n                  {Number(loanCalculation?.totalPayment ?? 0).toLocaleString('tr-TR', {\n                    minimumFractionDigits: 2,\n                    maximumFractionDigits: 2\n                  })} TL\n                </span>\n              </div>\n              \n              <div className=\"deposit-result-item\">\n                <span className=\"deposit-result-label\">Toplam Faiz:</span>\n                <span className=\"deposit-result-value-pink\">\n                  {Number(loanCalculation?.totalInterest ?? 0).toLocaleString('tr-TR', {\n                    minimumFractionDigits: 2,\n                    maximumFractionDigits: 2\n                  })} TL\n                </span>\n              </div>\n              \n              <div className=\"deposit-result-item\">\n                <span className=\"loan-result-label\">KKDF (%15):</span>\n                <span className=\"loan-result-value\">\n                  Faiz üzerinden hesaplanır\n                </span>\n              </div>\n              \n              <div className=\"deposit-result-item\">\n                <span className=\"loan-result-label\">BSMV (%10):</span>\n                <span className=\"loan-result-value\">\n                  Faiz üzerinden hesaplanır\n                </span>\n              </div>\n              \n              <div className=\"deposit-footer-info\">\n                <div>Toplam Vergi: Faiz üzerinden hesaplanır</div>\n                <div className=\"deposit-disclaimer\">\n                  * Hesaplamalar bilgilendirme amaçlıdır. Gerçek oranlar değişebilir.\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"deposit-empty-state\">\n              <div className=\"deposit-empty-icon\">Hesaplama</div>\n              <p>Kredi taksitinizi hesaplamak için<br />bilgileri doldurun ve \"Kredi Hesapla\" butonuna basın.</p>\n              \n              <div className=\"deposit-empty-info\">\n                <div><strong>Minimum Tutar:</strong> 1.000 TL</div>\n                <div><strong>Vade Seçenekleri:</strong> 12 ay - 240 ay</div>\n                <div><strong>🏦 Vergiler:</strong> KKDF %15 + BSMV %15</div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":8165},"src/components/DepositCalculator.tsx":{"content":"import { useState } from 'react'\nimport { useTheme } from '../context/ThemeContext'\n\ninterface DepositCalculationResult {\n  principal: number\n  days: number\n  annualRate: number\n  grossInterest: number\n  withholdingTax: number\n  netInterest: number\n  totalAmount: number\n  effectiveAnnualRate: number\n}\n\ninterface DepositCalculatorProps {\n  className?: string\n}\n\nexport default function DepositCalculator({ className = '' }: DepositCalculatorProps) {\n  const { theme } = useTheme()\n  \n  // Vadeli mevduat hesaplama state'leri\n  const [depositAmount, setDepositAmount] = useState('')\n  const [depositTerm, setDepositTerm] = useState('90')\n  const [interestRate, setInterestRate] = useState('45') // Yıllık faiz oranı %\n  const [calculationResult, setCalculationResult] = useState<DepositCalculationResult | null>(null)\n  \n  // Vadeli mevduat hesaplama fonksiyonu\n  const calculateDeposit = () => {\n    const principal = parseFloat(depositAmount)\n    const days = parseInt(depositTerm)\n    const annualRate = parseFloat(interestRate)\n    \n    if (!principal || !days || !annualRate || principal <= 0) {\n      alert('Lütfen geçerli değerler girin.')\n      return\n    }\n    \n    // Türk bankacılığı vadeli mevduat hesaplama formülü\n    const grossInterest = (principal * annualRate * days) / (365 * 100)\n    const withholdingTax = grossInterest * 0.175 // %17.5 stopaj vergisi\n    const netInterest = grossInterest - withholdingTax\n    const totalAmount = principal + netInterest\n    \n    // Daily effective rate calculation\n    const effectiveAnnualRate = ((totalAmount / principal) ** (365 / days) - 1) * 100\n    \n    setCalculationResult({\n      principal,\n      days,\n      annualRate,\n      grossInterest,\n      withholdingTax,\n      netInterest,\n      totalAmount,\n      effectiveAnnualRate\n    })\n  }\n  \n  return (\n    <div className={`deposit-calculator ${className}`}>\n      <div className=\"deposit-calculator-grid\">\n        <div>\n          <h2 className=\"deposit-calculator-title\">\n            Vadeli Mevduat Hesaplama\n          </h2>\n          <p className=\"deposit-calculator-subtitle\">\n            Yıllık %50'ye varan faiz oranları ile vadeli mevduatınızın getirisini hesaplayın. \n            Stopaj vergisi (%17.5) otomatik olarak hesaplanır.\n          </p>\n          \n          <div className=\"calculator-form-grid\">\n            <div>\n              <label className=\"form-label\">\n                Mevduat Tutarı (TL)\n              </label>\n              <input\n                type=\"number\"\n                value={depositAmount}\n                onChange={(e) => setDepositAmount(e.target.value)}\n                placeholder=\"örnek: 100000\"\n                min=\"1000\"\n                step=\"1000\"\n                className=\"calculator-input\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"form-label\">\n                Vade (Gün Sayısı) - Manuel Giriş\n              </label>\n              <input\n                type=\"number\"\n                value={depositTerm}\n                onChange={(e) => setDepositTerm(e.target.value)}\n                placeholder=\"örnek: 90\"\n                min=\"1\"\n                max=\"3650\"\n                step=\"1\"\n                className=\"calculator-input\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"form-label\">\n                Yıllık Faiz Oranı (%) - Manuel Giriş\n              </label>\n              <input\n                type=\"number\"\n                value={interestRate}\n                onChange={(e) => setInterestRate(e.target.value)}\n                min=\"1\"\n                max=\"80\"\n                step=\"0.1\"\n                className=\"calculator-input\"\n              />\n            </div>\n            \n            <button\n              onClick={calculateDeposit}\n              className=\"calculator-button\"\n            >\n              Hesapla\n            </button>\n          </div>\n        </div>\n        \n        <div className=\"calculator-results\">\n          <h3 className=\"calculator-results-title\">\n            Hesaplama Sonuçları\n          </h3>\n          \n          {calculationResult ? (\n            <div className=\"deposit-results-grid\">\n              <div className=\"deposit-result-item\">\n                <span className=\"deposit-result-label\">Ana Para:</span>\n                <span className=\"deposit-result-value\">\n                  {calculationResult.principal.toLocaleString('tr-TR')} TL\n                </span>\n              </div>\n              \n              <div className=\"deposit-result-item\">\n                <span className=\"deposit-result-label\">Vade:</span>\n                <span className=\"deposit-result-value\">\n                  {calculationResult.days} gün\n                </span>\n              </div>\n              \n              <div className=\"deposit-result-item\">\n                <span className=\"deposit-result-label\">Yıllık Faiz Oranı:</span>\n                <span className=\"deposit-result-value\">%{calculationResult.annualRate}</span>\n              </div>\n              \n              <hr className=\"deposit-divider\" />\n              \n              <div className=\"deposit-result-item-enhanced\">\n                <span className=\"deposit-result-label\">Brüt Faiz Geliri:</span>\n                <span className=\"deposit-result-value-green\">\n                  {calculationResult.grossInterest.toLocaleString('tr-TR', {\n                    minimumFractionDigits: 2,\n                    maximumFractionDigits: 2\n                  })} TL\n                </span>\n              </div>\n              \n              <div className=\"deposit-result-item\">\n                <span className=\"deposit-result-label\">Stopaj Vergisi (%17.5):</span>\n                <span className=\"deposit-result-value-pink\">\n                  -{calculationResult.withholdingTax.toLocaleString('tr-TR', {\n                    minimumFractionDigits: 2,\n                    maximumFractionDigits: 2\n                  })} TL\n                </span>\n              </div>\n              \n              <div className=\"deposit-result-item\">\n                <span className=\"deposit-result-label\">Net Faiz Geliri:</span>\n                <span className=\"deposit-result-value-light-green\">\n                  {calculationResult.netInterest.toLocaleString('tr-TR', {\n                    minimumFractionDigits: 2,\n                    maximumFractionDigits: 2\n                  })} TL\n                </span>\n              </div>\n              \n              <hr className=\"deposit-divider-thick\" />\n              \n              <div className=\"deposit-result-item-total\">\n                <span className=\"loan-result-total-label\">Toplam Tutar:</span>\n                <span className=\"deposit-result-value-total\">\n                  {calculationResult.totalAmount.toLocaleString('tr-TR', {\n                    minimumFractionDigits: 2,\n                    maximumFractionDigits: 2\n                  })} TL\n                </span>\n              </div>\n              \n              <div className=\"deposit-footer-info\">\n                <div>Efektif Yıllık Getiri: %{calculationResult.effectiveAnnualRate.toFixed(2)}</div>\n                <div className=\"deposit-disclaimer\">\n                  * Hesaplamalar bilgilendirme amaçlıdır. Gerçek oranlar değişebilir.\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"deposit-empty-state\">\n              <div className=\"deposit-empty-icon\">Hesaplama</div>\n              <p>Vadeli mevduat getirinizi hesaplamak için<br />bilgileri doldurun ve \"Hesapla\" butonuna basın.</p>\n              \n              <div className=\"deposit-empty-info\">\n                <div><strong>Minimum Tutar:</strong> 1.000 TL</div>\n                <div><strong>Vade:</strong> Manuel giriş (örnek: 90 gün)</div>\n                <div><strong>Faiz Oranı:</strong> Manuel giriş (örnek: %45)</div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":8059},"src/utils/mockData.ts":{"content":"/**\n * Mock data utilities for development environment\n * Contains test users and functions to populate forms with mock data\n */\n\nexport interface MockUser {\n  name: string\n  email: string\n  age: string\n  profession: string\n  experience: string\n  sector: string\n  salary: string\n  additionalIncome: string\n}\n\nexport interface LoginTestData {\n  email: string\n  password: string\n}\n\n// Mock users array for testing\nexport const TEST_USERS: MockUser[] = [\n  {\n    name: 'Ali Yılmaz',\n    email: 'ali.yilmaz@gmail.com',\n    age: '32',\n    profession: 'Mühendis',\n    experience: '8',\n    sector: 'ozel',\n    salary: '45000',\n    additionalIncome: '5000'\n  },\n  {\n    name: 'Ayşe Kaya',\n    email: 'ayse.kaya@hotmail.com',\n    age: '28',\n    profession: 'Doktor',\n    experience: '5',\n    sector: 'kamu',\n    salary: '62000',\n    additionalIncome: '8000'\n  },\n  {\n    name: 'Mehmet Demir',\n    email: 'mehmet.demir@outlook.com',\n    age: '35',\n    profession: 'Bankacı',\n    experience: '12',\n    sector: 'ozel',\n    salary: '55000',\n    additionalIncome: '10000'\n  },\n  {\n    name: 'Fatma Şahin',\n    email: 'fatma.sahin@gmail.com',\n    age: '29',\n    profession: 'Öğretmen',\n    experience: '6',\n    sector: 'kamu',\n    salary: '25000',\n    additionalIncome: '3000'\n  },\n  {\n    name: 'Burak Özkan',\n    email: 'burak.ozkan@gmail.com',\n    age: '31',\n    profession: 'Pazarlama Uzmanı',\n    experience: '9',\n    sector: 'ozel',\n    salary: '38000',\n    additionalIncome: '7000'\n  }\n]\n\n// Default test password for all mock users\nexport const TEST_PASSWORD = 'test123456'\n\n/**\n * Gets login test data - uses Ali Yılmaz as default test user\n * Only works in development environment\n */\nexport const getTestLoginData = (): LoginTestData | null => {\n  if (!import.meta.env.DEV) {\n    return null\n  }\n  \n  return {\n    email: 'ali.yilmaz@gmail.com',\n    password: TEST_PASSWORD\n  }\n}\n\n/**\n * Gets a random mock user for registration form testing\n * Only works in development environment\n */\nexport const getRandomMockUser = (): (MockUser & { password: string; confirmPassword: string }) | null => {\n  if (!import.meta.env.DEV) {\n    return null\n  }\n  \n  const randomUser = TEST_USERS[Math.floor(Math.random() * TEST_USERS.length)]\n  \n  return {\n    ...randomUser,\n    password: TEST_PASSWORD,\n    confirmPassword: TEST_PASSWORD\n  }\n}\n\n/**\n * Function to fill login form with test data\n * @param setEmail - Email setter function from React state\n * @param setPassword - Password setter function from React state\n */\nexport const fillTestLoginData = (\n  setEmail: (email: string) => void,\n  setPassword: (password: string) => void\n): void => {\n  const testData = getTestLoginData()\n  \n  if (testData) {\n    setEmail(testData.email)\n    setPassword(testData.password)\n  }\n}\n\n/**\n * Function to fill registration form with random mock data\n * @param setters - Object containing all the setter functions from React state\n */\nexport const fillTestRegisterData = (setters: {\n  setName: (name: string) => void\n  setEmail: (email: string) => void\n  setPassword: (password: string) => void\n  setConfirmPassword: (confirmPassword: string) => void\n  setAge: (age: string) => void\n  setProfession: (profession: string) => void\n  setExperience: (experience: string) => void\n  setSector: (sector: string) => void\n  setSalary: (salary: string) => void\n  setAdditionalIncome: (additionalIncome: string) => void\n}): void => {\n  const mockUser = getRandomMockUser()\n  \n  if (mockUser) {\n    setters.setName(mockUser.name)\n    setters.setEmail(mockUser.email)\n    setters.setAge(mockUser.age)\n    setters.setProfession(mockUser.profession)\n    setters.setExperience(mockUser.experience)\n    setters.setSector(mockUser.sector)\n    setters.setSalary(mockUser.salary)\n    setters.setAdditionalIncome(mockUser.additionalIncome)\n    setters.setPassword(mockUser.password)\n    setters.setConfirmPassword(mockUser.confirmPassword)\n  }\n}\n\n/**\n * Check if development environment (utility function)\n */\nexport const isDevEnvironment = (): boolean => {\n  return import.meta.env.DEV\n}","size_bytes":4054},"src/features/credit/components/CreditApplicationForm.tsx":{"content":"import { useState } from 'react'\nimport type { CreditApplication } from '../types/credit'\n\ninterface CreditApplicationFormProps {\n  onFormDataChange: (formData: CreditApplication) => void\n  disabled?: boolean\n}\n\nexport function CreditApplicationForm({ onFormDataChange, disabled = false }: CreditApplicationFormProps) {\n  const [formData, setFormData] = useState<CreditApplication>({\n    loan_amount: 0,\n    loan_term_months: 0,\n    monthly_income: 22000,\n    additional_income: 3000,\n    expenses: 12000,\n    rent_payment: 2500,\n    age: 34,\n    employment_type: 'Özel Sektör',\n    work_experience: 6,\n    debt_to_income_ratio: 0.20,\n    existing_loans: 25000,\n    credit_card_limit: 30000,\n    credit_card_debt: 4000,\n    bank_balance: 35000,\n    investments: 75000,\n    real_estate_value: 450000,\n    kkb_score: 720,\n    payment_delays: 0,\n    home_ownership: 'owner',\n    residence_duration: 48,\n    customer_segment: 'mass',\n    existing_relationship: 24,\n    total_banking_products: 3,\n    defaulted_loans: false,\n    legal_issues: false,\n    has_insurance: true,\n    job_stability: 'stable'\n  })\n\n  const updateFormData = (field: keyof CreditApplication, value: any) => {\n    const updatedFormData = { ...formData, [field]: value }\n    setFormData(updatedFormData)\n    onFormDataChange(updatedFormData)\n  }\n\n  const fillTestData = () => {\n    const testData: CreditApplication = {\n      loan_amount: 0,\n      loan_term_months: 0,\n      monthly_income: 22000,\n      additional_income: 3000,\n      expenses: 12000,\n      rent_payment: 2500,\n      age: 34,\n      employment_type: 'Özel Sektör',\n      work_experience: 6,\n      debt_to_income_ratio: 0.20,\n      existing_loans: 25000,\n      credit_card_limit: 30000,\n      credit_card_debt: 4000,\n      bank_balance: 35000,\n      investments: 75000,\n      real_estate_value: 450000,\n      kkb_score: 720,\n      payment_delays: 0,\n      home_ownership: 'owner',\n      residence_duration: 48,\n      customer_segment: 'mass',\n      existing_relationship: 24,\n      total_banking_products: 3,\n      defaulted_loans: false,\n      legal_issues: false,\n      has_insurance: true,\n      job_stability: 'stable'\n    }\n    setFormData(testData)\n    onFormDataChange(testData)\n  }\n\n  return (\n    <div className=\"register-form\">\n      <button \n        type=\"button\" \n        className=\"test-data-btn\" \n        onClick={fillTestData}\n        disabled={disabled}\n      >\n        📝 Test Verilerini Doldur\n      </button>\n\n      {/* Personal Information Section */}\n      <div className=\"register-section\">\n        <h3 className=\"register-section-title\">👤 Kişisel Bilgiler</h3>\n        <div className=\"form-grid-2\">\n          <div className=\"form-field\">\n            <label>Yaş</label>\n            <input\n              type=\"number\"\n              value={formData.age}\n              onChange={(e) => updateFormData('age', parseInt(e.target.value) || 0)}\n              placeholder=\"Yaşınızı giriniz\"\n              min=\"18\"\n              max=\"80\"\n              disabled={disabled}\n            />\n          </div>\n          <div className=\"form-field\">\n            <label>İş Deneyimi (Yıl)</label>\n            <input\n              type=\"number\"\n              value={formData.work_experience}\n              onChange={(e) => updateFormData('work_experience', parseInt(e.target.value) || 0)}\n              placeholder=\"İş deneyiminizi giriniz\"\n              min=\"0\"\n              max=\"50\"\n              disabled={disabled}\n            />\n          </div>\n          <div className=\"form-field\">\n            <label>İstihdam Türü</label>\n            <select\n              value={formData.employment_type}\n              onChange={(e) => updateFormData('employment_type', e.target.value)}\n              disabled={disabled}\n            >\n              <option value=\"Özel Sektör\">Özel Sektör</option>\n              <option value=\"Kamu\">Kamu</option>\n              <option value=\"Serbest Meslek\">Serbest Meslek</option>\n              <option value=\"Emekli\">Emekli</option>\n              <option value=\"Öğrenci\">Öğrenci</option>\n            </select>\n          </div>\n          <div className=\"form-field\">\n            <label>İş Güvenliği</label>\n            <select\n              value={formData.job_stability}\n              onChange={(e) => updateFormData('job_stability', e.target.value)}\n              disabled={disabled}\n            >\n              <option value=\"stable\">Stabil</option>\n              <option value=\"unstable\">Stabil Değil</option>\n              <option value=\"temporary\">Geçici</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {/* Income Information Section */}\n      <div className=\"register-section\">\n        <h3 className=\"register-section-title\">💰 Gelir Bilgileri</h3>\n        <div className=\"form-grid-2\">\n          <div className=\"form-field\">\n            <label>Aylık Gelir (TL)</label>\n            <input\n              type=\"number\"\n              value={formData.monthly_income}\n              onChange={(e) => updateFormData('monthly_income', parseFloat(e.target.value) || 0)}\n              placeholder=\"Aylık gelirinizi giriniz\"\n              min=\"0\"\n              step=\"500\"\n              disabled={disabled}\n            />\n          </div>\n          <div className=\"form-field\">\n            <label>Ek Gelir (TL)</label>\n            <input\n              type=\"number\"\n              value={formData.additional_income}\n              onChange={(e) => updateFormData('additional_income', parseFloat(e.target.value) || 0)}\n              placeholder=\"Ek gelirinizi giriniz\"\n              min=\"0\"\n              step=\"100\"\n              disabled={disabled}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Expense Information Section */}\n      <div className=\"register-section\">\n        <h3 className=\"register-section-title\">📊 Gider Bilgileri</h3>\n        <div className=\"form-grid-2\">\n          <div className=\"form-field\">\n            <label>Aylık Giderler (TL)</label>\n            <input\n              type=\"number\"\n              value={formData.expenses}\n              onChange={(e) => updateFormData('expenses', parseFloat(e.target.value) || 0)}\n              placeholder=\"Aylık giderlerinizi giriniz\"\n              min=\"0\"\n              step=\"100\"\n              disabled={disabled}\n            />\n          </div>\n          <div className=\"form-field\">\n            <label>Kira Ödemesi (TL)</label>\n            <input\n              type=\"number\"\n              value={formData.rent_payment}\n              onChange={(e) => updateFormData('rent_payment', parseFloat(e.target.value) || 0)}\n              placeholder=\"Kira ödemenizi giriniz\"\n              min=\"0\"\n              step=\"100\"\n              disabled={disabled}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Financial Information Section */}\n      <div className=\"register-section\">\n        <h3 className=\"register-section-title\">🏦 Finansal Bilgiler</h3>\n        <div className=\"form-grid-2\">\n          <div className=\"form-field\">\n            <label>Mevcut Krediler (TL)</label>\n            <input\n              type=\"number\"\n              value={formData.existing_loans}\n              onChange={(e) => updateFormData('existing_loans', parseFloat(e.target.value) || 0)}\n              placeholder=\"Mevcut kredi borcunuz\"\n              min=\"0\"\n              step=\"1000\"\n              disabled={disabled}\n            />\n          </div>\n          <div className=\"form-field\">\n            <label>Kredi Kartı Limiti (TL)</label>\n            <input\n              type=\"number\"\n              value={formData.credit_card_limit}\n              onChange={(e) => updateFormData('credit_card_limit', parseFloat(e.target.value) || 0)}\n              placeholder=\"Kredi kartı limitiniz\"\n              min=\"0\"\n              step=\"1000\"\n              disabled={disabled}\n            />\n          </div>\n          <div className=\"form-field\">\n            <label>Kredi Kartı Borcu (TL)</label>\n            <input\n              type=\"number\"\n              value={formData.credit_card_debt}\n              onChange={(e) => updateFormData('credit_card_debt', parseFloat(e.target.value) || 0)}\n              placeholder=\"Kredi kartı borcunuz\"\n              min=\"0\"\n              step=\"100\"\n              disabled={disabled}\n            />\n          </div>\n          <div className=\"form-field\">\n            <label>Banka Bakiyesi (TL)</label>\n            <input\n              type=\"number\"\n              value={formData.bank_balance}\n              onChange={(e) => updateFormData('bank_balance', parseFloat(e.target.value) || 0)}\n              placeholder=\"Banka bakiyeniz\"\n              min=\"0\"\n              step=\"1000\"\n              disabled={disabled}\n            />\n          </div>\n          <div className=\"form-field\">\n            <label>Yatırımlar (TL)</label>\n            <input\n              type=\"number\"\n              value={formData.investments}\n              onChange={(e) => updateFormData('investments', parseFloat(e.target.value) || 0)}\n              placeholder=\"Yatırım portföyünüz\"\n              min=\"0\"\n              step=\"5000\"\n              disabled={disabled}\n            />\n          </div>\n          <div className=\"form-field\">\n            <label>Gayrimenkul Değeri (TL)</label>\n            <input\n              type=\"number\"\n              value={formData.real_estate_value}\n              onChange={(e) => updateFormData('real_estate_value', parseFloat(e.target.value) || 0)}\n              placeholder=\"Gayrimenkul değeriniz\"\n              min=\"0\"\n              step=\"10000\"\n              disabled={disabled}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Credit Information Section */}\n      <div className=\"register-section\">\n        <h3 className=\"register-section-title\">📈 Kredi Bilgileri</h3>\n        <div className=\"form-grid-2\">\n          <div className=\"form-field\">\n            <label>KKB Skoru</label>\n            <input\n              type=\"number\"\n              value={formData.kkb_score}\n              onChange={(e) => updateFormData('kkb_score', parseInt(e.target.value) || 0)}\n              placeholder=\"KKB skorunuz\"\n              min=\"300\"\n              max=\"900\"\n              disabled={disabled}\n            />\n          </div>\n          <div className=\"form-field\">\n            <label>Ödeme Gecikmeleri (Adet)</label>\n            <input\n              type=\"number\"\n              value={formData.payment_delays}\n              onChange={(e) => updateFormData('payment_delays', parseInt(e.target.value) || 0)}\n              placeholder=\"Ödeme gecikme sayısı\"\n              min=\"0\"\n              max=\"50\"\n              disabled={disabled}\n            />\n          </div>\n          <div className=\"form-field\">\n            <label>Borç/Gelir Oranı</label>\n            <input\n              type=\"number\"\n              value={formData.debt_to_income_ratio}\n              onChange={(e) => updateFormData('debt_to_income_ratio', parseFloat(e.target.value) || 0)}\n              placeholder=\"Borç/Gelir oranınız\"\n              min=\"0\"\n              max=\"1\"\n              step=\"0.01\"\n              disabled={disabled}\n            />\n          </div>\n          <div className=\"form-field\">\n            <label>Toplam Bankacılık Ürünü</label>\n            <input\n              type=\"number\"\n              value={formData.total_banking_products}\n              onChange={(e) => updateFormData('total_banking_products', parseInt(e.target.value) || 0)}\n              placeholder=\"Bankacılık ürün sayısı\"\n              min=\"0\"\n              max=\"20\"\n              disabled={disabled}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Housing Information Section */}\n      <div className=\"register-section\">\n        <h3 className=\"register-section-title\">🏠 Konut Bilgileri</h3>\n        <div className=\"form-grid-2\">\n          <div className=\"form-field\">\n            <label>Konut Sahipliği</label>\n            <select\n              value={formData.home_ownership}\n              onChange={(e) => updateFormData('home_ownership', e.target.value)}\n              disabled={disabled}\n            >\n              <option value=\"owner\">Ev Sahibi</option>\n              <option value=\"tenant\">Kiracı</option>\n              <option value=\"family\">Aile Yanında</option>\n            </select>\n          </div>\n          <div className=\"form-field\">\n            <label>İkamet Süresi (Ay)</label>\n            <input\n              type=\"number\"\n              value={formData.residence_duration}\n              onChange={(e) => updateFormData('residence_duration', parseInt(e.target.value) || 0)}\n              placeholder=\"İkamet süreniz (ay)\"\n              min=\"0\"\n              max=\"600\"\n              disabled={disabled}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Customer Information Section */}\n      <div className=\"register-section\">\n        <h3 className=\"register-section-title\">🎯 Müşteri Bilgileri</h3>\n        <div className=\"form-grid-2\">\n          <div className=\"form-field\">\n            <label>Müşteri Segmenti</label>\n            <select\n              value={formData.customer_segment}\n              onChange={(e) => updateFormData('customer_segment', e.target.value)}\n              disabled={disabled}\n            >\n              <option value=\"mass\">Bireysel</option>\n              <option value=\"premium\">Premium</option>\n              <option value=\"vip\">VIP</option>\n              <option value=\"corporate\">Kurumsal</option>\n            </select>\n          </div>\n          <div className=\"form-field\">\n            <label>Mevcut İlişki Süresi (Ay)</label>\n            <input\n              type=\"number\"\n              value={formData.existing_relationship}\n              onChange={(e) => updateFormData('existing_relationship', parseInt(e.target.value) || 0)}\n              placeholder=\"Banka ile ilişki süreniz\"\n              min=\"0\"\n              max=\"600\"\n              disabled={disabled}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Additional Information Section */}\n      <div className=\"register-section\">\n        <h3 className=\"register-section-title\">ℹ️ Ek Bilgiler</h3>\n        <div className=\"form-grid-2\">\n          <div className=\"form-field\">\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={formData.defaulted_loans}\n                onChange={(e) => updateFormData('defaulted_loans', e.target.checked)}\n                disabled={disabled}\n                style={{ marginRight: '8px' }}\n              />\n              Daha Önce Kredi Temerrüdü\n            </label>\n          </div>\n          <div className=\"form-field\">\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={formData.legal_issues}\n                onChange={(e) => updateFormData('legal_issues', e.target.checked)}\n                disabled={disabled}\n                style={{ marginRight: '8px' }}\n              />\n              Hukuki Sorun Var\n            </label>\n          </div>\n          <div className=\"form-field\">\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={formData.has_insurance}\n                onChange={(e) => updateFormData('has_insurance', e.target.checked)}\n                disabled={disabled}\n                style={{ marginRight: '8px' }}\n              />\n              Sigorta Sahibi\n            </label>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":15626},"src/services/creditService.ts":{"content":"export interface CreditCalculationResult {\n  monthlyPayment: number\n  totalPayment: number\n  totalInterest: number\n}\n\nexport interface CreditApplicationData {\n  amount: string\n  term: string\n}\n\nexport class CreditService {\n  private static readonly LOAN_RATE = 4.09\n  private static readonly KKDF_RATE = 0.15\n  private static readonly BSMV_RATE = 0.15\n\n  static calculatePayments(amount: string, term: string): CreditCalculationResult {\n    try {\n      if (!amount || !term) {\n        return { monthlyPayment: 0, totalPayment: 0, totalInterest: 0 }\n      }\n      \n      const loanAmount = parseFloat(amount)\n      const loanTerm = parseInt(term)\n      \n      if (isNaN(loanAmount) || isNaN(loanTerm) || loanAmount <= 0 || loanTerm <= 0) {\n        return { monthlyPayment: 0, totalPayment: 0, totalInterest: 0 }\n      }\n      \n      const rateCalculation = ((this.LOAN_RATE * (1 + this.KKDF_RATE + this.BSMV_RATE)) / 100) + 1\n      const totalRate = Number((rateCalculation || 0).toFixed(11))\n      \n      if (!totalRate || totalRate <= 1) {\n        return { monthlyPayment: 0, totalPayment: 0, totalInterest: 0 }\n      }\n      \n      const numerator = Math.pow(totalRate, loanTerm) * (totalRate - 1)\n      const denominator = Math.pow(totalRate, loanTerm) - 1\n      \n      if (denominator === 0) {\n        return { monthlyPayment: 0, totalPayment: 0, totalInterest: 0 }\n      }\n      \n      const rawPayment = (numerator / denominator) * loanAmount\n      \n      if (!rawPayment || isNaN(rawPayment) || !isFinite(rawPayment)) {\n        return { monthlyPayment: 0, totalPayment: 0, totalInterest: 0 }\n      }\n      \n      const monthlyPayment = Number((rawPayment || 0).toFixed(2))\n      const totalPayment = monthlyPayment * loanTerm\n      const totalInterest = totalPayment - loanAmount\n      \n      return { \n        monthlyPayment: monthlyPayment || 0, \n        totalPayment: totalPayment || 0, \n        totalInterest: totalInterest || 0 \n      }\n    } catch (error) {\n      console.error('Calculation error:', error)\n      return { monthlyPayment: 0, totalPayment: 0, totalInterest: 0 }\n    }\n  }\n\n  static async analyzeWithDecisionEngine(\n    amount: string, \n    term: string, \n    currentUser: any\n  ): Promise<any> {\n    if (!amount || !term || !currentUser) {\n      throw new Error('Gerekli bilgiler eksik')\n    }\n\n    try {\n      const response = await fetch('https://us-central1-finisbank.cloudfunctions.net/evaluate_credit', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          loan_amount: parseFloat(amount),\n          loan_term_months: parseInt(term),\n          monthly_income: 25000\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`)\n      }\n\n      return await response.json()\n    } catch (error) {\n      console.error('Decision engine error:', error)\n      throw new Error('Karar motoru hatası: ' + (error as Error).message)\n    }\n  }\n\n  static validateCreditApplication(amount: string, term: string): { isValid: boolean; error?: string } {\n    if (!amount || parseFloat(amount) < 1000) {\n      return { isValid: false, error: 'Minimum kredi tutarı 1.000 TL olmalıdır' }\n    }\n\n    if (!term || parseInt(term) < 3) {\n      return { isValid: false, error: 'Minimum vade 3 ay olmalıdır' }\n    }\n\n    if (parseFloat(amount) > 1000000) {\n      return { isValid: false, error: 'Maksimum kredi tutarı 1.000.000 TL olmalıdır' }\n    }\n\n    if (parseInt(term) > 240) {\n      return { isValid: false, error: 'Maksimum vade 240 ay olmalıdır' }\n    }\n\n    return { isValid: true }\n  }\n}","size_bytes":3655},"src/services/formService.ts":{"content":"export const PROFESSIONS = [\n  'Doktor', 'Mühendis', 'Öğretmen', 'Avukat', 'Hemşire', 'Polis', 'Asker',\n  'Muhasebeci', 'Pazarlama Uzmanı', 'Satış Temsilcisi', 'Tekniker', \n  'Bankacı', 'Emlakçı', 'Berber/Kuaför', 'Şoför', 'Aşçı', 'Garson',\n  'İnşaat İşçisi', 'Temizlik Görevlisi', 'Güvenlik Görevlisi', 'Öğrenci',\n  'Emekli', 'Ev Hanımı', 'Serbest Meslek', 'Diğer'\n]\n\nexport interface MockUserData {\n  name: string\n  email: string\n  age: string\n  profession: string\n  experience: string\n  sector: string\n  salary: string\n  additionalIncome: string\n}\n\nexport const MOCK_USERS: MockUserData[] = [\n  {\n    name: 'Ali Yılmaz',\n    email: 'ali.yilmaz@gmail.com',\n    age: '32',\n    profession: 'Mühendis',\n    experience: '8',\n    sector: 'ozel',\n    salary: '45000',\n    additionalIncome: '5000'\n  },\n  {\n    name: 'Ayşe Kaya',\n    email: 'ayse.kaya@hotmail.com',\n    age: '28',\n    profession: 'Doktor',\n    experience: '5',\n    sector: 'kamu',\n    salary: '62000',\n    additionalIncome: '8000'\n  },\n  {\n    name: 'Mehmet Demir',\n    email: 'mehmet.demir@outlook.com',\n    age: '35',\n    profession: 'Bankacı',\n    experience: '12',\n    sector: 'ozel',\n    salary: '55000',\n    additionalIncome: '10000'\n  },\n  {\n    name: 'Fatma Şahin',\n    email: 'fatma.sahin@gmail.com',\n    age: '29',\n    profession: 'Öğretmen',\n    experience: '6',\n    sector: 'kamu',\n    salary: '25000',\n    additionalIncome: '3000'\n  },\n  {\n    name: 'Burak Özkan',\n    email: 'burak.ozkan@gmail.com',\n    age: '31',\n    profession: 'Pazarlama Uzmanı',\n    experience: '9',\n    sector: 'ozel',\n    salary: '38000',\n    additionalIncome: '7000'\n  }\n]\n\nexport const MOCK_LOGIN_DATA = {\n  email: 'ali.yilmaz@gmail.com',\n  password: 'test123456'\n}\n\nexport class FormService {\n  static getRandomMockUser(): MockUserData {\n    return MOCK_USERS[Math.floor(Math.random() * MOCK_USERS.length)]\n  }\n\n  static getMockPassword(): string {\n    return 'test123456'\n  }\n\n  static validateRegistrationForm(data: {\n    password: string\n    confirmPassword: string\n    age: string\n    profession: string\n    sector: string\n  }): { isValid: boolean; error?: string } {\n    if (data.password !== data.confirmPassword) {\n      return { isValid: false, error: 'Şifreler eşleşmiyor!' }\n    }\n    \n    if (data.password.length < 6) {\n      return { isValid: false, error: 'Şifre en az 6 karakter olmalıdır!' }\n    }\n\n    if (parseInt(data.age) < 18) {\n      return { isValid: false, error: '18 yaşından küçük olamazsınız!' }\n    }\n\n    if (!data.profession) {\n      return { isValid: false, error: 'Lütfen mesleğinizi seçiniz!' }\n    }\n\n    if (!data.sector) {\n      return { isValid: false, error: 'Lütfen çalıştığınız sektörü seçiniz!' }\n    }\n\n    return { isValid: true }\n  }\n\n  static prepareUserData(formData: {\n    age: string\n    profession: string\n    experience: string\n    sector: string\n    salary: string\n    additionalIncome: string\n  }) {\n    return {\n      age: parseInt(formData.age),\n      profession: formData.profession,\n      experience: parseInt(formData.experience) || 0,\n      sector: formData.sector,\n      salary: parseInt(formData.salary) || 0,\n      additionalIncome: parseInt(formData.additionalIncome) || 0\n    }\n  }\n}","size_bytes":3264},"src/services/userService.ts":{"content":"import { collection, addDoc, doc, setDoc } from 'firebase/firestore'\nimport { db } from '../config/firebase'\nimport { createAccountInfo } from '../utils/accountUtils'\n\nexport interface UserRegistrationData {\n  name: string\n  email: string\n  age: number\n  profession: string\n  experience: number\n  sector: string\n  salary: number\n  additionalIncome: number\n}\n\nexport class UserService {\n  static async saveCreditApplication(\n    userId: string,\n    applicationData: {\n      amount: number\n      term: number\n      monthlyPayment: number\n      totalPayment: number\n      totalInterest: number\n      decision: any\n    }\n  ): Promise<void> {\n    try {\n      const applicationRef = collection(db, 'credit_applications')\n      await addDoc(applicationRef, {\n        userId,\n        ...applicationData,\n        applicationDate: new Date(),\n        status: 'processed'\n      })\n    } catch (error) {\n      console.error('Error saving credit application:', error)\n      throw new Error('Kredi başvurusu kaydedilemedi')\n    }\n  }\n\n  static async saveApprovalDocument(\n    userId: string,\n    approvalData: {\n      amount: number\n      term: number\n      monthlyPayment: number\n      decision: any\n    }\n  ): Promise<void> {\n    try {\n      const docRef = doc(db, 'loan_approvals', `${userId}_${Date.now()}`)\n      await setDoc(docRef, {\n        userId,\n        ...approvalData,\n        approvalDate: new Date(),\n        status: 'approved'\n      })\n    } catch (error) {\n      console.error('Error saving approval document:', error)\n      throw new Error('Onay belgesi kaydedilemedi')\n    }\n  }\n\n  static prepareRegistrationData(formData: {\n    age: string\n    profession: string\n    experience: string\n    sector: string\n    salary: string\n    additionalIncome: string\n  }) {\n    return {\n      age: parseInt(formData.age),\n      profession: formData.profession,\n      experience: parseInt(formData.experience) || 0,\n      sector: formData.sector,\n      salary: parseInt(formData.salary) || 0,\n      additionalIncome: parseInt(formData.additionalIncome) || 0,\n      account: createAccountInfo()\n    }\n  }\n}","size_bytes":2097}},"version":1}